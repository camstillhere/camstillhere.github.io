{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Nuix REST-API Reference",
    "description" : "Welcome to the Nuix REST API documentation. From here you can access all available REST APIs and execute queries against your running REST instance.\n\n# New Features!\n\n  - **Header-Based Content Negotiation**\n\n    The Nuix REST API now supports header based content negotiation.  Client applications can specify the version of a response for an endpoint\n    by including the appropriate media type in the Accept header.  The media type follows the format `application/vnd.nuix.v{version-number}+json`\n    The following example requests version 2 of the /about endpoint.\n\n    ```\n    GET /about HTTP/1.1\n    Accept: application/vnd.nuix.v2+json\n    ```\n\n    The Nuix REST API also continues to support URL versioning to maintain backward compatibility and support situations where the Accept header property is not desirable.\n    The same endpoint can be reached using the URL without the use of headers.\n\n    ```\n    GET /v2/about HTTP/1.1\n    ```\n\n    Likewise, the following example requests version 1 of the endpoint using the URL to specify the version.\n\n    ```\n    GET /v1/about HTTP/1.1\n    ```\n\n    **NOTE:** When a version has NOT been specified in either the URL or the Accept header, the most recent version of the response will be returned.\n\nPlease check back frequently with us at [developer.nuix.com](https://developer.nuix.com) and stay tuned for some exciting new upcoming releases that will be heavily\ndeveloper focused.\n\nPlease note that clicking on the 'Example Value' for a request will populate the request body with JSON that matches the values from the example.\nIn order for the request to succeed, the JSON must be modified to include valid values.\nIt is also advisable to remove any section or option from the JSON that is not explicitly applicable to your request.\ndoing so will populate these areas with default values.\n",
    "contact" : {
      "name" : "Nuix",
      "url" : "http://developer.nuix.com/",
      "email" : "APISupport@nuix.com"
    },
    "license" : {
      "name" : "Licence",
      "url" : "https://www.nuix.com/sites/default/files/20200210_EULA_v1.pdf"
    },
    "version" : "8.6.0"
  },
  "servers" : [ {
    "url" : "/nuix-restful-service/svc"
  }, {
    "url" : "http://localhost:8080/svc"
  } ],
  "security" : [ {
    "ApiKeyAuth" : [ ]
  } ],
  "tags" : [ {
    "name" : "Access"
  }, {
    "name" : "Analysis"
  }, {
    "name" : "Culling"
  }, {
    "name" : "Export"
  }, {
    "name" : "Inventory"
  }, {
    "name" : "Licensing"
  }, {
    "name" : "Monitoring"
  }, {
    "name" : "Processing"
  }, {
    "name" : "Resources"
  }, {
    "name" : "Scripting"
  }, {
    "name" : "Search"
  }, {
    "name" : "System"
  } ],
  "paths" : {
    "/asyncFunctions/{key}/remoteWorkers" : {
      "post" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Adds remote workers to a distributed function.",
        "description" : "Currently supports only adding remote workers to a processing job.",
        "operationId" : "addRemoteWorkers",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Async function key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AddRemoteWorkersRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AddRemoteWorkersResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/asyncFunctions" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Returns asynchronous function statuses",
        "description" : "Use this operation to view the status of asynchronous functions. All asynchronous functions that have been run and that are currently running are returned.<br/><br/>NOTE: This endpoint has been deprecated and replaced with the /v1/asyncFunctionsQueue and /v2/asyncFunctions endpoints.",
        "operationId" : "getAsyncFunctionStatusesQueueDeprecated",
        "parameters" : [ {
          "name" : "activeWindowInSeconds",
          "in" : "query",
          "description" : "The time in seconds within which non-queue functions must have been active to be returned. Numbers less than 0 will return all windows.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionStatusesResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/asyncFunctionsQueue" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Returns asynchronous function statuses",
        "description" : "Use this operation to view the status of asynchronous functions. All asynchronous functions that have been run and that are currently running are returned.",
        "operationId" : "getAsyncFunctionStatuses",
        "parameters" : [ {
          "name" : "activeWindowInSeconds",
          "in" : "query",
          "description" : "The time in seconds within which non-queue functions must have been active to be returned. Numbers less than 0 will return all windows.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionStatusesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/asyncFunctions" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Returns asynchronous function statuses",
        "description" : "Use this operation to view the status of asynchronous functions. Functions can be filtered based on caseId and friendlyName.",
        "operationId" : "getAsyncFunctionStatusesQueue",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "query",
          "description" : "The case to filter functions returned on.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "friendlyName",
          "in" : "query",
          "description" : "The type of function to filter on.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AsyncFunctionStatusObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/asyncFunctionSingleItemQueue/pauseStatus" : {
      "put" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Handles pause and resume operations on the single operation AsyncFunction queue",
        "description" : "Once the queue is paused, the next function in the queue will not start after the current one finishes. The queue will resume automatically after the configured queue timeout if no resume request is received.",
        "operationId" : "manageFunctionQueue",
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AsyncFunctionSingleItemQueueStatus"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/asyncFunctionSingleItemQueue/order" : {
      "put" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Set a new order for the single operation AsyncFunction queue",
        "description" : "Currently running functions will not be affected.You must call /asyncFunctionSingleItemQueue/pauseStatus PUT (with paused set to true) to pause the queue prior to calling this endpoint.",
        "operationId" : "setQueueState",
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AsyncFunctionSingleItemQueueReorderRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/asyncFunctions/{key}" : {
      "get" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Returns the status of an asynchronous function",
        "description" : "Use this operation to view the status of an asynchronous function. This is useful when you want to check on the status of a function.",
        "operationId" : "getAsyncFunctionStatus",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Async function key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionStatusObject"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Cancels an asynchronous function that is not a processing job",
        "description" : "Use this operation to cancel an asynchronous function. Processing jobs should use /svc/v1/asyncFunctions/ProcessingJobs/{key} DELETE",
        "operationId" : "cancelAsyncFunction",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Async function key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionStatusObject"
                }
              }
            }
          }
        }
      }
    },
    "/asyncFunctions/processingJobs/{key}" : {
      "delete" : {
        "tags" : [ "Monitoring" ],
        "summary" : "Cancels a processing job",
        "description" : "If canResume is true, any future processing jobs will finish processing the data from this job.",
        "operationId" : "cancelProcessingJob",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Async function key",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "canResume",
          "in" : "query",
          "description" : "Can this processing job be resumed",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionStatusObject"
                }
              }
            }
          }
        }
      }
    },
    "/authenticatedUsers/login" : {
      "put" : {
        "tags" : [ "Access" ],
        "summary" : "Log in and acquire a licence",
        "description" : "Use this operation to log in and get an authentication token or licence. The authentication token gives you access to the REST API.",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuthenticationRequest"
              },
              "examples" : {
                "Username And Password Only" : {
                  "value" : {
                    "username" : "user1",
                    "password" : "mysecurepassword"
                  }
                },
                "Username, Password, and License" : {
                  "value" : {
                    "username" : "user1",
                    "password" : "mysecurepassword",
                    "licenseShortName" : "enterprise-workstation"
                  }
                },
                "Username, Password, License, and Requested Workers" : {
                  "value" : {
                    "username" : "user1",
                    "password" : "mysecurepassword",
                    "licenseShortName" : "enterprise-workstation",
                    "workers" : 2
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "A successful login returns a response that contains the authentication token (authToken) to be submitted in the header of all subsequent requests.  Additionally, the response contains the username, the short name of the license requested, and the number of workers granted by the Nuix engine.\n",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticationResponse"
                },
                "example" : {
                  "username" : "user1",
                  "authToken" : "49e225d7-b88d-4d1b-9cbc-296e83706a60",
                  "licenseShortName" : "enterprise-workstation",
                  "workersGranted" : 1
                }
              }
            }
          },
          "401" : {
            "description" : "Invalid username and/or password.\n",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvalidPasswordException"
                },
                "example" : {
                  "userMessage" : "Incorrect username and/or password.",
                  "developerMessage" : "The user attempted to login with a user name and password that did not match.",
                  "errorCode" : "UNAUTHORISED"
                }
              }
            }
          },
          "409" : {
            "description" : "Returned by the server when REST is unable to obtain the number of workers requested or the specified license type.\n",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/AvailableWorkersException"
                  }, {
                    "$ref" : "#/components/schemas/AcquireLicenseException"
                  } ]
                },
                "examples" : {
                  "AvailableWorkersException" : {
                    "value" : {
                      "userMessage" : "Unable to obtain license from Nuix server.",
                      "developerMessage" : "Tried to acquire 8 worker(s) but only 6 are available.",
                      "errorCode" : "LICENSE_EXCEPTION",
                      "additionalInfo" : {
                        "availableWorkers" : 6,
                        "requestedWorkers" : 8,
                        "rootExceptionClass" : "com.nuix.us.ws.exception.AvailableWorkersException",
                        "rootExceptionMessage" : "Tried to acquire 8 worker(s) but only 6 are available."
                      }
                    }
                  },
                  "AcquireLicenseException" : {
                    "value" : {
                      "userMessage" : "Could not acquire license.",
                      "developerMessage" : "Tried to acquire license enterprise-workstation.",
                      "errorCode" : "LICENSE_EXCEPTION",
                      "additionalInfo" : {
                        "requestedLicense" : "enterprise-workstation",
                        "rootExceptionClass" : "com.nuix.us.ws.exception.AcquireLicenseException",
                        "rootExceptionMessage" : "Tried to acquire enterprise-workstation license."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authenticatedUsers/{username}" : {
      "delete" : {
        "tags" : [ "Access" ],
        "summary" : "Log out",
        "description" : "Logs out the session associated with the provided authentication token.",
        "operationId" : "deleteEnvironment",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username associated with the licence",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "forceSynchronous",
          "in" : "query",
          "description" : "Forces a synchronous logout. This defaults to false, which means that the user is asynchronously logged out but their token is not made invalid immediately. The session remains active if they are running any functions or have functions queued. Even when set to true, the aforementioned holds true. In that case, the server will attempt to log the user out immediately and the HTTP request will wait till that happens. The server will try three times, with a 5 second sleep in between. If the user cannot be logged out due to queued or running functions then the call returns and the user will eventually be logged out due to being idle.\n",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "ignoreCompleted",
          "in" : "query",
          "description" : "Ignores functions that have already completed.  This defaults to true. However, if set to false then the functions that recently completed but have not been cleared yet will be counted in the list of 'running or queued functions' and so, the user's session will not end immediately.\n",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemTags" : {
      "post" : {
        "tags" : [ "Culling" ],
        "summary" : "Tags query items in bulk",
        "description" : "Use this operation to tag all items returned by a query.",
        "operationId" : "bulkTag",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyTagListRequest"
              },
              "example" : {
                "query" : "kind:document",
                "tagList" : [ "mytag1", "mytag2" ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplyTagListResponse"
                },
                "example" : {
                  "tagList" : [ "mytag1", "mytag2" ],
                  "successfulTags" : [ "mytag1", "mytag2" ],
                  "failedTags" : [ ]
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Removes tags from query items in bulk",
        "description" : "Use this operation to remove tags from all the items returned by a query.",
        "operationId" : "bulkRemoveTag",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplyTagListRequest"
              },
              "example" : {
                "query" : "kind:document",
                "tagList" : [ "mytag1", "mytag2" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplyTagListResponse"
                },
                "example" : {
                  "tagList" : [ "mytag1", "mytag2" ],
                  "successfulTags" : [ "mytag1", "mytag2" ],
                  "failedTags" : [ ]
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/tags" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns the set of tags for a case",
        "description" : "Use this operation to view the set of tags associated with a case. This is useful when you want to find a group of items that you've tagged or when you want to include the tags as metadata when exporting items.  The tag names are returned as a set of strings.",
        "operationId" : "getTags",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "For Review", "myCaseTag1", "myCaseTag2", "myTag1", "myTag2" ]
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Culling" ],
        "summary" : "Creates new tags for a case",
        "description" : "Use this operation to create new tags for a case.",
        "operationId" : "createTagsForCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagList"
              },
              "example" : {
                "tagList" : [ "myCaseTag1", "myCaseTag2" ]
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateTagListResponse"
                },
                "example" : {
                  "tagList" : [ "myCaseTag1", "myCaseTag2" ],
                  "createdTags" : [ "myCaseTag1", "myCaseTag2" ],
                  "failedTags" : [ ]
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Deletes tags for a case",
        "description" : "Use this operation to delete tags for a case.  If tags are still applied to an item, the delete operation will fail.",
        "operationId" : "deleteTagsForCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TagList"
              },
              "example" : [ "myTag1", "myTag2" ]
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteTagListResponse"
                },
                "examples" : {
                  "Tag Delete Success" : {
                    "value" : {
                      "tagList" : [ "mytag1" ],
                      "deletedTags" : [ "mytag1" ],
                      "failedTags" : [ ]
                    }
                  },
                  "Tag Delete Failure" : {
                    "value" : {
                      "tagList" : [ "mytag1" ],
                      "deletedTags" : [ ],
                      "failedTags" : [ "mytag1" ]
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/excludedItems" : {
      "put" : {
        "tags" : [ "Culling" ],
        "summary" : "Excludes items in bulk",
        "description" : "Use this operation to flag items as excluded using the exclusion query. Items are tagged with the exclusion reason you provide in the request body as part of the BulkExclusionRequest.",
        "operationId" : "bulkExcludeAsFunction",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkExclusionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/includedItems" : {
      "put" : {
        "tags" : [ "Culling" ],
        "summary" : "Includes items in bulk",
        "description" : "Use this operation to remove the exclusion flag from all the items returned by a query.",
        "operationId" : "bulkIncludeAsFunction",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkInclusionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/clusterRuns" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the cluster runs for a case",
        "description" : "Use this operation to view the cluster runs associated with a case.  A cluster run is a group of documents that have been associated based on their near-duplicate similarity. Using cluster runs to group similar or related documents enables your team to perform a more efficient analysis on an item set. For example, you can have the same reviewer examine documents that are the most similar or related.",
        "operationId" : "getClusterRuns",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterRunResponse"
                  }
                },
                "example" : [ {
                  "clusterName" : "MyClusterRun",
                  "clusters" : [ "ignored", "unclustered", 1, 2, 3 ],
                  "resemblanceThreshold" : 0.85,
                  "useChainedNearDuplicatesEnabled" : true,
                  "useEmailThreadsEnabled" : false
                } ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Culling" ],
        "summary" : "Creates a cluster run based on the query provided",
        "description" : "Use this operation to create a cluster run in a case.<br/><br/>A cluster run is a group of documents that have been associated based on their near-duplicate similarity. Using cluster runs to group similar or related documents enables your team to perform a more efficient analysis on an item set. For example, you can have the same reviewer examine documents that are the most similar or related.",
        "operationId" : "createClusterRun",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClusterRunRequest"
              },
              "example" : {
                "name" : "MyClusterRun",
                "query" : "",
                "resemblanceThreshold" : 0.85,
                "useChainedNearDuplicates" : true,
                "useEmailThreads" : false,
                "saveIfEmpty" : true
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/clusterRuns/{clusterRunName}/items" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Lists items in this cluster run",
        "description" : "Use this operation to list items in the cluster run. Optional parameters for which cluster, and whether or not the item is a pivot item. Note you may only specify one of the following: clusterNumber, isUnclustered, or isIgnored if any. This is a shortcut operation for querying with the cluster: field.",
        "operationId" : "getClusterRunItems",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "clusterRunName",
          "in" : "path",
          "description" : "Cluster run name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startIndex",
          "in" : "query",
          "description" : "Start index, defaults to 0",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "numberOfRecordsRequested",
          "in" : "query",
          "description" : "Number of records to return, defaults to all",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 100
        }, {
          "name" : "clusterNumber",
          "in" : "query",
          "description" : "Cluster number.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "isPivot",
          "in" : "query",
          "description" : "Match pivot items, defaults to all",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "isUnclustered",
          "in" : "query",
          "description" : "Matches items that did not cluster, despite being eligible to exist in a cluster.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "isIgnored",
          "in" : "query",
          "description" : "Matches items that were ignored because they were ineligible to exist in a cluster.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchNativeResult"
                },
                "example" : {
                  "request" : {
                    "caseId" : "219f69f5eee14cf6b8c8c15d7cc2dd1e",
                    "query" : "cluster:\"cluster-run-1;5\"",
                    "sortField" : null,
                    "sortOrder" : null,
                    "startIndex" : 0,
                    "numberOfRecordsRequested" : 1,
                    "deduplicate" : null,
                    "metadataProfile" : null,
                    "fieldList" : [ ],
                    "customMetadataList" : [ ],
                    "propertyList" : [ ],
                    "itemParameterizedFields" : [ ],
                    "showAvailableThumbnails" : false,
                    "useCache" : false,
                    "forceCacheDelete" : false,
                    "searchRetry" : 0,
                    "relationType" : null,
                    "entities" : [ ],
                    "p" : 1,
                    "s" : 0,
                    "customMetadataField" : [ ],
                    "field" : [ ],
                    "property" : [ ]
                  },
                  "startedOn" : 1588859051337,
                  "completedOn" : 1588859051383,
                  "elapsedTimeForSearch" : 41,
                  "elapsedTimeForSort" : 0,
                  "elapsedTimeForMarshal" : 5,
                  "elapsedTimeForDeduplicate" : 0,
                  "elapsedTotal" : 46,
                  "metadataItems" : [ ],
                  "localizedMetadataItems" : [ ],
                  "metadataItemDetails" : [ ],
                  "resultList" : [ {
                    "customMetadata" : { },
                    "entities" : { },
                    "guid" : "1e623d0a-6c6f-45b2-9931-fb4a49ca4c3d",
                    "properties" : { }
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request. Note you may only specify one of the following: clusterNumber, isUnclustered, or isIgnored.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "INVALID_REQUEST_FORMAT",
                  "developerMessage" : "You may only specify one of the following: clusterNumber, isUnclustered, or isIgnored if any.",
                  "userMessage" : null,
                  "additionalInfo" : { }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/clusterRuns/{clusterRunName}" : {
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Delete a cluster run",
        "operationId" : "deleteClusterRun",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "clusterRunName",
          "in" : "path",
          "description" : "Cluster run name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "default response."
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/bulkSearchers" : {
      "post" : {
        "tags" : [ "Culling" ],
        "summary" : "Generate a count report and optionally tag items.",
        "description" : "Use this operation to create a count report and optionally tag individual items.",
        "operationId" : "bulkSearchers",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "caseId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkSearcherRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/domains" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the set of communication domains in a case",
        "description" : "Use this operation to view the communication domains associated with a case.  Allowable values for addressType are internet_mail, phone, and instant_message.  This is useful for analysis and analytics. The domains are returned as a set of strings.",
        "operationId" : "getDomains",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "addressType",
          "in" : "query",
          "description" : "The type of contact address",
          "required" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "internet_mail", "phone", "instant_message" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "gmail.com" ]
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "summary" : "Returns the top-level information for a case",
        "description" : "Use this operation to view the top-level information associated with a case. Top-level case information returns case property content like the following: case ID, name, path, description, investigator time zone, investigator, and whether the case is simple or compound.",
        "operationId" : "openCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "determineAdditionalAttributes",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "calculateCaseSize",
          "in" : "query",
          "description" : "Should size of case on disk be calculated? Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CaseResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Inventory" ],
        "summary" : "Deletes a case",
        "description" : "Use this operation to delete a case.",
        "operationId" : "deleteCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deleteAllDescendants",
          "in" : "query",
          "description" : "Delete child cases of a compound case",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CaseDeleteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/childCases/{childCaseId}" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "summary" : "Adds a child case to a compound case",
        "description" : "Use this operation to add a single child case to a compound case.",
        "operationId" : "addChildCaseToCompoundCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "childCaseId",
          "in" : "path",
          "description" : "Case ID for the child case",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/childCases" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "summary" : "Returns a list of child cases for a compound case",
        "description" : "Use this operation to view the child cases, or simple cases, associated with a compound case.",
        "operationId" : "getChildCases",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "determineAdditionalAttributes",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "calculateCaseSize",
          "in" : "query",
          "description" : "Should size of each child case on disk be calculated? Defaults to false",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CaseResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Inventory" ],
        "summary" : "Adds child cases to a compound case",
        "description" : "Use this operation to add multiple child cases to a compound case at once.",
        "operationId" : "addChildCasesToCompoundCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/close" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "summary" : "Closes a case",
        "description" : "Use this operation to close a case in a user session. Cases should be closed when not in use or they will remain locked.",
        "operationId" : "closeCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/exclusions" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns exclusions for a case",
        "description" : "Use this operation to view the set of exclusions associated with a case.",
        "operationId" : "getExclusions",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/markupSet" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Gets all MarkupSets for the given case",
        "description" : "Use this operation to get a list of all MarkupSets in the current case.",
        "operationId" : "getMarkupSets",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MarkupSet"
                  }
                },
                "example" : [ {
                  "redactionReason" : "The reason for the redaction.",
                  "name" : "MyMarkupSet",
                  "description" : "This is a markup set."
                } ]
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemTypes" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns item kinds and types for a case",
        "description" : "Use this operation to view the item kinds and types associated\nwith a case. You can also request counts along with a filtering query.  Item\ntypes are modeled on MIME types.  For example, an item kind could be a document\nand the item type could be a PDF.\n",
        "operationId" : "getItemTypes",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeCounts",
          "in" : "query",
          "description" : "Include count totals for the types",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/KindTypeResponse"
                  }
                },
                "example" : {
                  "itemKind" : "document",
                  "itemTypes" : [ {
                    "name" : "application/pdf",
                    "localisedName" : "Portable Document Format",
                    "kind" : "document",
                    "preferredExtension" : "pdf",
                    "count" : 11
                  } ]
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/reviewJobs/{reviewJobName}" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns details for a review job",
        "description" : "Use this operation to see the list of review jobs for a case.  All jobs are returned including fast review jobs. In these jobs, reviewers are assigned directly to a job, enabling a systematic review.",
        "operationId" : "getReviewJob",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewJobName",
          "in" : "path",
          "description" : "Review job name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewJobResponse"
                },
                "example" : [ {
                  "name" : "MyFastReviewJob",
                  "guid" : "9a6ae288-aa23-44e5-ba6b-f88f588ebbc3"
                } ]
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Job Review Name" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Review Job InvalidReviewJobName does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Analysis" ],
        "summary" : "Deletes a review job",
        "description" : "Use this operation to delete a review job for a case.",
        "operationId" : "deleteReviewJob",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewJobName",
          "in" : "path",
          "description" : "Review job name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "default response"
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Job Review Name" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Review Job InvalidReviewJobName does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/reviewJobs" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns review jobs for a case",
        "description" : "Use this operation to see the list of review jobs for a case. All review jobs are returned including fast review jobs. In fast review jobs, reviewers are assigned to a job, enabling a systematic review.",
        "operationId" : "getFastReviewJobs",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReviewJobResponse"
                  }
                },
                "example" : [ {
                  "name" : "MyFastReviewJob",
                  "guid" : "9a6ae288-aa23-44e5-ba6b-f88f588ebbc3"
                } ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Creates a review job for a case",
        "description" : "Use this operation to create a review job for a case.  Create a review job to enable a systematic review of a case.",
        "operationId" : "createReviewJob",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateReviewJobRequest"
              },
              "example" : {
                "name" : "MyReviewJob",
                "options" : {
                  "tags" : [ "For Review" ],
                  "useNearDuplicates" : false,
                  "useEmailThreads" : false
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewJobResponse"
                },
                "example" : [ {
                  "name" : "MyFastReviewJob",
                  "guid" : "9a6ae288-aa23-44e5-ba6b-f88f588ebbc3"
                } ]
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/reviewJobs/{reviewJobName}/items" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the review job items",
        "description" : "Use this operation to get the list of items for a review job. The items in a review job are grouped and must be reviewed as an entire family of documents. You can add different tags to each member of the family, but in order to advance to the next batch, the entire family must be tagged.",
        "operationId" : "addItemsToReviewJob_1",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewJobName",
          "in" : "path",
          "description" : "Review job name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NuixReviewJobItem"
                  }
                },
                "example" : [ {
                  "completionDateTime" : null,
                  "item" : {
                    "File Type" : "text/plain",
                    "caseName" : "MyCase",
                    "date" : 1588880372000,
                    "digests" : {
                      "md5" : "a9a55486967ac71c24b60fa5c922d716"
                    },
                    "fileType" : "text/plain",
                    "guid" : "5ce80ae4-5b6f-484f-9563-1fa22c89ae05",
                    "isBinaryAvailable" : true,
                    "isTopLevel" : true,
                    "text" : "some text",
                    "fileSize" : 13
                  }
                } ]
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Job Review Name" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Review Job InvalidReviewJobName does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Adds items to a review job",
        "description" : "Use this operation to add items to an existing review job for a case.  Items added to a review job are grouped and must be reviewed as an entire family of documents. You can add different tags to each member of the family, but to advance to the next batch, the entire family must be tagged.",
        "operationId" : "addItemsToReviewJob",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewJobName",
          "in" : "path",
          "description" : "Review job name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReviewJobAddItemsRequest"
              },
              "example" : {
                "query" : "guid:9dd7ebaa-0671-4f73-add7-d38d920105eb",
                "options" : {
                  "user" : "assignedUser1"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReviewJobResponse"
                },
                "example" : {
                  "name" : "MyFastReviewJob",
                  "guid" : "9a6ae288-aa23-44e5-ba6b-f88f588ebbc3"
                }
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Job Review Name" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Review Job InvalidReviewJobName does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/keyStores" : {
      "get" : {
        "tags" : [ "Processing" ],
        "summary" : "Returns a list of keystore files available for a case",
        "description" : "Returns a list of keystore files available for a case.",
        "operationId" : "getCaseKeystores",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : [ "/opt/nuix/nuix-restful-service/cases/MyCase/keystores" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "mykeystore" ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Adds a keystore to a case",
        "description" : "Uploads a keystore file to the cases directory.Currently supported key files are: PGP keyrings and collections - ACSII-armoured and binary (used for PGP decryption), PKCS#12 (used for S/MIME decryption), and Lotus Notes ID files which are associated with NSF files found in evidence",
        "operationId" : "addKeyStoreToCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "keystoreFile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                },
                "example" : {
                  "success" : true
                }
              }
            }
          },
          "409" : {
            "description" : "A keystore file with the same filename already exists.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "userMessage" : "A keystore file with that name was already uploaded to this case.",
                  "additionalInfo" : null,
                  "errorCode" : "FOLDER_ALREADY_EXISTS",
                  "developerMessage" : "A user attempted to upload a file, while another file with this name already existed."
                }
              }
            }
          },
          "413" : {
            "description" : "The size of the request exceeds the maximum size.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "FILE_TOO_LARGE",
                  "developerMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n",
                  "userMessage" : null,
                  "additionalInfo" : {
                    "rootExceptionClass" : "org.springframework.web.multipart.MultipartException",
                    "rootExceptionMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n"
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Processing" ],
        "summary" : "Deletes the requested keystore from the case's keystore directory",
        "description" : "Deletes the requested keystore from the case's keystore directory.  All keystores are deleted if the fileToDeleteRegex query parameter is not included.",
        "operationId" : "deleteKeystoreFromCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fileToDeleteRegex",
          "in" : "query",
          "description" : "fileToDeleteRegex",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : ".*"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                },
                "example" : {
                  "success" : true
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemProperties/{propertyName}" : {
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Returns a list of values for the specified property.",
        "description" : "Use this operation to retrieve a list of values for the specified property. Property values will be returned for items matching the query.",
        "operationId" : "getItemProperties",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "propertyName",
          "in" : "path",
          "description" : "Name of the property to retrieve values for",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemPropertiesRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "summary" : "Creates a case",
        "description" : "Use this operation to create a case. You can create a simple or compound case, which is a collection of simple cases.  You can declare that a simple case be processed via ElasticSearch by defining the elasticSearchSettings attribute.  Compound cases cannot be processed via ElasticSearch.<br/><br/>When you create a case, the location of the CaseCreateRequest must be a relative path, or an absolute path that is within a configured inventory location.  Using a relative path will result in the case being created within the first configured inventory location, although please note that for historical reasons the first directory in the relative path is ignored.  Relative paths allow the REST server administrator to control where cases are created and provides a layer of security between the server and the user.<br/><br/>Here's an example of a case creation request that uses a relative path:<br/><br/><b>Example:</b><br/>{<br/>&nbsp;&nbsp;&nbsp;\"name\":\"MyCase\",<br/>&nbsp;&nbsp;&nbsp;\"location\":\"inventory0\",<br/>&nbsp;&nbsp;&nbsp;\"description\":\"About My Case\",<br/>&nbsp;&nbsp;&nbsp;\"compound\":false,<br/>&nbsp;&nbsp;&nbsp;\"investigator\":\"Inspector Gadget\"<br/>}",
        "operationId" : "createCase",
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCaseRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CaseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/subset" : {
      "post" : {
        "tags" : [ "Inventory" ],
        "summary" : "Creates a case subset",
        "description" : "Use this operation to create a case subset.  When you create a case, the location must be a relative path, or an absolute path that is within a configured inventory location. Here's an example of a case subset creation request.<br/><br/>{<br/>&nbsp;&nbsp;&nbsp;\"query\":\"*\",<br/>&nbsp;&nbsp;&nbsp;\"location\":\"inventory0\",<br/>&nbsp;&nbsp;&nbsp;\"caseMetadata\": {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"name\": \"myCase\"<br/>&nbsp;&nbsp;&nbsp;}<br/>}",
        "operationId" : "createCaseSubset",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCaseSubsetRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/metadataFields" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "summary" : "Returns metadata fields available for a case",
        "description" : "Use this operation to view the metadata fields  associated with a case.",
        "operationId" : "getCaseMetadataFields",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CaseMetadataField"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/batches" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns batches associated with a case",
        "description" : "Use this operation to view a list of batches associated with a case. Batches are created when an investigator ingests data using the Nuix Engine.",
        "operationId" : "getCaseBatches",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identifier",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BatchLoadDetailsResponse"
                  }
                },
                "examples" : {
                  "BatchLoadResponseDetails" : {
                    "value" : [ {
                      "batchId" : "aa6aec71-d867-4ed3-8aca-b304335b8d71",
                      "dataProcessingSettings" : {
                        "Classify images with deep learning" : "false",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45log.Process embedded" : "false",
                        "Mime type settings.filesystem#47x#45ntfs#45logfile.Process images" : "true",
                        "Mime type settings.application#47x#45plist.Process images" : "true",
                        "Extract named entities from text" : "false",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45logx.Text processing mode" : "strip_text",
                        "Mime type settings.application#47vnd#46tcpdump#46pcap.Store binary" : "true",
                        "Mime type settings.application#47vnd#46symantec#45vault#45stream#45data.Process named entities" : "true",
                        "Mime type settings.application#47vnd#46sqlite#45database.Process named entities" : "true",
                        "Store binary" : "false",
                        "Mime type settings.application#47vnd#46ms#45iis#45log.Process images" : "true",
                        "Mime type settings.application#47vnd#46symantec#45vault#45stream#45data.Process images" : "true",
                        "Calculate processing size" : "false",
                        "Mime type settings.application#47x#45pcapng.Text processing mode" : "strip_text",
                        "Mime type settings.application#47x#45pcapng.Store binary" : "true",
                        "Mime type settings.application#47x#45plist.Process named entities" : "true",
                        "Mime type settings.filesystem#47x#45ntfs#45usnjrnl.Store binary" : "true",
                        "Mime type settings.application#47exe.Process images" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dxf.Process embedded" : "true",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45logx.Store binary" : "true",
                        "Mime type settings.application#47vnd#46sqlite#45database.Process images" : "true",
                        "Mime type settings.application#47vnd#46ms#45registry.Process embedded" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dxf.Process named entities" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dwfx.Process images" : "true",
                        "Mime type settings.application#47vnd#46symantec#45vault#45stream#45data.Process embedded" : "true",
                        "Index chars fields" : "false",
                        "Mime type settings.filesystem#47x#45ntfs#45mft.Process named entities" : "true",
                        "Mime type settings.application#47x#45plist.Text processing mode" : "process_text",
                        "Mime type settings.image#47vnd#46autocad#45dwf.Process images" : "true",
                        "Mime type settings.application#47vnd#46sqlite#45database.Store binary" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dxf.Text processing mode" : "strip_text",
                        "Mime type settings.text#47x#45common#45log.Store binary" : "true",
                        "Mime type settings.text#47tab#45separated#45values.Process images" : "true",
                        "Mime type settings.application#47exe.Text processing mode" : "skip_text",
                        "Mime type settings.text#47x#45common#45log.Process images" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dxf.Process images" : "true",
                        "Mime type settings.application#47vnd#46symantec#45vault#45stream#45data.Store binary" : "true",
                        "Mime type settings.application#47vnd#46ms#45cab#45compressed.Process images" : "true",
                        "Mime type settings.text#47x#45common#45log.Process named entities" : "true",
                        "Populate graph database" : "false",
                        "Mime type settings.filesystem#47x#45ntfs#45mft.Store binary" : "true",
                        "Mime type settings.text#47csv.Text processing mode" : "process_text",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45logx.Process embedded" : "false",
                        "Mime type settings.application#47vnd#46symantec#45vault#45stream#45data.Text processing mode" : "process_text",
                        "Perform ocr" : "false",
                        "Mime type settings.application#47vnd#46ms#45iis#45log.Text processing mode" : "strip_text",
                        "Mime type settings.application#47exe.Process embedded" : "true",
                        "Mime type settings.filesystem#47unallocated#45space#45chunk.Process embedded" : "true",
                        "Calculate photo DNA robust hash" : "false",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45log.Text processing mode" : "strip_text",
                        "Mime type settings.image#47vnd#46autocad#45dwg.Store binary" : "true",
                        "Mime type settings.image#47vnd#46autocad#45shp.Process images" : "true",
                        "Process forensic images" : "true",
                        "Mime type settings.filesystem#47x#45ntfs#45usnjrnl.Process named entities" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dwg.Process named entities" : "true",
                        "Custom thumbnail selected" : "false",
                        "Face detection" : "false",
                        "Mime type settings.application#47vnd#46tcpdump#46pcap.Text processing mode" : "strip_text",
                        "Mime type settings.image#47vnd#46autocad#45dwf.Text processing mode" : "strip_text",
                        "Mime type settings.application#47vnd#46tcpdump#46pcap.Process named entities" : "true",
                        "Process loose file contents" : "true",
                        "Use named entity profile" : "false",
                        "Mime type settings.application#47vnd#46ms#45cab#45compressed.Store binary" : "true",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45log.Process named entities" : "true",
                        "Ocr profile name" : "Default",
                        "Mime type settings.text#47x#45common#45log.Process embedded" : "false",
                        "Create thumbnails" : "false",
                        "Mime type settings.image#47vnd#46autocad#45dwf.Process named entities" : "true",
                        "Imaging profile name" : "Processing Default",
                        "Mime type settings.image#47vnd#46autocad#45dwf.Store binary" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dwfx.Process embedded" : "true",
                        "Mime type settings.application#47x#45plist.Store binary" : "true",
                        "Digests" : "MD5",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45log.Store binary" : "true",
                        "Mime type settings.filesystem#47x#45ntfs#45usnjrnl.Process embedded" : "false",
                        "Mime type settings.text#47csv.Process embedded" : "false",
                        "Mime type settings.image#47vnd#46autocad#45dwfx.Text processing mode" : "strip_text",
                        "Calculate SS deep fuzzy hash" : "false",
                        "Mime type settings.text#47x#45common#45log.Text processing mode" : "strip_text",
                        "Extract named entities from properties" : "false",
                        "Mime type settings.filesystem#47x#45ntfs#45logfile.Process named entities" : "true",
                        "Mime type settings.image#47vnd#46autocad#45shp.Process embedded" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dwg.Process embedded" : "true",
                        "Mime type settings.text#47tab#45separated#45values.Text processing mode" : "process_text",
                        "Mime type settings.application#47vnd#46ms#45registry.Process images" : "true",
                        "Mime type settings.application#47vnd#46ms#45registry.Text processing mode" : "process_text",
                        "Mime type settings.filesystem#47unallocated#45space#45chunk.Text processing mode" : "process_text",
                        "Mime type settings.filesystem#47x#45ntfs#45logfile.Store binary" : "true",
                        "Mime type settings.application#47x#45pcapng.Process images" : "true",
                        "Calculate audited size" : "true",
                        "Mime type settings.application#47vnd#46ms#45cab#45compressed.Process named entities" : "true",
                        "Mime type settings.application#47x#45pcapng.Process embedded" : "false",
                        "Mime type settings.filesystem#47x#45ntfs#45logfile.Process embedded" : "false",
                        "Mime type settings.filesystem#47x#45ntfs#45mft.Text processing mode" : "strip_text",
                        "Mime type settings.filesystem#47x#45ntfs#45usnjrnl.Process images" : "true",
                        "Workstation thumbnail selected" : "false",
                        "Mime type settings.image#47vnd#46autocad#45dwfx.Process named entities" : "true",
                        "Mime type settings.text#47csv.Process named entities" : "true",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45log.Process images" : "true",
                        "Mime type settings.image#47vnd#46autocad#45shp.Store binary" : "true",
                        "Process text" : "true",
                        "Mime type settings.filesystem#47x#45ntfs#45usnjrnl.Text processing mode" : "strip_text",
                        "Mime type settings.filesystem#47unallocated#45space#45chunk.Process images" : "true",
                        "Processing settings software version" : "8.2.0.123",
                        "Hide embedded immaterial data" : "false",
                        "Mime type settings.text#47tab#45separated#45values.Store binary" : "true",
                        "Extract named entities from text stripped" : "false",
                        "Mime type settings.image#47vnd#46autocad#45shp.Process named entities" : "true",
                        "Mime type settings.application#47vnd#46ms#45cab#45compressed.Process embedded" : "false",
                        "Mime type settings.image#47vnd#46autocad#45dwg.Process images" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dwfx.Store binary" : "true",
                        "Mime type settings.filesystem#47x#45ntfs#45mft.Process images" : "true",
                        "Mime type settings.application#47vnd#46sqlite#45database.Text processing mode" : "strip_text",
                        "Mime type settings.application#47vnd#46ms#45registry.Process named entities" : "true",
                        "Mime type settings.application#47x#45plist.Process embedded" : "false",
                        "Web thumbnail selected" : "false",
                        "Mime type settings.filesystem#47x#45ntfs#45logfile.Text processing mode" : "strip_text",
                        "Custom processing aspects" : "",
                        "Mime type settings.application#47vnd#46sqlite#45database.Process embedded" : "false",
                        "Mime type settings.filesystem#47unallocated#45space#45chunk.Store binary" : "true",
                        "Mime type settings.text#47tab#45separated#45values.Process embedded" : "false",
                        "Mime type settings.image#47vnd#46autocad#45dxf.Store binary" : "true",
                        "Mime type settings.application#47exe.Store binary" : "true",
                        "Mime type settings.application#47vnd#46tcpdump#46pcap.Process embedded" : "false",
                        "Mime type settings.application#47vnd#46tcpdump#46pcap.Process images" : "true",
                        "Export metadata" : "false",
                        "Mime type settings.application#47vnd#46ms#45iis#45log.Process embedded" : "false",
                        "Mime type settings.application#47exe.Process named entities" : "true",
                        "Mime type settings.application#47vnd#46ms#45cab#45compressed.Text processing mode" : "process_text",
                        "Skin tone analysis" : "false",
                        "Mime type settings.image#47vnd#46autocad#45dwg.Text processing mode" : "strip_text",
                        "Mime type settings.text#47csv.Store binary" : "true",
                        "Mime type settings.application#47x#45pcapng.Process named entities" : "true",
                        "Process text summaries" : "true",
                        "Mime type settings.image#47vnd#46autocad#45shp.Text processing mode" : "strip_text",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45logx.Process named entities" : "true",
                        "Max digest size" : "250 MB",
                        "Extract shingles" : "true",
                        "Mime type settings.application#47vnd#46ms#45registry.Store binary" : "true",
                        "Mime type settings.application#47vnd#46ms#45iis#45log.Store binary" : "true",
                        "Max binary size" : "250 MB",
                        "Mime type settings.text#47tab#45separated#45values.Process named entities" : "true",
                        "Mime type settings.text#47csv.Process images" : "true",
                        "Mime type settings.application#47vnd#46ms#45iis#45log.Process named entities" : "true",
                        "Mime type settings.image#47vnd#46autocad#45dwf.Process embedded" : "true",
                        "Mime type settings.filesystem#47unallocated#45space#45chunk.Process named entities" : "true",
                        "Mime type settings.filesystem#47x#45ntfs#45mft.Process embedded" : "false",
                        "Reuse evidence stores" : "false",
                        "Create printed image" : "false",
                        "Mime type settings.application#47vnd#46ms#45windows#45event#45logx.Process images" : "true",
                        "Process family fields" : "false"
                      },
                      "caseEvidenceSettings" : {
                        "Use stop words" : "false,",
                        "Use stemming" : "false,",
                        "Analysis language" : "ENGLISH"
                      },
                      "additionalSettings" : {
                        "system.processorCount" : "1",
                        "system.isLowSpec" : "true",
                        "system.swapSpace" : "0 bytes",
                        "system.memory" : "8.19 GB",
                        "master.memory" : "1.86 GB",
                        "system.jvmMaxMemory" : "8.19 GB"
                      },
                      "dataSettings" : {
                        "Use apsose for word text extraction" : "false",
                        "Recover deleted files" : "true",
                        "Add bcc to email digest" : "false",
                        "Identify physical files" : "true",
                        "Software version" : "8.2.0.123",
                        "Add communication date to email digest" : "false",
                        "Carve unidentified data" : "false",
                        "Extract end of file slack space" : "false",
                        "Expose binary data for directories" : "false",
                        "Direct access to mailboxes" : "false",
                        "Render dpi" : "100",
                        "Disabled mime types" : "application/vnd.ms-registry,application/vnd.symantec-vault-stream-data",
                        "Extract from slack space" : "false",
                        "Disabled carving mime types" : "",
                        "Carve file system unallocated space" : "false",
                        "Smart process registry" : "false"
                      },
                      "loadedOn" : "1576610430230,",
                      "operatingSystem" : "linux",
                      "operatingSystemArchitecture" : "amd64",
                      "parallelProcessingSettings" : {
                        "Worker memory" : 1431,
                        "Broker memory" : 4096,
                        "User defined temp directory" : true,
                        "Embed broker" : true,
                        "Worker temp directory" : "/tmp",
                        "Run local workers" : true,
                        "Batch size" : null,
                        "Worker count" : 2,
                        "Worker broker address" : null
                      },
                      "processArchitecture" : "amd64"
                    } ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/history" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns history events for a case",
        "description" : "Use this operation to get a list of history events associated\nwith a case. The events are returned in ascending order by date. Each history\nevent represents an individual action performed by a user. This following\nare the types of history events:\n\n* **openSession:** This event occurs at the start of a session with a case (for example, when the\ncase is opened).\n* **closeSession:** This event occurs at the end of a session with a case (for example, when the case is closed).\n* **loadData:** This event occurs when data is loaded into the case.\n* **search:** This event occurs when a search is performed.\n* **annotation:** This event occurs when items are annotated or tagged.\n* **export:** This event occurs when data or metadata is exported out of the case.\n* **import**: This event occurs when data or metadata is imported into the case.  With import,\nthe data is directly imported without processing.\n* **delete:** This event occurs when data in the case is deleted.\n* **script:** This event occurs when a script is executed.\n* **printPreview:** This event occurs when a print preview action is executed.\n",
        "operationId" : "getCaseHistory",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filters the type of history event returned.  If not specified, all events are returned.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "openSession", "closeSession", "loadData", "search", "annotation", "export", "import", "delete", "script", "printPreview" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CaseHistoryEventResponse"
                  }
                },
                "example" : [ {
                  "cancelled" : false,
                  "details" : {
                    "searchString" : "*"
                  },
                  "startDate" : 1588363137585,
                  "endDate" : 1588363137591,
                  "failed" : false,
                  "succeeded" : true,
                  "type" : "search",
                  "username" : "youruser"
                }, {
                  "cancelled" : false,
                  "details" : {
                    "version" : "8.6.0.33"
                  },
                  "startDate" : 1588363137585,
                  "endDate" : 1588363137591,
                  "failed" : false,
                  "succeeded" : true,
                  "type" : "openSession",
                  "username" : "youruser"
                } ]
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/custodians" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the set of custodians for a case",
        "description" : "Use this operation to view the custodians associated with a case. This is useful to see who is responsible for files in specific cases. The custodian names are returned as a set of strings.",
        "operationId" : "getCustodians",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "Homer Simpson", "Bart Simpson" ]
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/entityTypes" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the set of entity types for a case",
        "description" : "Use this operation to retrieve the types of named entities associated with a case.  Named entities are classified during data ingestion and include email addresses, credit card numbers, URLs, and more. The entity types are returned as a set of strings.",
        "operationId" : "getEntityTypes",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "company", "country", "credit-card-num", "email", "ip-address", "money", "person", "personal-id-num", "phone-number", "url" ]
              },
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EntityTypeResponse"
                },
                "example" : {
                  "entityTypes" : [ {
                    "name" : "company",
                    "localisedName" : "Company"
                  }, {
                    "name" : "country",
                    "localisedName" : "United States"
                  }, {
                    "name" : "credit-card-num",
                    "localisedName" : "Credit Card"
                  }, {
                    "name" : "email",
                    "localisedName" : "Email"
                  }, {
                    "name" : "ip-address",
                    "localisedName" : "IP Address"
                  }, {
                    "name" : "money",
                    "localisedName" : "Money"
                  }, {
                    "name" : "person",
                    "localisedName" : "Person"
                  }, {
                    "name" : "personal-id-num",
                    "localisedName" : "Personal ID Number"
                  }, {
                    "name" : "phone-number",
                    "localisedName" : "Phone Number"
                  }, {
                    "name" : "url",
                    "localisedName" : "URL"
                  } ]
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/reviewJobs/{reviewJobName}/tags" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the tags in this review job",
        "description" : "Use this operation to view the list of tags associated with this review job.  In order to advance to the next batch, all review job items must be tagged.",
        "operationId" : "getTagsFromReviewJob",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewJobName",
          "in" : "path",
          "description" : "Review job name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "For Review" ]
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Job Review Name" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Review Job InvalidReviewJobName does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/reviewJobs/{reviewJobName}/reviewers" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the active reviewers in this review job",
        "description" : "Use this operation to view the set of active users who have reviewed items under review job.",
        "operationId" : "getReviewersFromReviewJob",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reviewJobName",
          "in" : "path",
          "description" : "Review job name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NmsUser"
                  }
                },
                "examples" : {
                  "Assigned Users" : {
                    "value" : [ {
                      "longName" : "assignedUser1",
                      "shortName" : "assignedUser1"
                    }, {
                      "longName" : "assignedUser2",
                      "shortName" : "assignedUser2"
                    } ]
                  },
                  "No Reviewers" : {
                    "value" : [ ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Job Review Name" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Review Job InvalidReviewJobName does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/originalExtensions" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the set of original file extensions for a case",
        "description" : "Use this operation to view all original file extensions in a case. You can also view whether a file has been renamed.  The extensions are returned as a set of strings. To view the current file types associated with a case, use the itemTypes endpoint.",
        "operationId" : "getOriginalExtensions",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "txt", "dat", "docx", "gz", "html", "pdf", "png", "tiff", "xml", "yml", "zip", "tar", "log", "xlsx", "jpg" ]
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/languages" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns all languages found in the case",
        "description" : "Use this operation to see a list of all languages used in a case. This information is useful when analysing content and when working with analytics.",
        "operationId" : "getLanguages",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeItemCounts",
          "in" : "query",
          "description" : "Include counts for the languages",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "countScopingQuery",
          "in" : "query",
          "description" : "Scope the counts to a provided query when includeItemCounts=true",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LanguageResponse"
                  }
                },
                "example" : [ {
                  "code" : "deu",
                  "languageName" : "German",
                  "itemCount" : 3
                }, {
                  "code" : "eng",
                  "languageName" : "English",
                  "itemCount" : 162
                }, {
                  "code" : "hrv",
                  "languageName" : "Croatian",
                  "itemCount" : 12
                }, {
                  "code" : "ron",
                  "languageName" : "Romanian",
                  "itemCount" : 9
                } ]
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/investigatorTimeZone" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the investigation time zone for a case",
        "description" : "Use this operation to find the time zone in which the case is being investigated. You can find a list of valid timezones at: http://www.joda.org/joda-time/timezones.html",
        "operationId" : "getInvestigatorTimeZone",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/InvestigatorTimeZoneResponse"
                },
                "example" : {
                  "timezone" : "America/New_York"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Analysis" ],
        "summary" : "Sets the investigation time zone for a case",
        "description" : "Use this operation to set the investigation time zone for a case. You can find a list of valid timezones at: http://www.joda.org/joda-time/timezones.html",
        "operationId" : "setInvestigatorTimeZone",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TimezoneRequest"
              },
              "example" : {
                "timezone" : "Pacific/Honolulu"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/markupSet/{markupSetName}" : {
      "put" : {
        "tags" : [ "Analysis" ],
        "summary" : "Updates a markup set",
        "description" : "Use this operation to update an existing markup set's description and redaction reason. Markup sets are applied to PDF's and used to revise sensitive content.",
        "operationId" : "updateMarkupSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "markupSetName",
          "in" : "path",
          "description" : "The name of the markup set",
          "required" : true,
          "example" : "MyMarkupSet",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkupSetRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkupSet"
                },
                "example" : {
                  "name" : "MyMarkupSet",
                  "description" : "This is an updated markup set.",
                  "redactionReason" : "The reason for this redaction has been updated."
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Markup Set Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "No Markup Set found matching given name: InvalidMarkupSet",
                      "userMessage" : "No Markup Set found matching given name: InvalidMarkupSet",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Creates a markup set",
        "description" : "Use this operation to create a redaction markup set. Markup sets are applied to PDF's and used to revise sensitive content.",
        "operationId" : "createMarkupSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "markupSetName",
          "in" : "path",
          "description" : "The name of the markup set",
          "required" : true,
          "example" : "MyMarkupSet",
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkupSetRequest"
              },
              "example" : {
                "description" : "This is a markup set.",
                "redactionReason" : "The reason for the redaction."
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkupSet"
                },
                "example" : {
                  "name" : "MyMarkupSet",
                  "description" : "This is a markup set.",
                  "redactionReason" : "The reason for the redaction."
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Analysis" ],
        "summary" : "Deletes a markup set",
        "description" : "Use this operation to create a case and a redaction markup. Markup sets are applied to PDF's and used to revise sensitive content.",
        "operationId" : "deleteMarkupSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "markupSetName",
          "in" : "path",
          "description" : "The name of the markup set",
          "required" : true,
          "example" : "MyMarkupSet",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MarkupSetDeleteResponse"
                },
                "example" : {
                  "success" : true,
                  "name" : "MyMarkupSet"
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Markup Set Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "No Markup Set found matching given name: InvalidMarkupSet",
                      "userMessage" : "No Markup Set found matching given name: InvalidMarkupSet",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/auditReportFile" : {
      "get" : {
        "tags" : [ "Licensing" ],
        "summary" : "Returns an audit report file",
        "description" : "Returns an audit report file as an attachment for an audited case.  The audit report file is the file that is uploaded to the Nuix portal for audited cases.",
        "operationId" : "getAuditFile",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpEntityString"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/auditVerificationFile" : {
      "post" : {
        "tags" : [ "Licensing" ],
        "summary" : "Uploads an audit verification file",
        "description" : "Use this operation to upload an audit verification file to a case.  The audit verification file is the file that is downloaded from the Nuix portal after uploading an audit report.",
        "operationId" : "uploadAuditFile",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "uploadFile",
          "in" : "query",
          "description" : "uploadFile",
          "required" : true,
          "schema" : {
            "type" : "object",
            "properties" : {
              "uploadFile" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/auditFiles" : {
      "delete" : {
        "tags" : [ "Licensing" ],
        "summary" : "Deletes all audit reports and audit verification files for a specified case",
        "description" : "Use this operation to delete all audit reports and audit verification files for the specified case.  You may want to do this if an incorrect audit verification file has been uploaded for a case.  This will allow  the Nuix Engine to generate a new audit file.",
        "operationId" : "deleteAllAuditFiles",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/auditStatus" : {
      "get" : {
        "tags" : [ "Licensing" ],
        "summary" : "Returns the audit status for a case",
        "description" : "Use this operation to check the audit status for a case.",
        "operationId" : "checkAuditStatus",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditStatus"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/thumbnails" : {
      "post" : {
        "tags" : [ "Export" ],
        "summary" : "Generates thumbnails for a case.",
        "description" : "Use this operation to generate thumbnails for a case.",
        "operationId" : "generateThumbnails",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "case identifier token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ThumbnailUtilityRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Export" ],
        "summary" : "Deletes the case's thumbnails folder, containing all generated media.",
        "description" : "Use this operation to delete the case's thumbnails folder containing all generated media.",
        "operationId" : "deleteCaseThumbnailFolder",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/caseFunctions" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "summary" : "Case functions",
        "description" : "Lists functions that are available to be run against this case.",
        "operationId" : "getCaseFunctions",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "enum" : [ "MIGRATE" ]
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Inventory" ],
        "summary" : "Perform a function against a case",
        "description" : "Use this operation to perform some function against a case.",
        "operationId" : "performCaseFunction",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CaseModification"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/wordCounts" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Indicates word usage and frequency in a case",
        "description" : "Use this operation to view a list of words and their frequency in the text. The word count is derived from the case text and properties.",
        "operationId" : "wordCounts",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WordCountsRequest"
              },
              "example" : {
                "queryList" : [ "springfield" ],
                "deduplication" : "md5",
                "field" : "properties",
                "sort" : true,
                "maxResults" : 100
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/WordCountsResponse"
                    }
                  }
                },
                "examples" : {
                  "Word Count Properties" : {
                    "value" : {
                      "springfield" : [ {
                        "word" : "file",
                        "count" : 7
                      }, {
                        "word" : "r",
                        "count" : 2
                      }, {
                        "word" : "owner",
                        "count" : 1
                      }, {
                        "word" : "set",
                        "count" : 1
                      }, {
                        "word" : "rw",
                        "count" : 1
                      }, {
                        "word" : "created",
                        "count" : 1
                      }, {
                        "word" : "staff",
                        "count" : 1
                      }, {
                        "word" : "accessed",
                        "count" : 1
                      }, {
                        "word" : "txt",
                        "count" : 1
                      }, {
                        "word" : "character",
                        "count" : 1
                      }, {
                        "word" : "permissions",
                        "count" : 1
                      }, {
                        "word" : "name",
                        "count" : 1
                      }, {
                        "word" : "modified",
                        "count" : 1
                      }, {
                        "word" : "springfield",
                        "count" : 1
                      }, {
                        "word" : "ascii",
                        "count" : 1
                      }, {
                        "word" : "posix",
                        "count" : 1
                      }, {
                        "word" : "us",
                        "count" : 1
                      }, {
                        "word" : "changed",
                        "count" : 1
                      }, {
                        "word" : "group",
                        "count" : 1
                      } ]
                    }
                  },
                  "Word Count Content" : {
                    "value" : {
                      "springfield" : [ {
                        "word" : "simpson",
                        "count" : 1
                      }, {
                        "word" : "doh",
                        "count" : 1
                      } ]
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/auditSizes" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns total audit sizes for items matching a query",
        "description" : "Provides total audit size for items matching each query in a list of queries.\n**NOTE:** This method will only work for cases loaded with \"Calculate audited size\" option set\n",
        "operationId" : "auditSizes",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeduplicationQueryListRequest"
              },
              "example" : {
                "queryList" : [ "*" ],
                "deduplication" : "none"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ItemSizeResponse"
                  }
                },
                "examples" : {
                  "Calculate Audit Sizes Enabled" : {
                    "value" : [ {
                      "query" : "*",
                      "size" : 1198749
                    } ]
                  },
                  "Calculate Audit Sizes Not Enabled" : {
                    "value" : [ {
                      "query" : "*",
                      "size" : 0
                    } ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/fileSizes" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns total file sizes for items matching a query",
        "description" : "Provides total file size for items matching each query in a list of queries.",
        "operationId" : "fileSizes",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeduplicationQueryListRequest"
              },
              "example" : {
                "queryList" : [ "*" ],
                "deduplication" : "none"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ItemSizeResponse"
                  }
                },
                "example" : [ {
                  "query" : "*",
                  "size" : 1233932
                } ]
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemSizes" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Compute total sizes for items matching a query",
        "description" : "Asynchronously provides total audit or file size for items matching each query in a list of queries.",
        "operationId" : "itemSizes",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemSizesRequest"
              },
              "example" : {
                "queryList" : [ "*" ],
                "deduplication" : "none",
                "sizeType" : "FILE_SIZE"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                },
                "example" : {
                  "functionKey" : "c2b5a20b-3cd1-4eb3-b600-6fa909ba0949",
                  "location" : "http://localhost:8080/svc/v1/asyncFunctions/c2b5a20b-3cd1-4eb3-b600-6fa909ba0949"
                }
              }
            }
          },
          "400" : {
            "description" : "missing argument exception",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "REQUIRED_ARGUMENT_MISSING",
                  "developerMessage" : "The request is missing 1 or more required arguments. See  the 'missingArguments' field in 'additionalInfo' for the list of arguments that are missing.",
                  "userMessage" : null,
                  "additionalinfo" : {
                    "missingArguments" : [ "sizeType" ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/wordcount" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Indicates word usage and frequency in a case",
        "description" : "Use this operation to view a list of words and their frequency\nin the text. The word count is derived from the case text and properties.\n\n**NOTE:** This endpoint is deprecated.  Please use /cases/{caseId}/wordCounts going forward.\n",
        "operationId" : "wordcount",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WordcountRequest"
              },
              "example" : {
                "queryList" : [ "springfield" ],
                "deduplication" : "md5",
                "field" : "properties",
                "sort" : true,
                "maxResults" : 100
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "integer",
                    "format" : "int64"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/cases/{caseId}/asyncFunctions/wordCounts" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Asynchronously indicates word usage and frequency in a case",
        "description" : "Use this operation to (asynchronously) view a list of words and their frequency in the text. The word count is derived from the case text and properties.",
        "operationId" : "wordCountsAsync",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WordCountsRequest"
              },
              "example" : {
                "queryList" : [ "springfield" ],
                "deduplication" : "md5",
                "field" : "properties",
                "sort" : true,
                "maxResults" : 100
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                },
                "example" : {
                  "functionKey" : "50960b90-1723-4af7-bed6-207fd37b7a5e",
                  "location" : "http://localhost:8080/svc/v1/asyncFunctions/50960b90-1723-4af7-bed6-207fd37b7a5e"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/familyStatistics" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns statistics for families of top-level items matching a query",
        "description" : "Provides statistics for families of top-level items matching a query.  The returned results from each query must be all top-level items or an exception will be thrown.\nThis method will only work for cases loaded with both \"Calculate audited size\" and \"Process family fields\" options set\n",
        "operationId" : "familyStatistics",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeduplicationQueryListRequest"
              },
              "example" : {
                "queryList" : [ "kind:document" ],
                "deduplication" : "none"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FamilyStatisticsResponse"
                  }
                },
                "example" : [ {
                  "query" : "kind:document",
                  "auditSize" : 822840,
                  "itemCount" : 1,
                  "auditItemCount" : 1
                } ]
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/asyncFunctions/familyStatistics" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Asynchronously returns statistics for families of top-level items matching a query",
        "description" : "Provides statistics (asynchronously) for families of top-level items matching a query. The returned results from each query must be all top-level items or an exception will be thrown.\nThis method will only work for cases loaded with both \"Calculate audited size\" and \"Process family fields\" options set",
        "operationId" : "familyStatisticsAsync",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeduplicationQueryListRequest"
              },
              "example" : {
                "queryList" : [ "kind:document" ],
                "deduplication" : "none"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                },
                "example" : {
                  "functionKey" : "2e458caf-181b-4885-a6ac-c64f6fb24a1e",
                  "location" : "http://localhost:8080/svc/v1/asyncFunctions/2e458caf-181b-4885-a6ac-c64f6fb24a1e"
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/count" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the total number of items in a case",
        "description" : "Use this operation to view the total number of items in a case. This is useful for informational purposes, such as seeing whether a case contains items.  Using this endpoint you can also count the number of items in a query. For example, if the query is kind:document, this endpoint will return the number of documents in the case.",
        "operationId" : "count",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns everything.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "deduplication",
          "in" : "query",
          "description" : "How the deduplication is applied. 'none' returns all items matching the query including duplicates. 'md5' returns deduplicated items based on the deduplication method used.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "none",
            "enum" : [ "none", "md5" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CountResponse"
                },
                "example" : {
                  "count" : 25106,
                  "query" : "",
                  "casePath" : "/cases/mycase",
                  "caseGuid" : "219f69f5eee14cf6b8c8c15d7cc2dd1e"
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the number of items associated with a case query",
        "description" : "Use this operation to see the number of items that match a query in a case. For example, if you want to see the number of images in a case, you can perform a count query with a kind:image query.",
        "operationId" : "countPost",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deduplication",
          "in" : "query",
          "description" : "How the deduplication is applied. 'none' returns all items matching the query including duplicates. 'md5' returns deduplicated items based on the deduplication method used.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "none",
            "enum" : [ "none", "md5" ]
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CountRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CountResponse"
                },
                "example" : {
                  "count" : 25106,
                  "query" : "",
                  "casePath" : "/cases/mycase",
                  "caseGuid" : "219f69f5eee14cf6b8c8c15d7cc2dd1e"
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/customMetadata" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns custom metadata for an item",
        "description" : "Use this operation to retrieve custom metadata from an item in a case.",
        "operationId" : "getCustomMetadata",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldNameFilter",
          "in" : "query",
          "description" : "Field name filter.  Filters metadata fields that are returned.  Fields that do not match the regular expression are removed by the filter.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "typeFilter",
          "in" : "query",
          "description" : "Type filter.  Filters metadata fields that are returned.  Fields that do not match the type are removed by the filter.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "modeFilter",
          "in" : "query",
          "description" : "Mode filter.  Filters metadata fields that are returned.  Fields that do not match the mode are removed by the filter.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CustomMetadataResponse"
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Culling" ],
        "summary" : "Applies custom metadata to an item",
        "description" : "Use this operation to apply custom metadata to an item.<br/><br/>Most custom metadata is put with a mode of \"user\", indicating that it is user-level. Mode \"api\" should only be used where you are setting system-level specific metadata, which is not visible in the GUI by default. If using \"api\" mode we strongly recommend you include a unique prefix to your fieldname to avoid possible collisions with user-level custom metadata, e.g. \"com.your-company.rule-set.fieldName\".<br/><br/>This subclass additionally supports binary custom metadata fields. To store binary custom metadata: <br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>type must be \"binary\".</b><br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>mode must be \"api\" (only API mode is currently supported).</b><br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>params must contain a key \"mimeType\" with value being the MIME type of the binary data being stored.</b>",
        "operationId" : "addCustomMetadata",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applyToFamily",
          "in" : "query",
          "description" : "Apply metadata to family items",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "applyToDuplicates",
          "in" : "query",
          "description" : "Apply metadata to duplicates",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomMetadataRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      },
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Removes custom metadata on an item",
        "description" : "Use this operation to remove custom metadata from an item.",
        "operationId" : "deleteCustomMetadata",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applyToFamily",
          "in" : "query",
          "description" : "Remove metadata from family items",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "applyToDuplicates",
          "in" : "query",
          "description" : "Remove metadata from duplicates",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fieldName",
          "in" : "query",
          "description" : "Field name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/itemCustomMetadata" : {
      "post" : {
        "tags" : [ "Culling" ],
        "summary" : "Applies custom metadata to items in bulk",
        "description" : "Use this operation to apply custom metadata to items in.<br/><br/>Most custom metadata is put with a mode of \"user\", indicating that it is user-level. Mode \"api\" should only be used where you are setting system-level specific metadata, which is not visible in the GUI by default. If using \"api\" mode we strongly recommend you include a unique prefix to your fieldname to avoid possible collisions with user-level custom metadata, e.g. \"com.your-company.rule-set.fieldName\".<br/><br/>This subclass additionally supports binary custom metadata fields. To store binary custom metadata: <br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>type must be \"binary\".</b><br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>mode must be \"api\" (only API mode is currently supported).</b><br/>&nbsp;&nbsp;&nbsp;&nbsp;<b>params must contain a key \"mimeType\" with value being the MIME type of the binary data being stored.</b>",
        "operationId" : "bulkAddCustomMetadata",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkItemCustomMetadataRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplyCustomMetadataResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Removes custom metadata on items in bulk",
        "description" : "Use this operation to remove custom metadata from items in bulk.",
        "operationId" : "bulkDeleteCustomMetadata",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkItemCustomMetadataDeleteRequest"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/export" : {
      "put" : {
        "tags" : [ "Export" ],
        "summary" : "Exports production sets and items from a case",
        "description" : "Use this operation to export production sets and items from a case. You can perform two types of exports: legal or item. Legal exports create a load file during export.",
        "operationId" : "export",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ExportRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/slipsheets" : {
      "put" : {
        "tags" : [ "Export" ],
        "summary" : "Generates Slipsheets for items in a case",
        "description" : "Use this operation to generate slipsheets for items in a case.",
        "operationId" : "generateSlipsheets",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SlipsheetsRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new repository and/or supported containers into a simple case",
        "description" : "Use this operation to ingest different types of data during a single processing session. This operation is useful to ingest multiple containers using one call rather than having to call multiple operations for each individual container.",
        "operationId" : "bulkIngestionIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkIngestionRequest"
              },
              "examples" : {
                "File and S3 Bucket Ingestion" : {
                  "value" : {
                    "processingProfile" : "Default",
                    "containers" : [ {
                      "files" : [ {
                        "path" : "/mnt/raw-data/singleFile.txt"
                      }, {
                        "path" : "/mnt/raw-data/directory"
                      } ],
                      "s3Buckets" : [ {
                        "access" : "AWSACCESSKEY",
                        "bucket" : "my.aws.bucket/bucketFolder",
                        "endpoint" : "",
                        "secret" : "AWSSECRETACCESSKEY"
                      } ]
                    } ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/repository" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a directory and creates a repository in a simple case",
        "description" : "Use this operation to ingest a single directory into a simple case as an evidence repository. Adding evidence as a repository allows the evidence to be re-scanned at a future point and any new files added to the repository to be indexed in addition to the originally indexed evidence.",
        "operationId" : "ingestRepoIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleRepositoryIngestionRequest"
              },
              "examples" : {
                "Simple Evidence Repository Ingestion" : {
                  "value" : {
                    "repository" : {
                      "path" : "/mnt/repositories"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/file" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new file/directory target into a container in a simple case",
        "description" : "Use this operation to ingest a single file or directory during a processing session.",
        "operationId" : "ingestFileIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleFile"
              },
              "examples" : {
                "Simple File Ingestion" : {
                  "value" : {
                    "target" : {
                      "path" : "/mnt/raw-data/singleFile.txt"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/loadFile" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new load file target into a container within a simple case",
        "description" : "Use this operation to ingest a single type of data from a single source during a processing session.  This endpoint currently supports loadfiles in CSV format.",
        "operationId" : "ingestLoadFileIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleLoadFile"
              },
              "examples" : {
                "Simple Loadfile Ingestion" : {
                  "value" : {
                    "target" : {
                      "path" : "/mnt/loadfile.csv"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/mail" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new mail target into a container in a simple case",
        "description" : "Use this operation to ingest an individual mail store into a simple case. This is useful when you want to ingest non-Microsoft Exchange targets.",
        "operationId" : "ingestMailstoreIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleMailStore"
              },
              "examples" : {
                "GMail IMAP Ingestion" : {
                  "value" : {
                    "target" : {
                      "protocol" : "imap",
                      "host" : "imap.gmail.com",
                      "port" : 993,
                      "username" : "myuser",
                      "password" : "mypassword"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/exchange" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new Exchange target into a container in a simple case",
        "description" : "Use this operation to ingest an Exchange account or a Microsoft Exchange email mailbox into a simple case.",
        "operationId" : "ingestExchangeIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleExchangeMailbox"
              },
              "examples" : {
                "Simple Exchange Ingestion" : {
                  "value" : {
                    "target" : {
                      "mailboxRetrieval" : [ "mailbox" ],
                      "uri" : "https://outlook.office365.com/ews/exchange.asmx",
                      "username" : "yourusername",
                      "password" : "yourpassword",
                      "impersonating" : false
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/sharepoint" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new SharePoint target into a container within a simple case",
        "description" : "Use this operation to ingest a single type of data from one source during a processing session.",
        "operationId" : "ingestSharepointIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleSharepoint"
              },
              "examples" : {
                "Simple Sharepoint Ingestion" : {
                  "value" : {
                    "target" : {
                      "domain" : "mydomain.sharepoint.com",
                      "username" : "myuser",
                      "password" : "mypassword",
                      "uri" : "domain.sharepoint.com/sites/mypage"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/sql" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new SQL target into a container in a simple case",
        "description" : "Use this operation to ingest a single type of data from one source during a processing session.",
        "operationId" : "ingestSqlIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleSQLServer"
              },
              "examples" : {
                "Simple SQL Server Ingestion" : {
                  "value" : {
                    "target" : {
                      "username" : "myuser",
                      "password" : "mypassword",
                      "computer" : "myServerAddress",
                      "instance" : "myDatabase"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/ev" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new enterprise vault target into a container in a simple case",
        "description" : "Use this operation to ingest a single type of data from a Enterprise Vault archiving system. Enterprise Vault is an on-premise data archiving platform produced by Symantec Corporation.",
        "operationId" : "ingestEnterpriseVaultIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleEnterpriseVault"
              },
              "examples" : {
                "Simple Enterprise Vault Ingestion" : {
                  "value" : {
                    "target" : {
                      "computer" : "MyEnterpriseVaultServer",
                      "vault" : "MyVaultId"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/s3" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new S3 target into a container in a simple case",
        "description" : "Use this operation to ingest a single type of data from one source during a processing session.",
        "operationId" : "ingestS3IntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleS3Bucket"
              },
              "examples" : {
                "Sample S3 Bucket Ingestion" : {
                  "value" : {
                    "target" : {
                      "access" : "AWSACCESSKEY",
                      "bucket" : "my.aws.bucket/bucketFolder",
                      "endpoint" : "",
                      "secret" : "AWSSECRETACCESSKEY"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/centera" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new Centera target into a container in a simple case",
        "description" : "Use this operation to ingest a single type of data from a Centera archiving system. Centera is a content-addressable storage platform for data archiving produced by EMC Corporation.",
        "operationId" : "ingestCenteraIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleCenteraCluster"
              },
              "examples" : {
                "Simple Centera Cluster Ingestion" : {
                  "value" : {
                    "target" : {
                      "ipsFile" : "/mnt/centera/ipsFile",
                      "clipsFile" : "/mnt/centera/clipsFile"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/splitFiles" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new split file list target into a container in a simple case",
        "description" : "Use this operation to ingest a single type of data from one source during a processing session. This can be used to load files which have been split using ordinary splitting tools, which is common for raw (\"dd\") disk images.",
        "operationId" : "ingestSplitFilesIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleSplitFileList"
              },
              "examples" : {
                "Simple Split Files Ingestion" : {
                  "value" : {
                    "target" : {
                      "files" : [ "/mnt/splitFile1", "/mnt/splitFile2" ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/dropbox" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new Dropbox target into a container in a simple case",
        "description" : "Use this operation to ingest a single type of data from one source during a processing session.",
        "operationId" : "ingestDropboxIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleDropbox"
              },
              "examples" : {
                "Simple Dropbox Ingestion" : {
                  "value" : {
                    "target" : {
                      "authCode" : "DROPBOXAUTHCODE",
                      "team" : true,
                      "accessToken" : "DROPBOXACCESSTOKEN"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/evidence/ssh" : {
      "post" : {
        "tags" : [ "Processing" ],
        "summary" : "Ingests a new SSH-based target into a container in a simple case",
        "description" : "Use this operation to ingest a single type of data from one source during a processing session.",
        "operationId" : "ingestSSHIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SingleContainerIngestionRequestIngestibleSSH"
              },
              "examples" : {
                "SSH Ingestion Username/Password" : {
                  "value" : {
                    "target" : {
                      "computer" : "MyServerName",
                      "username" : "myUserName",
                      "password" : "myPassword",
                      "port" : 22,
                      "remoteFolder" : "/mnt/data"
                    }
                  }
                },
                "SSH Ingestion Authentication Key" : {
                  "value" : {
                    "target" : {
                      "computer" : "MyServerName",
                      "username" : "myUserName",
                      "keyFolder" : "/home/user/.ssh/id_rsa",
                      "port" : 22,
                      "remoteFolder" : "/mnt/data"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items" : {
      "put" : {
        "tags" : [ "Processing" ],
        "summary" : "Reloads items from source based on a query in a simple case",
        "description" : "Use this operation to reload items from source.",
        "operationId" : "reloadItemsFromSourceIntoSimpleCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReloadItemsIngestionRequest"
              },
              "examples" : {
                "Reload All Items" : {
                  "value" : {
                    "query" : "*"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/locations" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "summary" : "Returns the set of inventory locations",
        "description" : "Use this operation to view the list of normalized inventory locations. Any case placed in any location in this list will be added to the case inventory during the next scheduled inventory scan.",
        "operationId" : "getInventoryLocations",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory" : {
      "put" : {
        "tags" : [ "Inventory" ],
        "summary" : "Rescans your inventory",
        "description" : "Use this operation to rescan your inventory. The inventory is scanned on startup by default and at a predefined regular interval.",
        "operationId" : "scanInventory",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{caseId}" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "summary" : "Returns the digest information for a case",
        "description" : "Use this operation to view the case digest for a given case, which is obtained without opening the case.",
        "operationId" : "getCaseDigest",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CaseDigest"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/digest" : {
      "get" : {
        "tags" : [ "Inventory" ],
        "summary" : "Returns the set of case digests for all inventory locations",
        "description" : "Use this operation to view the set of case digests for all inventory locations.",
        "operationId" : "getInventoryDigest",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CaseDigest"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/itemText" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns item text",
        "description" : "Use this operation to retrieve item text from an item in a case. A Boolean field **(htmlEscape)** is available to escape characters for HTML. By default, text is not escaped.",
        "operationId" : "getItemText",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "htmlEscape",
          "in" : "query",
          "description" : "Replaces newline and tab characters with their HTML variants",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemTextResponse"
                },
                "examples" : {
                  "Item Text (No HTML Escape)" : {
                    "value" : {
                      "text" : "\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\n",
                      "binaryAvailable" : true,
                      "htmlEscape" : false,
                      "totalTextLength" : 62,
                      "blank" : false
                    }
                  },
                  "Item Text (HTML Escape)" : {
                    "value" : {
                      "text" : "<br/></br>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</br>",
                      "binaryAvailable" : true,
                      "htmlEscape" : true,
                      "totalTextLength" : 71,
                      "blank" : false
                    }
                  },
                  "No Item Text" : {
                    "value" : {
                      "text" : null,
                      "binaryAvailable" : true,
                      "htmlEscape" : false,
                      "totalTextLength" : -1,
                      "blank" : true
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Item Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Problem fetching Item GUID invalid-guid in case 219f69f5eee14cf6b8c8c15d7cc2dd1e; may not exist",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/tags" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns the list of tags for an item",
        "description" : "Use this operation to get the list of tags that have been assigned to the given item",
        "operationId" : "getItemTags",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TagList"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/searchHits" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns search hits for an item",
        "description" : "Use this operation to retrieve the search hits for an item given a query.  Search hits are returned for item properties and text content only.",
        "operationId" : "getSearchHits",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "List of properties associated with this item",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchHitRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchHitResponse"
                },
                "example" : {
                  "terms" : [ "searchTerm" ],
                  "text" : {
                    "term" : "searchTerm",
                    "count" : 2
                  },
                  "properties" : {
                    "Name" : [ {
                      "term" : "searchTerm",
                      "count" : 1
                    } ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Item Not Found" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Problem fetching Item GUID invalid-guid in case 219f69f5eee14cf6b8c8c15d7cc2dd1e; may not exist",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/tags/{tagName}" : {
      "put" : {
        "tags" : [ "Culling" ],
        "summary" : "Tags an item in a case",
        "description" : "Use this operation to tag an item in a case. Tags are a type of user-defined data that you can use to classify an item or group of items. If the tag doesn't already exist, this operation creates it.",
        "operationId" : "tagItem",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tagName",
          "in" : "path",
          "description" : "Tag name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applyToFamily",
          "in" : "query",
          "description" : "Tag family items",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "applyToDuplicates",
          "in" : "query",
          "description" : "Tag duplicates",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Removes a tag from an item",
        "description" : "Use this operation to remove a tag from an item in a case.",
        "operationId" : "removeTagFromItem",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "tagName",
          "in" : "path",
          "description" : "Tag name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "applyToFamily",
          "in" : "query",
          "description" : "Removes tags from family items. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "applyToDuplicates",
          "in" : "query",
          "description" : "Removes tags from the item's duplicates. Defaults to false.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns information for a specific item in a case",
        "description" : "Use this operation to view fields, properties, and the metadata profile for a specific item in a case. You can retrieve fields or properties in addition to what is defined in the item''s metadata profile.\nFor example, if you query an item by its globally unique identifier (GUID) and use the default metadata profile, you will see the following information:\n\n  * file type\n  * name\n  * path name\n  * GUID\n",
        "operationId" : "getItemByFields",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field",
          "description" : "Fields:\n  * `all` - Returns all fields for the item.\n  * `auditedSize` - Returns the item''s audited size.\n  * `children` - Returns a list of the item''s children.\n  * `clusterPivotResemblances` - Returns a map where the keys are cluster IDs and the values are resemblances.\n  * `clusterPivots` - Returns a map where the keys are cluster IDs and the values are boolean flags.\n  * `comment` - Returns item comments.\n  * `communication` - If the item is a communication, this returns item communication information.\n  * `correctedExtension` - Returns the extension based on Nuix''s identification of the item''s MIME type.\n  * `custodian` - Returns the custodian assigned to an item.\n  * `customMetadata` - Returns custom metadata for the item as a map. Must provide metadataProfile to get this.\n  * `date` - Returns the item date.\n  * `descendants` - Gets the list of items which are descendants of this item.\n  * `digests` - Returns a map of the computed digests for an item.\n  * `duplicateCustodianSet` - Returns the set of custodian names associated with this item and its duplicates.\n  * `duplicates` - Returns duplicates of this item.\n  * `evidenceMetadata` - Returns custom evidence metadata for the item.\n  * `exclusion` - Returns the reason for an item''s exclusion.\n  * `family` - Returns a list of items in the same family.\n  * `fileSize` - Returns the item''s file size if it is readable, or returns null if this is not file data.\n  * `fileType` - Returns the name of the file type.\n  * `guid` - Returns the item''s globally unique identifier (GUID).\n  * `history` - Returns the item''s history in ascending order by date.\n  * `id` - Returns the item''s ID.\n  * `isAudited` - Tests whether the item is considered audited and returns true or false.\n  * `isBinaryAvailable` - Tests whether the item''s binary is available before attempting to export it.  This returns\n            true if the item had binary data at processing time that was not stored. This\n            differs from isStored() as this method returns true if the item had binary\n            data at processing time that was not stored.\n  * `isBinaryStored` - Tests whether the item has binary stored against it in the database. True is returned\n            if stored binary exists. In this case, the source data isn''t required for\n            binary export.\n  * `isChatMessage` - Tests whether the item is a chat message.\n  * `isChatConversation` - Tests whether the item is a chat conversation.\n  * `isDeleted` - Tests whether the item was marked as deleted and returns true or false.\n  * `isEmailThreadMember` - Tests whether the item is part of an email thread.\n  * `isEncrypted` - Tests whether the item was marked as encrypted and returns true or false.\n  * `isExcluded` - Tests whether the item was marked as excluded.\n  * `isFamilyMember` - Tests whether the item is a member of a family (i.e. it has a top-level item).\n  * `isIncuded` - Tests whether the item is included and returns true or false.\n  * `isLooseFile` - Tests whether the item is a loose file and returns true or false.\n  * `isPhysicalFile` - Tests whether the item is a physical file and returns true or false.\n  * `isPrintedImageStored` - Tests whether the printed image is stored and returns true or false. This field\n            is useful when you only need to know if a printed image exists for this item.\n            This is faster and uses fewer resources than requesting the printedImageInfo\n            field.\n  * `isTextAvailable` - Tests whether the item''s text is available before attempting to read or export it.\n  * `isTextStored` - Tests hether the item has text stored against it in the database.  In the event\n            where you only want to know if the item had text but didn''t need the text\n            this field is considerably faster and more conservative of resources than\n            isTextAvailable.\n  * `isThumbnailStored` - Tests whether a thumbnail is stored for this item in the database and returns true or false.\n  * `isTopLevel` - Tests whether this is a top-level item and returns true or false.\n  * `itemCategory` - Returns the item category.\n  * `kind` - Returns the item kind.\n  * `language` - Returns the language identified by the item.\n  * `localisedName` - Returns the item name or the localised placeholder (for example, [Unnamed Image])\n            if the name is blank.\n  * `localisedPathNames` - Returns a list of item names on the path from the root evidence container to the item.\n  * `name` - Returns the item name.\n  * `originalExtension` - Returns the original extension listed on the source file.\n  * `parent` - Returns the parent of this item.\n  * `path` - Returns an item list which represents the path from the root evidence container to the item.\n  * `pathIDs` - Returns a list of the IDs of items on the path from the root evidence container up to the item itself.\n  * `pathNames` - Returns a list of item names on the path from the root evidence container to the item.\n  * `position` - Returns the item position number which identifies where this item exists in the tree of all ingested items.\n  * `printedImageInfo` - Returns information about the printed image.\n  * `properties` - Returns item properties.\n  * `root` - Returns the root item. If this item is the root, the item itself is returned.\n  * `rootUri` - Returns the item''s root URI as a string.\n  * `tags` - Returns the item tags.\n  * `text` - Returns the text of the item as a string.\n  * `textHtml` - Returns the text of the item escaped for HTML.\n  * `textSummary` - Returns the stored text summary of the item if one exists, otherwise null.\n  * `textSummaryHtml` - Returns the stored text summary of the item escaped for HTML if one exists, otherwise null.\n  * `threadItems` - Returns items that are in the same discussion thread as this item.\n  * `topLevelItem` - Returns the associated top-level item.\n  * `topLevelItemDate` - Returns the associated top-level item date.\n  * `type` - Returns the type name.\n  * `typeLocalisedName` - Returns the type name, localised appropriately for display to users.\n  * `uri` - Returns the item''s uniform resource identifier (URI) as a string.\n",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "all", "auditedSize", "children", "clusterPivotResemblances", "clusterPivots", "comment", "communication", "correctedExtension", "custodian", "customMetadata", "date", "descendants", "digests", "duplicateCustodianSet", "duplicates", "evidenceMetadata", "exclusion", "family", "fileSize", "fileType", "guid", "history", "id", "isAudited", "isBinaryAvailable", "isBinaryStored", "isChatMessage", "isChatConversation", "isDeleted", "isEmailThreadMember", "isEncrypted", "isExcluded", "isFamilyMember", "isIncuded", "isLooseFile", "isPhysicalFile", "isPrintedImageStored", "isTextAvailable", "isTextStored", "isThumbnailStored", "isTopLevel", "itemCategory", "kind", "language", "localisedName", "localisedPathNames", "name", "originalExtension", "parent", "path", "pathIDs", "pathNames", "position", "printedImageInfo", "properties", "root", "rootUri", "tags", "text", "textHtml", "textSummary", "textSummaryHtml", "threadItems", "topLevelItem", "topLevelItemDate", "type", "typeLocalisedName", "uri" ]
            }
          }
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "List of properties associated with this item",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "metadataProfile",
          "in" : "query",
          "description" : "Metadata profile name. Needed to get custom metadata.",
          "required" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "Default"
        }, {
          "name" : "customMetadataField",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "parameterizedField",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "entities",
          "in" : "query",
          "description" : "List of entity names to include in response (e.g. company,email",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  }
                },
                "examples" : {
                  "Default Metadata Profile" : {
                    "value" : {
                      "File Type" : "Microsoft 2007 Word Document",
                      "Name" : "MyWordDoc.docx",
                      "Path Name" : "/Evidence 1/Documents",
                      "guid" : "5cc38060-640c-4fbb-91d0-b319812a5f0b",
                      "localizedMetadataKeys" : [ "Name", "File Type", "Path Name" ],
                      "metadataItemDetails" : [ {
                        "name" : "Name",
                        "localisedName" : "Name",
                        "type" : "String"
                      }, {
                        "name" : "File Type",
                        "localisedName" : "File Type",
                        "type" : "String"
                      }, {
                        "name" : "Path Name",
                        "localisedName" : "Path Name",
                        "type" : "String"
                      } ],
                      "metadataKeys" : [ "Name", "File Type", "Path Name" ]
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Item GUID" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Item GUID does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/topLevelItems" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the top-level items for a case",
        "description" : "Use this operation to view all items specified as top-level in a case. The item fields to be returned are identified by the optional itemFields parameter. If no itemFields parameter is supplied, then all item fields are returned for this operation. Top-level items provide context for information. For example, for an email attachment, the top-level item is an email.\nThe response List[Map] returns the same map as the cases/{caseId}/items/{itemGuid} endpoint.\n",
        "operationId" : "getTopLevelItemsByCaseId",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "field",
          "description" : "Fields:\n  * `all` - Returns all fields for the item.\n  * `auditedSize` - Returns the item''s audited size.\n  * `children` - Returns a list of the item''s children.\n  * `clusterPivotResemblances` - Returns a map where the keys are cluster IDs and the values are resemblances.\n  * `clusterPivots` - Returns a map where the keys are cluster IDs and the values are boolean flags.\n  * `comment` - Returns item comments.\n  * `communication` - If the item is a communication, this returns item communication information.\n  * `correctedExtension` - Returns the extension based on Nuix''s identification of the item''s MIME type.\n  * `custodian` - Returns the custodian assigned to an item.\n  * `customMetadata` - Returns custom metadata for the item as a map. Must provide metadataProfile to get this.\n  * `date` - Returns the item date.\n  * `descendants` - Gets the list of items which are descendants of this item.\n  * `digests` - Returns a map of the computed digests for an item.\n  * `duplicateCustodianSet` - Returns the set of custodian names associated with this item and its duplicates.\n  * `duplicates` - Returns duplicates of this item.\n  * `evidenceMetadata` - Returns custom evidence metadata for the item.\n  * `exclusion` - Returns the reason for an item''s exclusion.\n  * `family` - Returns a list of items in the same family.\n  * `fileSize` - Returns the item''s file size if it is readable, or returns null if this is not file data.\n  * `fileType` - Returns the name of the file type.\n  * `guid` - Returns the item''s globally unique identifier (GUID).\n  * `history` - Returns the item''s history in ascending order by date.\n  * `id` - Returns the item''s ID.\n  * `isAudited` - Tests whether the item is considered audited and returns true or false.\n  * `isBinaryAvailable` - Tests whether the item''s binary is available before attempting to export it.  This returns\n            true if the item had binary data at processing time that was not stored. This\n            differs from isStored() as this method returns true if the item had binary\n            data at processing time that was not stored.\n  * `isBinaryStored` - Tests whether the item has binary stored against it in the database. True is returned\n            if stored binary exists. In this case, the source data isn''t required for\n            binary export.\n  * `isChatMessage` - Tests whether the item is a chat message.\n  * `isChatConversation` - Tests whether the item is a chat conversation.\n  * `isDeleted` - Tests whether the item was marked as deleted and returns true or false.\n  * `isEmailThreadMember` - Tests whether the item is part of an email thread.\n  * `isEncrypted` - Tests whether the item was marked as encrypted and returns true or false.\n  * `isExcluded` - Tests whether the item was marked as excluded.\n  * `isFamilyMember` - Tests whether the item is a member of a family (i.e. it has a top-level item).\n  * `isIncuded` - Tests whether the item is included and returns true or false.\n  * `isLooseFile` - Tests whether the item is a loose file and returns true or false.\n  * `isPhysicalFile` - Tests whether the item is a physical file and returns true or false.\n  * `isPrintedImageStored` - Tests whether the printed image is stored and returns true or false. This field\n            is useful when you only need to know if a printed image exists for this item.\n            This is faster and uses fewer resources than requesting the printedImageInfo\n            field.\n  * `isTextAvailable` - Tests whether the item''s text is available before attempting to read or export it.\n  * `isTextStored` - Tests hether the item has text stored against it in the database.  In the event\n            where you only want to know if the item had text but didn''t need the text\n            this field is considerably faster and more conservative of resources than\n            isTextAvailable.\n  * `isThumbnailStored` - Tests whether a thumbnail is stored for this item in the database and returns true or false.\n  * `isTopLevel` - Tests whether this is a top-level item and returns true or false.\n  * `itemCategory` - Returns the item category.\n  * `kind` - Returns the item kind.\n  * `language` - Returns the language identified by the item.\n  * `localisedName` - Returns the item name or the localised placeholder (for example, [Unnamed Image])\n            if the name is blank.\n  * `localisedPathNames` - Returns a list of item names on the path from the root evidence container to the item.\n  * `name` - Returns the item name.\n  * `originalExtension` - Returns the original extension listed on the source file.\n  * `parent` - Returns the parent of this item.\n  * `path` - Returns an item list which represents the path from the root evidence container to the item.\n  * `pathIDs` - Returns a list of the IDs of items on the path from the root evidence container up to the item itself.\n  * `pathNames` - Returns a list of item names on the path from the root evidence container to the item.\n  * `position` - Returns the item position number which identifies where this item exists in the tree of all ingested items.\n  * `printedImageInfo` - Returns information about the printed image.\n  * `properties` - Returns item properties.\n  * `root` - Returns the root item. If this item is the root, the item itself is returned.\n  * `rootUri` - Returns the item''s root URI as a string.\n  * `tags` - Returns the item tags.\n  * `text` - Returns the text of the item as a string.\n  * `textHtml` - Returns the text of the item escaped for HTML.\n  * `textSummary` - Returns the stored text summary of the item if one exists, otherwise null.\n  * `textSummaryHtml` - Returns the stored text summary of the item escaped for HTML if one exists, otherwise null.\n  * `threadItems` - Returns items that are in the same discussion thread as this item.\n  * `topLevelItem` - Returns the associated top-level item.\n  * `topLevelItemDate` - Returns the associated top-level item date.\n  * `type` - Returns the type name.\n  * `typeLocalisedName` - Returns the type name, localised appropriately for display to users.\n  * `uri` - Returns the item''s uniform resource identifier (URI) as a string.\n",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "all", "auditedSize", "children", "clusterPivotResemblances", "clusterPivots", "comment", "communication", "correctedExtension", "custodian", "customMetadata", "date", "descendants", "digests", "duplicateCustodianSet", "duplicates", "evidenceMetadata", "exclusion", "family", "fileSize", "fileType", "guid", "history", "id", "isAudited", "isBinaryAvailable", "isBinaryStored", "isChatMessage", "isChatConversation", "isDeleted", "isEmailThreadMember", "isEncrypted", "isExcluded", "isFamilyMember", "isIncuded", "isLooseFile", "isPhysicalFile", "isPrintedImageStored", "isTextAvailable", "isTextStored", "isThumbnailStored", "isTopLevel", "itemCategory", "kind", "language", "localisedName", "localisedPathNames", "name", "originalExtension", "parent", "path", "pathIDs", "pathNames", "position", "printedImageInfo", "properties", "root", "rootUri", "tags", "text", "textHtml", "textSummary", "textSummaryHtml", "threadItems", "topLevelItem", "topLevelItemDate", "type", "typeLocalisedName", "uri" ]
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "object"
                    }
                  }
                },
                "example" : [ {
                  "Name" : "MyWordDoc.docx",
                  "File Type" : "Microsoft 2007 Word Document",
                  "Path Name" : "/Evidence 1/Documents",
                  "guid" : "5cc38060-640c-4fbb-91d0-b319812a5f0b"
                } ]
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/download" : {
      "get" : {
        "tags" : [ "Export" ],
        "summary" : "Downloads an item from a case",
        "description" : "Use this operation to download a specific item from a case.  This API uses the original file name to determine the best format to download the item.  The item is downloaded by streaming its binary content using its original file name  and MIME type.  This content is returned in the response body.",
        "operationId" : "downloadItem",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwriteExisting",
          "in" : "query",
          "description" : "Overwrite Existing; this value is treated as always true for PDFs",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileSystemResource"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Export" ],
        "summary" : "Downloads an item from a case",
        "description" : "Use this operation to download a specific item from a case.  This API uses the original file name to determine the best format to download the item.  The item is downloaded by streaming its binary content using its original file name  and MIME type.  This content is returned in the response body.",
        "operationId" : "downloadItemHead",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwriteExisting",
          "in" : "query",
          "description" : "Overwrite Existing; this value is treated as always true for PDFs",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemBinaries/{itemGuid}" : {
      "get" : {
        "tags" : [ "Export" ],
        "summary" : "Streams an item binary from a case if it is available",
        "description" : "Use this operation to stream a specific item binary from a case if the item binary is available.This API uses the original file name to determine the best format to download the item.The item is downloaded by streaming its binary content using its original file name and MIME type.",
        "operationId" : "downloadItemBinary",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      },
      "head" : {
        "tags" : [ "Export" ],
        "summary" : "Streams an item binary from a case if it is available",
        "description" : "Use this operation to stream a specific item binary from a case if the item binary is available.This API uses the original file name to determine the best format to download the item.The item is downloaded by streaming its binary content using its original file name and MIME type.",
        "operationId" : "downloadItemBinary_1",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response"
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/view" : {
      "get" : {
        "tags" : [ "Export" ],
        "summary" : "Enables you to view a case item",
        "description" : "Use this operation to view a case item.  The REST API uses the original file name to determine the best format to view the item. This endpoint returns the binary data with the MIME type set in the Content-Type header so you are viewing the actual item.<br/><br/> For example, you can use this endpoint to view a case item in a web browser. The API will determine the best format to view this item in the browser.",
        "operationId" : "downloadItemBestFormat",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwriteExisting",
          "in" : "query",
          "description" : "Overwrite Existing",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "multipart/form-data" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileSystemResource"
                }
              }
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Export" ],
        "summary" : "Enables you to view a case item",
        "description" : "Use this operation to view a case item.  The REST API uses the original file name to determine the best format to view the item. This endpoint returns the binary data with the MIME type set in the Content-Type header so you are viewing the actual item.<br/><br/> For example, you can use this endpoint to view a case item in a web browser. The API will determine the best format to view this item in the browser.",
        "operationId" : "downloadItemBestFormatHeadRequest",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwriteExisting",
          "in" : "query",
          "description" : "Overwrite Existing",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/{itemGuid}/comment" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns comments for an item",
        "description" : "Use this operation to view comments associated with an item.  Multiple comments are delimeted by the newline (\\n) character.",
        "operationId" : "getItemComment",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemCommentResponse"
                },
                "example" : {
                  "itemGuid" : "9dd7ebaa-0671-4f73-add7-d38d920105eb",
                  "itemComment" : "this is an item comment"
                }
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Item GUID" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Item GUID does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Analysis" ],
        "summary" : "Applies a comment to an item",
        "description" : "Use this operation to apply a comment to an item. This will modify any existing comment. The boolean field **(append)** is available to let you replace or append the comment. By default, existing comments are replaced.  Appended comments are done so with the newline (\\n) character.",
        "operationId" : "modifyItemComment",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "append",
          "in" : "query",
          "description" : "Append to existing comment",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemCommentRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemCommentResponse"
                },
                "examples" : {
                  "Simple Comment" : {
                    "value" : {
                      "itemGuid" : "9dd7ebaa-0671-4f73-add7-d38d920105eb",
                      "itemComment" : "this is an item comment"
                    }
                  },
                  "Appended Comment" : {
                    "value" : {
                      "itemGuid" : "9dd7ebaa-0671-4f73-add7-d38d920105eb",
                      "itemComment" : "This is an item comment.\nThis comment is appended."
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "error response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Invalid Item GUID" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Item GUID does not exist in case 219f69f5eee14cf6b8c8c15d7cc2dd1e",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemShingles" : {
      "put" : {
        "tags" : [ "Analysis" ],
        "summary" : "Calculates the number of shingles associated with a case's items",
        "description" : "Use this operation to see how many shingles are associated with\nthe items in a case. This operation starts an asynchronous task to count the\nshingles.\n\nShingling enables you to find near-duplicate items by extracting the textual essence from each document and applying that pattern to a data set\nto find similar documents. Each shingle, or pattern, generally consists of a phrase of 5 or 6 words. For example, you could use shingling\nto find the Word document that a PDF was created from. The binary makeup of the documents is different, but the content is the same.\n",
        "operationId" : "getItemsShingles",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemsShinglesRequest"
              },
              "example" : {
                "query" : "kind:document",
                "deduplication" : "md5",
                "maxItems" : 5,
                "maxShingleResponse" : 5
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                },
                "example" : {
                  "functionKey" : "1277e4ce-a1dd-421a-b4e0-41c40404908a",
                  "location" : "http://localhost:8080/svc/v1/asyncFunctions/1277e4ce-a1dd-421a-b4e0-41c40404908a"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemSets/{itemSetName}" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns details for an item set",
        "description" : "Use this operation to view details for an item set in a case.<br/><br/>This endpoint returns an AsyncFunctionResponse.",
        "operationId" : "getItemSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemSetResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Culling" ],
        "summary" : "Renames an item set",
        "description" : "Use this operation to rename an item set associated with a case.",
        "operationId" : "renameItemSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemSetNameChangeRequest"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "default response"
          }
        }
      },
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Deletes an item set from a case",
        "description" : "Use this operation to delete a specific item set associated with a case.",
        "operationId" : "deleteItemSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemSets" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns item sets associated with a case",
        "description" : "Use this operation to view the names and descriptions for each item set in a case.",
        "operationId" : "getItemSets",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ItemSetResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Culling" ],
        "summary" : "Creates an item set within a case",
        "description" : "Use this operation to create an item set in a case. Creating an item set enables you to deduplicate content by removing duplicate copies.",
        "operationId" : "asyncCreateItemSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemSetRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemSets/{itemSetName}/duplicates" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns the duplicate items in this set",
        "description" : "Gets the items that are deemed duplicates in the context of this set after deduplication. Returns a list of GUIDs of each duplicate item.",
        "operationId" : "getItemSetDuplicates",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "batch",
          "in" : "query",
          "description" : "Item set batch name, defaults to all batches",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemSetDuplicatesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemSets/{itemSetName}/{itemGuid}/duplicates" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns duplicates for an item in an item set",
        "description" : "Finds items classified as duplicates of an item within an item set. If the item is original, all of its duplicates within the item set will be returned. If the item is classified as a duplicate within the item set the original and all other duplicates within the item set will be returned. If the item set was deduplicated by family, duplicates will be restricted to items within duplicate families. Sets of type SCRIPTED are not supported by this method. Returns a list of GUIDs of each duplicate item.",
        "operationId" : "findItemSetItemDuplicates",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item guid to find duplicates of",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ItemSetDuplicatesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemSets/{itemSetName}/items" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns items in an item set",
        "description" : "Use this operation to view the items associated with an item set in a case.",
        "operationId" : "getItemSetItems",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "batchName",
          "in" : "query",
          "description" : "Batch name (null for all batches)",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startIndex",
          "in" : "query",
          "description" : "Start index, defaults to 0",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "numberOfRecordsRequested",
          "in" : "query",
          "description" : "Number of records to return, defaults to all",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchNativeResult"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Culling" ],
        "summary" : "Adds items to an item set",
        "description" : "Use this operation to add items to an existing item set in a case. Each addition of items to the set is classified as a batch which facilitates rolling deduplication, whereby more items are added to a set and deduplicated against the existing set members.",
        "operationId" : "addItemsToItemSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemSetAddItemsRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Culling" ],
        "summary" : "Removes items from an item set",
        "description" : "Use this operation to remove items from an existing item set in a case. When removing items from an item set with family-level deduplication, operations on top-level originals are applied to their families (removal or re-assignment) but operations on individual descendants and duplicates are applied to those items only.",
        "operationId" : "removeItemsFromItemSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ItemSetRemoveItemsRequest"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "default response"
          }
        }
      }
    },
    "/licenseServer/credentials" : {
      "put" : {
        "tags" : [ "Licensing" ],
        "summary" : "Update and persist license server credentials",
        "description" : "Updates and attempts to persist the license server credentials.  This endpoint will validate the credentials provided, persist, and encrypt the user credentials.",
        "operationId" : "setLicenseServerCredentials",
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuthenticationRequest"
              },
              "example" : {
                "username" : "user1",
                "password" : "mysecurepassword"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The REST configuration change response object.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConfigurationChangeResponse"
                },
                "examples" : {
                  "Persistent Successful Password Change" : {
                    "value" : {
                      "message" : "Success.",
                      "status" : "PERSISTENT"
                    }
                  },
                  "Transient Successful Password Change" : {
                    "value" : {
                      "message" : "Success.",
                      "status" : "TRANSIENT"
                    }
                  },
                  "Failed Password Change" : {
                    "value" : {
                      "message" : "Unable to verify NMS credentials. Invalid username and/or password.",
                      "status" : "FAILED"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/itemSets/{itemSetName}/batches" : {
      "get" : {
        "tags" : [ "Culling" ],
        "summary" : "Returns the batches in this item set",
        "description" : "Use this operation to view batches associated with this item set. Batches are a subset of items within an item set that were added to the set at the same time. Item sets are grouped in a batch by date.<br/><br/>Batch load details objects store the settings and items from a processing session. These include the operating system, architecture, case evidence settings, data processing settings, parallel processing settings, batch load items, and the date and time the batch was loaded.",
        "operationId" : "getItemSetBatches",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemSetName",
          "in" : "path",
          "description" : "Item set name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ItemSetBatchResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/licenses" : {
      "get" : {
        "tags" : [ "Licensing" ],
        "summary" : "Returns a list of available licences",
        "description" : "Use this operation to view a list of your available licences. This information comes from the Nuix Management Server (NMS) or Cloud License Server (CLS).",
        "operationId" : "getAvailableLicensesAus",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LicenseDescription"
                  }
                },
                "examples" : {
                  "Unauthenticated Response" : {
                    "value" : {
                      "shortname" : "enterprise-workstation",
                      "count" : 8,
                      "configuredCount" : 10,
                      "description" : "Nuix eDiscovery Workstation",
                      "workers" : 6,
                      "configuredWorkers" : 10,
                      "audited" : false,
                      "auditThreshold" : 0,
                      "source" : null,
                      "type" : null,
                      "location" : null,
                      "expiry" : null,
                      "legalHoldHoldCountLimit" : null,
                      "concurrentUserLimit" : null,
                      "canChooseWorkers" : null
                    }
                  },
                  "Authenticated Response" : {
                    "value" : {
                      "source" : "h{type=server, location=yourserver:27443}",
                      "type" : "server",
                      "location" : "yourserver:27443",
                      "shortname" : "enterprise-workstation",
                      "count" : 8,
                      "configuredCount" : 10,
                      "description" : "Nuix eDiscovery Workstation",
                      "workers" : "6,",
                      "configuredWorkers" : 10,
                      "audited" : false,
                      "auditThreshold" : 0,
                      "expiry" : 1602720000000,
                      "legalHoldHoldCountLimit" : null,
                      "concurrentUserLimit" : null,
                      "canChooseWorkers" : true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/kinds" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all item kinds",
        "description" : "Use this operation to view the item kinds currently available with this API. A kind is a collection of types which are similar and grouped together. These are not case specific. This is useful for analysis.",
        "operationId" : "getKinds",
        "responses" : {
          "200" : {
            "description" : "The list of item kinds.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NuixItemKindResponse"
                  }
                },
                "example" : [ {
                  "name" : "email",
                  "localisedName" : "Email"
                }, {
                  "name" : "calendar",
                  "localisedName" : "Calendar"
                }, {
                  "name" : "document",
                  "localisedName" : "Documents"
                } ]
              }
            }
          }
        }
      }
    },
    "/searchMacros" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all search macros names and expansions",
        "description" : "Use this operation to view the search macros names and expansions for all cases. If there aren't any search macros available, the returned list will be empty.  Macros are used to identify relevant items and screen them for information. These are useful when the screening process needs to be repeated regularly.",
        "operationId" : "getSearchMacros",
        "responses" : {
          "200" : {
            "description" : "Structured search macro response.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchMacroStructuredResponse"
                },
                "example" : {
                  "files" : null,
                  "folders" : {
                    "Context Groups" : {
                      "files" : null,
                      "folders" : {
                        "Device Access" : {
                          "files" : [ {
                            "name" : "USB Devices",
                            "expansion" : "(properties:\"registryvalue friendlyname\" AND (mime-type:application/vnd.ms-registry-key) AND (path-name:usb)) OR (properties:(\"Event ID:2100\" OR \"Event ID:2102\" OR \"Event ID:157\")) "
                          }, {
                            "name" : "Mounted Devices",
                            "expansion" : "((mime-type:application/vnd.ms-registry-key) AND (name:MountedDevices)) "
                          } ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/shingleLists" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all shingle list names and expansions",
        "description" : "Use this operation to view the shingle list names and expansions for all cases. If there aren't any shingle lists available in the shingle lists store, the returned list will be empty.",
        "operationId" : "getShingleLists",
        "responses" : {
          "200" : {
            "description" : "An array of shingle list names.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "MyShingleList.shlist" ]
              }
            }
          }
        }
      }
    },
    "/wordLists" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all word list names",
        "description" : "Use this operation to view the word list names for all cases. If there aren't any word lists available, the returned list will be empty.",
        "operationId" : "getWordLists",
        "responses" : {
          "200" : {
            "description" : "An array of word lists.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "MyWordList" ]
              }
            }
          }
        }
      }
    },
    "/fuzzyHashLists" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all fuzzy hash list names",
        "description" : "Use this operation to view all fuzzy hash list names. If there aren't any fuzzy hash lists available, the returned list will be empty.",
        "operationId" : "getFuzzyHashLists",
        "responses" : {
          "200" : {
            "description" : "An array of fuzzy has lists.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "MyFuzzyHashList" ]
              }
            }
          }
        }
      }
    },
    "/metadataProfiles" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all metadata profile names",
        "description" : "Use this operation to view the metadata profile names for all cases. These represent the item data that should be displayed in a query, including fields and properties.  The metadata profile names are returned as a set of strings.",
        "operationId" : "getMetadataProfiles",
        "responses" : {
          "200" : {
            "description" : "The list of metadata profile names.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "uniqueItems" : true,
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "Context", "Default", "Discover" ]
              }
            }
          }
        }
      }
    },
    "/types" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all item types",
        "description" : "Use this operation to view the item types currently available with this API. Types correspond to MIME types where possible.",
        "operationId" : "getTypes",
        "responses" : {
          "200" : {
            "description" : "An array of item types.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NuixItemTypeResponse"
                  }
                },
                "example" : [ {
                  "name" : "application/vnd.ms-excel",
                  "localisedName" : "Microsoft Excel Spreadsheet",
                  "preferredExtension" : "xls",
                  "kind" : "spreadsheet",
                  "count" : null
                }, {
                  "name" : "application/vnd.ms-word",
                  "localisedName" : "Microsoft Word Document",
                  "preferredExtension" : "doc",
                  "kind" : "document",
                  "count" : null
                } ]
              }
            }
          }
        }
      }
    },
    "/configurationProfiles" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all configuration profile names",
        "description" : "Use this operation to view the configuration profiles on the system.",
        "operationId" : "getConfigurationProfiles",
        "responses" : {
          "200" : {
            "description" : "The list of configuration profile names.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "MyConfigurationProfile" ]
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/digestLists" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all digest list names",
        "description" : "Use this operation to view all digest list names. If there aren't any digest lists available, the returned list will be empty.",
        "operationId" : "availableDigests",
        "responses" : {
          "200" : {
            "description" : "The list of available digests.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "NSRLFile" ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Resources" ],
        "summary" : "Uploads a digest list to a user data directory",
        "description" : "When no user data directory is provided, the first one found in 'nuix.engine.userDataDirs' will be used.  If the file already exists in the user data directory it will be replaced.",
        "operationId" : "addDigestListsToNuix",
        "parameters" : [ {
          "name" : "userDataDir",
          "in" : "query",
          "description" : "User data directory",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "digestList" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string",
                      "format" : "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "File upload response.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FileUploadResponse"
                },
                "example" : {
                  "fileUploads" : [ {
                    "success" : true,
                    "filePath" : "/opt/nuix/nuix-restful-service/engines/8.4.0.251/user-data/Digest Lists/NSRLFile.txt",
                    "size" : 875193726
                  } ]
                }
              }
            }
          },
          "413" : {
            "description" : "The size of the request exceeds the maximum size.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "FILE_TOO_LARGE",
                  "developerMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n",
                  "userMessage" : null,
                  "additionalInfo" : {
                    "rootExceptionClass" : "org.springframework.web.multipart.MultipartException",
                    "rootExceptionMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/imagingProfiles" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all imaging profile names",
        "description" : "Use this operation to view the imaging profiles on the system.",
        "operationId" : "getImagingProfiles",
        "responses" : {
          "200" : {
            "description" : "The list of all imaging profiles",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "Default", "MyImagingProfile" ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Resources" ],
        "summary" : "Upload an imaging profile",
        "description" : "Use this operation to add an imaging profile to the system. This operation will fail if a profile with the same name already exists.",
        "operationId" : "uploadImagingProfile",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "profile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Imaging Profile created and uploaded.",
            "headers" : {
              "Location" : {
                "schema" : {
                  "type" : "string"
                },
                "description" : "The URL of the uploaded imaging profile."
              }
            }
          },
          "409" : {
            "description" : "A imaging profile with the same filename already exists.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "userMessage" : "A Imaging Profile named imagingAutomation.xml already exists.",
                  "additionalInfo" : null,
                  "errorCode" : "FOLDER_ALREADY_EXISTS",
                  "developerMessage" : "A user attempted to upload a file, while another file with this name already existed."
                }
              }
            }
          },
          "413" : {
            "description" : "The size of the request exceeds the maximum size.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "FILE_TOO_LARGE",
                  "developerMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n",
                  "userMessage" : null,
                  "additionalInfo" : {
                    "rootExceptionClass" : "org.springframework.web.multipart.MultipartException",
                    "rootExceptionMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n"
                  }
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported file type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "additionalInfo" : {
                    "supportedMediaTypes" : [ "application/xml" ]
                  },
                  "errorCode" : "MEDIA_TYPE_NOT_SUPPORTED",
                  "developerMessage" : "The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method. See 'supportedMediaTypes' in 'additionalInfo' for a list of supported types\n"
                }
              }
            }
          }
        }
      }
    },
    "/imagingProfiles/{name}" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Downloads an imaging profile by name",
        "description" : "Use this operation to export an imaging profile from the system.",
        "operationId" : "downloadImagingProfile",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the imaging profile as defined in the name field of the XML file.  This should not be confused with the filename and the path value should not contain the file extension.\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The imaging profile download.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpEntityString"
                }
              }
            }
          },
          "404" : {
            "description" : "A imaging profile with the name provided could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "The resource of type 'IMAGING_PROFILE' and identifier 'Imaging Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "userMessage" : "The resource of type 'IMAGING_PROFILE' and identifier 'Imaging Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productionProfiles" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all production profile names",
        "description" : "Use this operation to view the production profiles on the system.",
        "operationId" : "getProductionProfiles",
        "responses" : {
          "200" : {
            "description" : "The list of all production profiles",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "MyProductionProfile" ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Resources" ],
        "summary" : "Upload a production profile",
        "description" : "Use this operation to add a production profile to the system. This operation will fail if a profile with the same name already exists.",
        "operationId" : "uploadProductionProfile",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "profile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Production Profile created and uploaded.",
            "headers" : {
              "Location" : {
                "schema" : {
                  "type" : "string"
                },
                "description" : "The URL of the uploaded production profile."
              }
            }
          },
          "409" : {
            "description" : "A production profile with the same filename already exists.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "userMessage" : "A Production Profile named productionAutomation.xml already exists.",
                  "additionalInfo" : null,
                  "errorCode" : "FOLDER_ALREADY_EXISTS",
                  "developerMessage" : "A user attempted to upload a file, while another file with this name already existed."
                }
              }
            }
          },
          "413" : {
            "description" : "The size of the request exceeds the maximum size.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "FILE_TOO_LARGE",
                  "developerMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n",
                  "userMessage" : null,
                  "additionalInfo" : {
                    "rootExceptionClass" : "org.springframework.web.multipart.MultipartException",
                    "rootExceptionMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n"
                  }
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported file type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "additionalInfo" : {
                    "supportedMediaTypes" : [ "application/xml" ]
                  },
                  "errorCode" : "MEDIA_TYPE_NOT_SUPPORTED",
                  "developerMessage" : "The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method. See 'supportedMediaTypes' in 'additionalInfo' for a list of supported types\n"
                }
              }
            }
          }
        }
      }
    },
    "/productionProfiles/{name}" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Downloads a production profile by name",
        "description" : "Use this operation to export a production profile from the system.",
        "operationId" : "downloadProductionProfile",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the production profile as defined in the name field of the XML file.  This should not be confused with the filename and the path value should not contain the file extension.\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The production profile download.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpEntityString"
                }
              }
            }
          },
          "404" : {
            "description" : "A production profile with the name provided could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "The resource of type 'PRODUCTION_PROFILE' and identifier 'Production Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "userMessage" : "The resource of type 'PRODUCTION_PROFILE' and identifier 'Production Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processingProfiles" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all processing profile names",
        "description" : "Use this operation to view the processing profiles on the system.",
        "operationId" : "getProcessingProfiles",
        "responses" : {
          "200" : {
            "description" : "The list of all Processing profiles",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "Default", "Default_Mobile", "MyProcessingProfile" ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Resources" ],
        "summary" : "Upload a processing profile",
        "description" : "Use this operation to add a processing profile to the system. This operation will fail if a profile with the same name already exists.",
        "operationId" : "uploadProcessingProfile",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "profile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Processing Profile created and uploaded.",
            "headers" : {
              "Location" : {
                "schema" : {
                  "type" : "string"
                },
                "description" : "The URL of the uploaded processing profile."
              }
            }
          },
          "409" : {
            "description" : "A processing profile with the same filename already exists.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "userMessage" : "A Processing Profile named processingAutomation.xml already exists.",
                  "additionalInfo" : null,
                  "errorCode" : "FOLDER_ALREADY_EXISTS",
                  "developerMessage" : "A user attempted to upload a file, while another file with this name already existed."
                }
              }
            }
          },
          "413" : {
            "description" : "The size of the request exceeds the maximum size.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "FILE_TOO_LARGE",
                  "developerMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n",
                  "userMessage" : null,
                  "additionalInfo" : {
                    "rootExceptionClass" : "org.springframework.web.multipart.MultipartException",
                    "rootExceptionMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n"
                  }
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported file type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "additionalInfo" : {
                    "supportedMediaTypes" : [ "application/xml" ]
                  },
                  "errorCode" : "MEDIA_TYPE_NOT_SUPPORTED",
                  "developerMessage" : "The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method. See 'supportedMediaTypes' in 'additionalInfo' for a list of supported types\n"
                }
              }
            }
          }
        }
      }
    },
    "/processingProfiles/{name}" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Downloads a processing profile by name",
        "description" : "Use this operation to export a processing profile from the system.",
        "operationId" : "downloadProcessingProfile",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the processing profile as defined in the name field of the XML file.  This should not be confused with the filename and the path value should not contain the file extension.\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The processing profile download.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpEntityString"
                }
              }
            }
          },
          "404" : {
            "description" : "A processing profile with the name provided could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "The resource of type 'PROCESSING_PROFILE' and identifier 'Processing Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "userMessage" : "The resource of type 'PROCESSING_PROFILE' and identifier 'Processing Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ocrProfiles" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Returns all OCR profile names",
        "description" : "Use this operation to view the OCR profiles on the system.",
        "operationId" : "getOcrProfiles",
        "responses" : {
          "200" : {
            "description" : "The list of all OCR profiles",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "example" : [ "Default", "MyOcrAutomation" ]
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Resources" ],
        "summary" : "Upload an OCR profile",
        "description" : "Use this operation to add an OCR profile to the system. This operation will fail if a profile with the same name already exists.",
        "operationId" : "uploadOcrProfile",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "profile" : {
                    "type" : "string",
                    "format" : "binary"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "OCR Profile created and uploaded.",
            "headers" : {
              "Location" : {
                "schema" : {
                  "type" : "string"
                },
                "description" : "The URL of the uploaded OCR profile."
              }
            }
          },
          "409" : {
            "description" : "An OCR profile with the same filename already exists.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "userMessage" : "An OCR Profile named ocrAutomation.xml already exists.",
                  "additionalInfo" : null,
                  "errorCode" : "FOLDER_ALREADY_EXISTS",
                  "developerMessage" : "A user attempted to upload a file, while another file with this name already existed."
                }
              }
            }
          },
          "413" : {
            "description" : "The size of the request exceeds the maximum size.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "FILE_TOO_LARGE",
                  "developerMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n",
                  "userMessage" : null,
                  "additionalInfo" : {
                    "rootExceptionClass" : "org.springframework.web.multipart.MultipartException",
                    "rootExceptionMessage" : "Could not parse multipart servlet request; nested exception is java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException: the request was rejected because its size (3260299650) exceeds the configured maximum (10485760)\"\n"
                  }
                }
              }
            }
          },
          "415" : {
            "description" : "Unsupported file type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "additionalInfo" : {
                    "supportedMediaTypes" : [ "application/xml" ]
                  },
                  "errorCode" : "MEDIA_TYPE_NOT_SUPPORTED",
                  "developerMessage" : "The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method. See 'supportedMediaTypes' in 'additionalInfo' for a list of supported types\n"
                }
              }
            }
          }
        }
      }
    },
    "/ocrProfiles/{name}" : {
      "get" : {
        "tags" : [ "Resources" ],
        "summary" : "Downloads an OCR profile by name",
        "description" : "Use this operation to export an OCR profile from the system.",
        "operationId" : "downloadOcrProfile",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the OCR profile as defined in the name field of the XML file.  This should not be confused with the filename and the path value should not contain the file extension.\n",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The OCR profile download.",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HttpEntityString"
                }
              }
            }
          },
          "404" : {
            "description" : "An OCR profile with the name provided could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "The resource of type 'OCR_PROFILE' and identifier 'Ocr Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "userMessage" : "The resource of type 'OCR_PROFILE' and identifier 'Ocr Profile with a name of incorrectProfileName could not be found.' could not be found.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/items/ocr" : {
      "put" : {
        "tags" : [ "Processing" ],
        "summary" : "Performs OCR on query items",
        "description" : "Use this operation to perform bulk optical character recognition (OCR) on items returned from a query. This is done using OCR and imaging options. The Nuix OCR add-on must be installed. For example, you can OCR an image with a query to extract item text.",
        "operationId" : "bulkOcrItemsAsFunctionV2",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OcrRequest"
              },
              "examples" : {
                "Simple OCR Request" : {
                  "value" : {
                    "query" : "kind: document",
                    "ocrOptions" : {
                      "quality" : "document_archiving_speed",
                      "ocrImagingOptions" : {
                        "wordExportingEngine" : "MS_OFFICE"
                      }
                    }
                  }
                }
              }
            },
            "application/vnd.nuix.v2+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OcrRequestV2"
              },
              "examples" : {
                "Simple OCR Request" : {
                  "value" : {
                    "query" : "kind: spreadsheet",
                    "ocrOptions" : {
                      "quality" : "document_archiving_speed",
                      "ocrImagingOptions" : {
                        "excelExportingEngine" : "MS_OFFICE"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              },
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/resources/ocr" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Detects whether OCR functionality is available",
        "description" : "Use this operation to determine whether optical character recognition (OCR) functionality is available.",
        "operationId" : "checkOcrCapability",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericResponse"
                },
                "examples" : {
                  "OCR Enabled" : {
                    "value" : {
                      "success" : true
                    }
                  },
                  "OCR Disabled" : {
                    "value" : {
                      "success" : false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/productionSets" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns all production sets for a case",
        "description" : "Use this operation to view all the production sets for a case. You can use this to see a list of which production sets are available for export.",
        "operationId" : "getProductionSetsForCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "summary",
          "in" : "query",
          "required" : false,
          "description" : "If set to true, will only retrieve name and GUID.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProductionSetResponse"
                  }
                },
                "examples" : {
                  "Empty Production Set" : {
                    "value" : [ {
                      "name" : "MyProductionSet",
                      "description" : "This is a production set",
                      "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                      "frozen" : false,
                      "nextDocumentNumber" : null,
                      "prefix" : null,
                      "nextDocumentId" : null,
                      "firstDocumentNumber" : null,
                      "itemCount" : 0
                    } ]
                  },
                  "Production Set With Items" : {
                    "value" : [ {
                      "name" : "MyProductionSet",
                      "description" : "This is a production set",
                      "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                      "frozen" : false,
                      "nextDocumentNumber" : "nuix000000002",
                      "prefix" : "nuix",
                      "nextDocumentId" : 2,
                      "firstDocumentNumber" : "nuix000000001",
                      "itemCount" : 1
                    } ]
                  },
                  "Production Set Summary Only" : {
                    "value" : [ {
                      "name" : "MyProductionSet",
                      "description" : null,
                      "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                      "frozen" : null,
                      "nextDocumentNumber" : null,
                      "prefix" : null,
                      "nextDocumentId" : null,
                      "firstDocumentNumber" : null,
                      "itemCount" : 0
                    } ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Creates a production set",
        "description" : "Use this operation to create a production set in a case. Production sets allow you to manage a set of grouped items for export.",
        "operationId" : "createProductionSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductionSetRequest"
              },
              "examples" : {
                "Simple Production Set" : {
                  "value" : {
                    "name" : "MyProductionSet",
                    "description" : "This is a production set",
                    "query" : "kind:document",
                    "includeFamilies" : false
                  }
                }
              }
            },
            "application/vnd.nuix.v2+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkProductionSetWithProfilesRequest"
              },
              "example" : {
                "name" : "MyProductionSet",
                "description" : "This is a production set",
                "query" : "kind:document",
                "productionProfileName" : "Default"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponseDeprecated"
                }
              },
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/productionSets/{productionSetId}/item/{itemGuid}/printPreview" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns a print preview for an item in the production set",
        "description" : "Use this operation to return a print preview of the item.  If a print preview isn't present on the item, it will be generated.",
        "operationId" : "getPrintPreview",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionSetId",
          "in" : "path",
          "description" : "Production set GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "itemGuid",
          "in" : "path",
          "description" : "Item GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The page number to be printed",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "generateNew",
          "in" : "query",
          "description" : "Force regeneration of print preview",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "format" : "byte"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Production Set Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Unable to find production set for guid: InvalidProductionSetGuid",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  },
                  "Item Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Unable to find item for guid: InvalidItemGuid",
                      "userMessage" : null,
                      "additionalInfo" : { }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/productionSets/{productionSetId}/items" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns the items in this production set",
        "description" : "This is a shortcut for using the search endpoint with a production-set-guid:[guid] query",
        "operationId" : "getProductionSetItems",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionSetId",
          "in" : "path",
          "description" : "Production set GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startIndex",
          "in" : "query",
          "description" : "Start index, defaults to 0",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "numberOfRecordsRequested",
          "in" : "query",
          "description" : "Number of records to return, defaults to all",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchNativeResult"
                },
                "example" : {
                  "request" : {
                    "caseId" : "219f69f5eee14cf6b8c8c15d7cc2dd1e",
                    "query" : "production-set-guid:1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                    "sortField" : null,
                    "sortOrder" : null,
                    "startIndex" : 0,
                    "numberOfRecordsRequested" : 1,
                    "deduplicate" : null,
                    "metadataProfile" : null,
                    "fieldList" : [ ],
                    "customMetadataList" : [ ],
                    "propertyList" : [ ],
                    "itemParameterizedFields" : [ ],
                    "showAvailableThumbnails" : false,
                    "useCache" : false,
                    "forceCacheDelete" : false,
                    "searchRetry" : 0,
                    "relationType" : null,
                    "entities\"" : [ ],
                    "s" : 0,
                    "p" : 1,
                    "customMetadataField" : [ ],
                    "property" : [ ],
                    "field" : [ ],
                    "startedOn" : 1589459144928,
                    "completedOn" : 1589459145042,
                    "elapsedTimeForSearch" : 90,
                    "elapsedTimeForSort" : 0,
                    "elapsedTimeForMarshal" : 24,
                    "elapsedTimeForDeduplicate" : 0,
                    "elapsedTotal" : 114,
                    "metadataItems" : [ ],
                    "localizedMetadataItems" : [ ],
                    "metadataItemDetails" : [ ],
                    "resultList" : [ {
                      "customMetadata" : { },
                      "entities" : { },
                      "guid" : "fd772326-87f2-40d2-8d6a-b6009c79cc49",
                      "properties" : { },
                      "count" : 1,
                      "deduplicatedCount" : 1
                    } ]
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Adds items to a production set",
        "description" : "Use this operation to add items to an existing production set in a case. Production sets allow you to manage a set of grouped items for export.",
        "operationId" : "addItemsToProductionSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionSetId",
          "in" : "path",
          "description" : "Production set GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProductionSetRequest"
              },
              "example" : {
                "query" : "kind:document"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "RESOURCE_NOT_FOUND",
                  "developerMessage" : "Case does not exist.",
                  "userMessage" : "Case does not exist.",
                  "additionalInfo" : {
                    "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                    "rootExceptionMessage" : null
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/productionSets/{productionSetId}/printPreview" : {
      "post" : {
        "tags" : [ "Analysis" ],
        "summary" : "Generates print previews for items in the production set",
        "description" : "Use this operation to generate print previews for all items in the production set.",
        "operationId" : "generatePrintPreviews",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionSetId",
          "in" : "path",
          "description" : "Production set GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "allItems",
          "in" : "query",
          "description" : "Generate all print previews, or only generate previews that don't already exist",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductionSetResponse"
                },
                "example" : {
                  "name" : "MyProductionSet",
                  "description" : "This is a production set",
                  "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                  "frozen" : false,
                  "nextDocumentNumber" : "nuix000000002",
                  "prefix" : "nuix",
                  "nextDocumentId" : "2,",
                  "firstDocumentNumber" : "nuix000000001",
                  "itemCount" : 1
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Production Set Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "userMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/productionSets/{productionSetId}" : {
      "get" : {
        "tags" : [ "Analysis" ],
        "summary" : "Returns details for a specific production set",
        "description" : "Use this operation to view information about a production set. Details include set name, item count, description, and document numbering. You can use this information to determine if this production set is ready for export.",
        "operationId" : "getProductionSet",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionSetId",
          "in" : "path",
          "description" : "Production set GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "summary",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductionSetResponse"
                },
                "examples" : {
                  "Empty Production Set" : {
                    "value" : {
                      "name" : "MyProductionSet",
                      "description" : "This is a production set",
                      "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                      "frozen" : false,
                      "nextDocumentNumber" : null,
                      "prefix" : null,
                      "nextDocumentId" : null,
                      "firstDocumentNumber" : null,
                      "itemCount" : 0
                    }
                  },
                  "Production Set With Items" : {
                    "value" : {
                      "name" : "MyProductionSet",
                      "description" : "This is a production set",
                      "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                      "frozen" : false,
                      "nextDocumentNumber" : "nuix000000002",
                      "prefix" : "nuix",
                      "nextDocumentId" : 2,
                      "firstDocumentNumber" : "nuix000000001",
                      "itemCount" : 1
                    }
                  },
                  "Production Set Summary Only" : {
                    "value" : {
                      "name" : "MyProductionSet",
                      "description" : null,
                      "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                      "frozen" : null,
                      "nextDocumentNumber" : null,
                      "prefix" : null,
                      "nextDocumentId" : null,
                      "firstDocumentNumber" : null,
                      "itemCount" : 0
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Production Set Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "userMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Analysis" ],
        "summary" : "Deletes a production set from a case",
        "description" : "Use this operation to delete a specific production set from a case.",
        "operationId" : "deleteProductionSet",
        "deprecated" : true,
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionSetId",
          "in" : "path",
          "description" : "Production set GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductionSetResponse"
                },
                "example" : {
                  "name" : "MyProductionSet",
                  "description" : "This is a production set",
                  "guid" : "1ecbbbc9-e093-497b-a92f-e9c58f00fb2f",
                  "frozen" : false,
                  "nextDocumentNumber" : null,
                  "prefix" : null,
                  "nextDocumentId" : null,
                  "firstDocumentNumber" : null,
                  "itemCount" : 0
                }
              }
            }
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Production Set Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "userMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/cases/{caseId}/productionSets/{productionSetId}" : {
      "delete" : {
        "tags" : [ "Analysis" ],
        "summary" : "Deletes a production set from a case",
        "description" : "Use this operation to delete a specific production set from a case.",
        "operationId" : "deleteProductionSetV2",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "productionSetId",
          "in" : "path",
          "description" : "Production set GUID",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "default response"
          },
          "404" : {
            "description" : "Case does not exist",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "examples" : {
                  "Case Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Case does not exist.",
                      "userMessage" : "Case does not exist.",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  },
                  "Production Set Does Not Exist" : {
                    "value" : {
                      "errorCode" : "RESOURCE_NOT_FOUND",
                      "developerMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "userMessage" : "Unable to find production set for guid: invalidProductionSetGuid",
                      "additionalInfo" : {
                        "rootExceptionClass" : "com.nuix.us.exception.i18n.I18nNotFoundException",
                        "rootExceptionMessage" : null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/search" : {
      "get" : {
        "tags" : [ "Search" ],
        "summary" : "Performs a search",
        "description" : "Use this operation to search a case.  For large query strings, use the POST method.\n\nUse the following supported fields in the fieldList:\n\n* `all` - Returns all fields for the item.\n* `auditedSize` - Returns the item''s audited size.\n* `children` - Returns a list of the item''s children.\n* `clusterPivotResemblances` - Returns a map where the keys are cluster IDs and the values are resemblances.\n* `clusterPivots` - Returns a map where the keys are cluster IDs and the values are boolean flags.\n* `comment` - Returns item comments.\n* `communication` - If the item is a communication, this returns item communication information.\n* `correctedExtension` - Returns the extension based on Nuix''s identification of the item''s MIME type.\n* `custodian` - Returns the custodian assigned to an item.\n* `customMetadata` - Returns custom metadata for the item as a map. Must provide metadataProfile to get this.\n* `date` - Returns the item date.\n* `descendants` - Gets the list of items which are descendants of this item.\n* `digests` - Returns a map of the computed digests for an item.\n* `duplicateCustodianSet` - Returns the set of custodian names associated with this item and its duplicates.\n* `duplicates` - Returns duplicates of this item.\n* `evidenceMetadata` - Returns custom evidence metadata for the item.\n* `exclusion` - Returns the reason for an item''s exclusion.\n* `family` - Returns a list of items in the same family.\n* `fileSize` - Returns the item''s file size if it is readable, or returns null if this is not file data.\n* `fileType` - Returns the name of the file type.\n* `guid` - Returns the item''s globally unique identifier (GUID).\n* `history` - Returns the item''s history in ascending order by date.\n* `id` - Returns the item''s ID.\n* `isAudited` - Tests whether the item is considered audited and returns true or false.\n* `isBinaryAvailable` - Tests whether the item''s binary is available before attempting to export it.  This returns\n          true if the item had binary data at processing time that was not stored. This\n          differs from isStored() as this method returns true if the item had binary\n          data at processing time that was not stored.\n* `isBinaryStored` - Tests whether the item has binary stored against it in the database. True is returned\n          if stored binary exists. In this case, the source data isn''t required for\n          binary export.\n* `isChatMessage` - Tests whether the item is a chat message.\n* `isChatConversation` - Tests whether the item is a chat conversation.\n* `isDeleted` - Tests whether the item was marked as deleted and returns true or false.\n* `isEmailThreadMember` - Tests whether the item is part of an email thread.\n* `isEncrypted` - Tests whether the item was marked as encrypted and returns true or false.\n* `isExcluded` - Tests whether the item was marked as excluded.\n* `isFamilyMember` - Tests whether the item is a member of a family (i.e. it has a top-level item).\n* `isIncuded` - Tests whether the item is included and returns true or false.\n* `isLooseFile` - Tests whether the item is a loose file and returns true or false.\n* `isPhysicalFile` - Tests whether the item is a physical file and returns true or false.\n* `isPrintedImageStored` - Tests whether the printed image is stored and returns true or false. This field\n          is useful when you only need to know if a printed image exists for this item.\n          This is faster and uses fewer resources than requesting the printedImageInfo\n          field.\n* `isTextAvailable` - Tests whether the item''s text is available before attempting to read or export it.\n* `isTextStored` - Tests hether the item has text stored against it in the database.  In the event\n          where you only want to know if the item had text but didn''t need the text\n          this field is considerably faster and more conservative of resources than\n          isTextAvailable.\n* `isThumbnailStored` - Tests whether a thumbnail is stored for this item in the database and returns true or false.\n* `isTopLevel` - Tests whether this is a top-level item and returns true or false.\n* `itemCategory` - Returns the item category.\n* `kind` - Returns the item kind.\n* `language` - Returns the language identified by the item.\n* `localisedName` - Returns the item name or the localised placeholder (for example, [Unnamed Image])\n          if the name is blank.\n* `localisedPathNames` - Returns a list of item names on the path from the root evidence container to the item.\n* `name` - Returns the item name.\n* `originalExtension` - Returns the original extension listed on the source file.\n* `parent` - Returns the parent of this item.\n* `path` - Returns an item list which represents the path from the root evidence container to the item.\n* `pathIDs` - Returns a list of the IDs of items on the path from the root evidence container up to the item itself.\n* `pathNames` - Returns a list of item names on the path from the root evidence container to the item.\n* `position` - Returns the item position number which identifies where this item exists in the tree of all ingested items.\n* `printedImageInfo` - Returns information about the printed image.\n* `properties` - Returns item properties.\n* `root` - Returns the root item. If this item is the root, the item itself is returned.\n* `rootUri` - Returns the item''s root URI as a string.\n* `tags` - Returns the item tags.\n* `text` - Returns the text of the item as a string.\n* `textHtml` - Returns the text of the item escaped for HTML.\n* `textSummary` - Returns the stored text summary of the item if one exists, otherwise null.\n* `textSummaryHtml` - Returns the stored text summary of the item escaped for HTML if one exists, otherwise null.\n* `threadItems` - Returns items that are in the same discussion thread as this item.\n* `topLevelItem` - Returns the associated top-level item.\n* `topLevelItemDate` - Returns the associated top-level item date.\n* `type` - Returns the type name.\n* `typeLocalisedName` - Returns the type name, localised appropriately for display to users.\n* `uri` - Returns the item''s uniform resource identifier (URI) as a string.\n",
        "operationId" : "searchNativeResult",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "query",
          "in" : "query",
          "description" : "Identifies what items should be returned.  If a query is not supplied it defaults to an empty string, which returns all items.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "s",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "p",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "startIndex",
          "in" : "query",
          "description" : "The index of the first record that should be returned. Defaults to 0.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "numberOfRecordsRequested",
          "in" : "query",
          "description" : "The number of records that should be returned. Defaults to all records.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "deduplicate",
          "in" : "query",
          "description" : "Deduplicate content based on the Value field selection. The default is no deduplication.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "metadataProfile",
          "in" : "query",
          "description" : "Defines the metadata profile to be appied to the results. Needed to get custom metadata. Defaults to no metadata profile.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldList",
          "in" : "query",
          "description" : "List of fields to be returned for each item in the results.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "customMetadataField",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "propertyList",
          "in" : "query",
          "description" : "List of properties to be returned for each item in the results.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "itemParameterizedFields",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "entities",
          "in" : "query",
          "description" : "List of entity names to include in response (e.g. company,email)",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "showAvailableThumbnails",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "useCache",
          "in" : "query",
          "description" : "Specifies whether the results should be loaded from and stored in cache.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "forceCacheDelete",
          "in" : "query",
          "description" : "Specifies whether the cached results should be deleted before performing the search.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Any field in the metadata profile which you want to sort by.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sets the sort order for the results.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "relationType",
          "in" : "query",
          "description" : "The relation to apply to the found items.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchNativeResult"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Performs a large search",
        "description" : "Use this operation to perform a large search on a case.  This operation doesn't have a maximum query string length.",
        "operationId" : "searchNativeResultPost",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchNativeRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchNativeResult"
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/asyncFunctions/search" : {
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "asyncSearchNative",
        "operationId" : "asyncSearchNative",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "caseId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SearchNativeRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AsyncFunctionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/system/properties/{propertyName}" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Gets a Nuix system property",
        "description" : "Use this operation to get the value of a Nuix system property. This operation is limited to Nuix system properties only and the property must start with the string \"nuix.\"",
        "operationId" : "getSystemProperty",
        "parameters" : [ {
          "name" : "propertyName",
          "in" : "path",
          "description" : "The name of the system property.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemPropertyResponse"
                },
                "example" : {
                  "name" : "nuix.registry.servers",
                  "value" : "server.domain.com",
                  "previousValue" : null
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Property",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "INVALID_REQUEST_FORMAT",
                  "developerMessage" : "badproperty is an unrecognized Nuix system property.",
                  "userMessage" : null,
                  "additionalInfo" : null
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "System" ],
        "summary" : "Sets a Nuix system property",
        "description" : "Use this operation to set a Nuix system property. This operation is limited to Nuix system properties only and the value is not persisted between application restarts.  You may want to do this if there is a specific Nuix system property required for an ingestion, export, or OCR operation.  This is NOT threadsafe and could affect other users.",
        "operationId" : "setSystemProperty",
        "parameters" : [ {
          "name" : "propertyName",
          "in" : "path",
          "description" : "The name of the system property.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v2+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SystemPropertyRequest"
              },
              "examples" : {
                "Update Property Example" : {
                  "value" : {
                    "value" : "new_value"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemPropertyResponse"
                },
                "example" : {
                  "name" : "nuix.registry.servers",
                  "value" : "server.domain.com",
                  "previousValue" : "oldserver.domain.com"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Property",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "INVALID_REQUEST_FORMAT",
                  "developerMessage" : "badproperty is an unrecognized Nuix system property.",
                  "userMessage" : null,
                  "additionalInfo" : null
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "System" ],
        "summary" : "Clears a Nuix system property",
        "description" : "Use this operation to clear a Nuix system property. This operation is limited to Nuix system properties only and the value is not persisted between application restarts.  You may want to do this if you previously set a specific Nuix system property required for an ingestion, export, or OCR operation.  This is NOT threadsafe and could affect other users.",
        "operationId" : "clearSystemProperty",
        "parameters" : [ {
          "name" : "propertyName",
          "in" : "path",
          "description" : "The name of the system property.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SystemPropertyResponse"
                },
                "example" : {
                  "name" : "nuix.registry.servers",
                  "value" : null,
                  "previousValue" : "oldserver.domain.com"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Property",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestErrorResponse"
                },
                "example" : {
                  "errorCode" : "INVALID_REQUEST_FORMAT",
                  "developerMessage" : "badproperty is an unrecognized Nuix system property.",
                  "userMessage" : null,
                  "additionalInfo" : null
                }
              }
            }
          }
        }
      }
    },
    "/system/diagnostics" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Generates a system diagnostics ZIP file",
        "description" : "Use this operation to create a ZIP file with system diagnostics information. The diagnostics include log files, product versions, environment variables, system properties, licence properties, drive information, process information, JVM arguments and settings, and installed and not installed dependencies.",
        "operationId" : "generateSystemsDiagnostics",
        "parameters" : [ {
          "name" : "includeResourceDetails",
          "in" : "query",
          "description" : "Creates an additional diagnostics file that includes the engine version, search cache, system resources, function queue, and active user count.",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "requestingApplication",
          "in" : "query",
          "description" : "Adds the application name provided to the digest file in the zip.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "requestingApplicationVersion",
          "in" : "query",
          "description" : "Adds the application version provided to the digest file in the zip.",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "binary"
                }
              }
            }
          }
        }
      }
    },
    "/system/health" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Checks whether the REST server is running",
        "description" : "Use this operation to ensure the RESTful services are working. This is a heartbeat test that checks whether the REST server is up and running.",
        "operationId" : "heartbeat",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GenericResponse"
                },
                "examples" : {
                  "Service Running" : {
                    "value" : {
                      "success" : true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cases/{caseId}/userScripts" : {
      "put" : {
        "tags" : [ "Scripting" ],
        "summary" : "Executes a user script on a case",
        "description" : "Use this operation to execute a script on a case. This injects the case object into the script for use as a local variable.This is useful for extending the Nuix REST API to fit your needs.<br/><br/>Each script has several common local variables, all of which are available both with and without a leading dollar sign (<b>$</b>):<br/>&#x25CF;<b>current_case</b> (also as <b>currentCase</b>):  This is the Java nuix.Case object.  It is only available in the case-specific endpoint.<br/>&#x25CF;<b>utilities</b>:  This is the Java nuix.Utilities object for the current environment.<br/>&#x25CF;<b>request</b>:  This is the Java HttpServletRequest object.<br/>&#x25CF;<b>response</b>:  This provides methods for customising the object that is returned from the server. These methods are:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setStatus(int httpStatusCode)</b>:  This sets the HTTP status code.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>addHeader(String headerName, String headerValue)</b>:  This adds a header to the actual HTTP response that comes back from the server.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setBody(Object body)</b>:  This sets the payload of the response.<br/>&#x25CF;<b>progress</b>:  This provides methods for updating the progress of the script when run in an asynchronous manner. These methods are:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setStatus(String status)</b>:  This sets an arbitrary status value. This will be reflected in the 'status' variable in the AsyncFunctionStatus response.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setEstimatedFinalValue(long value))</b>:  This sets an estimate for the final progress value. This will be reflected in the 'total' variable in the AsyncFunctionStatus response, and will be used as the denominator  when calculating percent complete.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setCurrentValue(long value)</b>:  This sets the current progress value. This will be reflectd in the 'progress' variable in the AsyncFunctionStatus response, and will be used as the numerator when calculating percent complete.<br/>&#x25CF;<b>custom_arguments</b> (also as <b>customArguments</b>):  This is the map of provided custom arguments.<br/><br/>For scripts run asynchronously, the following JSON variables will be available in the <b>result</b> section when retrieving function status:<br/>&#x25CF;<b>status</b>:  This is the HTTP status code as set by <b>response.setStatus(httpStatusCode)</b> (see above), or 200 if not explicitly set.<br/>&#x25CF;<b>headers</b>:  These are HTTP headers as set by <b>response.addHeader(headerName, headerValue)</b> (see above).<br/>&#x25CF;<b>body</b>:  This is the payload as set by <b>response.setBody(body)</b> (see above).<br/>&#x25CF;<b>output</b>:  This is the result of any print statement (or equivalent) executed by the script.  Newlines will most likely be encoded.<br/>&#x25CF;<b>result</b>:  This is the return value from the script, if any.<br/><br/>For scripts run synchronously, the HTTP response code, headers, and body will reflect the use of the <b>response</b> variable.",
        "operationId" : "executeUserScriptFunctionForCase",
        "parameters" : [ {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case identification token",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserScriptRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseEntityObject"
                }
              }
            }
          }
        }
      }
    },
    "/userScripts" : {
      "get" : {
        "tags" : [ "Scripting" ],
        "summary" : "Retrieves the list of existing user scripts",
        "description" : "Use this operation to view the list of existing user scripts.",
        "operationId" : "fetchUserScripts",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Scripting" ],
        "summary" : "Executes a user script",
        "description" : "Use this operation to execute a script that is in the user scripts directory.This is useful for extending the Nuix REST API to fit your needs.<br/><br/>Each script has several common local variables, all of which are available both with and without a leading dollar sign (<b>$</b>):<br/>&#x25CF;<b>current_case</b> (also as <b>currentCase</b>):  This is the Java nuix.Case object.  It is only available in the case-specific endpoint.<br/>&#x25CF;<b>utilities</b>:  This is the Java nuix.Utilities object for the current environment.<br/>&#x25CF;<b>request</b>:  This is the Java HttpServletRequest object.<br/>&#x25CF;<b>response</b>:  This provides methods for customising the object that is returned from the server. These methods are:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setStatus(int httpStatusCode)</b>:  This sets the HTTP status code.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>addHeader(String headerName, String headerValue)</b>:  This adds a header to the actual HTTP response that comes back from the server.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setBody(Object body)</b>:  This sets the payload of the response.<br/>&#x25CF;<b>progress</b>:  This provides methods for updating the progress of the script when run in an asynchronous manner. These methods are:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setStatus(String status)</b>:  This sets an arbitrary status value. This will be reflected in the 'status' variable in the AsyncFunctionStatus response.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setEstimatedFinalValue(long value))</b>:  This sets an estimate for the final progress value. This will be reflected in the 'total' variable in the AsyncFunctionStatus response, and will be used as the denominator  when calculating percent complete.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>setCurrentValue(long value)</b>:  This sets the current progress value. This will be reflectd in the 'progress' variable in the AsyncFunctionStatus response, and will be used as the numerator when calculating percent complete.<br/>&#x25CF;<b>custom_arguments</b> (also as <b>customArguments</b>):  This is the map of provided custom arguments.<br/><br/>For scripts run asynchronously, the following JSON variables will be available in the <b>result</b> section when retrieving function status:<br/>&#x25CF;<b>status</b>:  This is the HTTP status code as set by <b>response.setStatus(httpStatusCode)</b> (see above), or 200 if not explicitly set.<br/>&#x25CF;<b>headers</b>:  These are HTTP headers as set by <b>response.addHeader(headerName, headerValue)</b> (see above).<br/>&#x25CF;<b>body</b>:  This is the payload as set by <b>response.setBody(body)</b> (see above).<br/>&#x25CF;<b>output</b>:  This is the result of any print statement (or equivalent) executed by the script.  Newlines will most likely be encoded.<br/>&#x25CF;<b>result</b>:  This is the return value from the script, if any.<br/><br/>For scripts run synchronously, the HTTP response code, headers, and body will reflect the use of the <b>response</b> variable.",
        "operationId" : "executeUserScriptFunction",
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserScriptRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseEntityObject"
                }
              }
            }
          }
        }
      }
    },
    "/about" : {
      "get" : {
        "tags" : [ "System" ],
        "summary" : "Retrieves information about Nuix RESTful services",
        "description" : "Use this operation to view version information about your Nuix RESTful services configuration.  Authentication is optional for this endpoint.  If the user is not authenticated then sensitive information about the service is not returned.\n",
        "operationId" : "aboutV1",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v2+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AboutResponseV2"
                },
                "examples" : {
                  "Unauthenticated Response" : {
                    "value" : {
                      "server" : "http://localhost:8080",
                      "serverId" : "my-rest-server",
                      "startupTime" : null,
                      "nuixRestfulVersion" : null,
                      "engineVersion" : null
                    }
                  },
                  "Authenticated Response" : {
                    "value" : {
                      "server" : "http://localhost:8080",
                      "serverId" : "my-rest-server",
                      "startupTime" : 1582916595048,
                      "nuixRestfulVersion" : "15.0.0",
                      "engineVersion" : "8.4.0.251"
                    }
                  }
                }
              },
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AboutResponseV1"
                },
                "examples" : {
                  "Unathenticated Response" : {
                    "value" : {
                      "server" : "http://localhost:8080",
                      "serverId" : "my-rest-server",
                      "startupTime" : null,
                      "nuixRestfulVersion" : "15.0.0",
                      "engineVersion" : null,
                      "licenceSource" : "server",
                      "casePrivilegeSecurityEnabled" : false,
                      "itemSecurityEnabled" : false,
                      "specificLicenseRequiredAtLogin" : false,
                      "userManagementUrl" : "",
                      "textHighlightingEnabled" : true,
                      "phraseHighlightingEnabled" : false
                    }
                  },
                  "Authenticated Response" : {
                    "value" : {
                      "server" : "http://localhost:8080",
                      "serverId" : "my-rest-server",
                      "startupTime" : 1582916595048,
                      "nuixRestfulVersion" : "15.0.0",
                      "engineVersion" : "8.4.0.251",
                      "licenceSource" : "server",
                      "casePrivilegeSecurityEnabled" : false,
                      "itemSecurityEnabled" : false,
                      "specificLicenseRequiredAtLogin" : false,
                      "userManagementUrl" : "",
                      "textHighlightingEnabled" : true,
                      "phraseHighlightingEnabled" : false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/charsets" : {
      "get" : {
        "summary" : "Returns the list of charsets on the system.",
        "description" : "Use this operation to view the list of system charsets.\n",
        "tags" : [ "System" ],
        "operationId" : "getCharSets",
        "responses" : {
          "200" : {
            "description" : "A list of system charsets.",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CharsetResponse"
                  }
                },
                "example" : [ {
                  "name" : "UTF-8",
                  "displayName" : "UTF-8"
                } ]
              }
            }
          }
        }
      }
    },
    "/validation/query" : {
      "post" : {
        "tags" : [ "Search" ],
        "summary" : "Validates a list of queries",
        "description" : "Use this operation to validate queries.",
        "operationId" : "validateQueryPost",
        "requestBody" : {
          "content" : {
            "application/vnd.nuix.v1+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/vnd.nuix.v1+json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/QueryValidationResponse"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "RestErrorResponse" : {
        "type" : "object",
        "properties" : {
          "developerMessage" : {
            "type" : "string",
            "description" : "The technical description of the error."
          },
          "userMessage" : {
            "type" : "string",
            "description" : "The friendly error message."
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "Additional information about the error.",
            "additionalProperties" : {
              "type" : "object",
              "description" : "This is a map of additional properties."
            }
          },
          "errorCode" : {
            "type" : "string",
            "description" : "The specific error code for the error from the list of available error codes.",
            "enum" : [ "AUTHENTICATION_FAILED", "CASE_ACCESS_RESTRICTED", "CASE_LOCKED", "DELETE_DENIED", "DUPLICATE_CASES_DETECTED", "ENGINE_EXCEPTION", "FILE_TOO_LARGE", "INVALID_REQUEST_FORMAT", "INVALID_APPLICATION_RESPONSE", "INVALID_ARGUMENT", "ITEM_ACCESS_RESTRICTED", "LICENSE_EXCEPTION", "MEDIA_TYPE_NOT_SUPPORTED", "MEDIA_TYPE_NOT_ACCEPTABLE", "METHOD_NOT_ALLOWED", "NOT_IMPLEMENTED", "PRODUCTION_SET_FROZEN", "REQUIRED_ARGUMENT_MISSING", "RESOURCE_NOT_FOUND", "UNAUTHORISED", "UNKNOWN", "USER_SCRIPT_NOT_PROVIDED", "FOLDER_ALREADY_EXISTS", "CASE_LOCKED_BY_FUNCTION", "MISSING_THUMBNAIL", "ITEM_SET_ALREADY_EXISTS", "INVALID_LICENSE_TYPE_FOR_CASE", "SIMPLE_CASE_REQUIRED", "USER_ACCOUNT_LOCKED", "APPLICATION_NOT_REGISTERED", "INVALID_TEMPLATE", "DUPLICATE_RECORD", "CASE_MIGRATION_REQUIRED", "SERVICE_UNAVAILABLE", "RESPONSE_TOO_LARGE", "QUERY_PARSE_ERROR", "REMOTE_SYSTEM_ERROR", "FILE_SYSTEM_ERROR" ]
          }
        }
      },
      "AddRemoteWorkersRequest" : {
        "type" : "object",
        "properties" : {
          "workerAgentAddress" : {
            "type" : "string",
            "description" : "Host the agent has been bound to. If none was specified when the agent was created, use the one returned in the response of the agent creation endpoint."
          },
          "workerCount" : {
            "type" : "integer",
            "description" : "Number of workers to add. Defaults to max available.",
            "format" : "int32"
          }
        }
      },
      "AddRemoteWorkersResponse" : {
        "type" : "object",
        "properties" : {
          "workerAgentAddress" : {
            "type" : "string",
            "description" : "Address in the format host:port"
          },
          "workersAdded" : {
            "type" : "integer",
            "description" : "Number of workers added if successful.",
            "format" : "int32"
          },
          "errorMessage" : {
            "type" : "string",
            "description" : "Message from the exception if an error occurred."
          }
        }
      },
      "AsyncFunctionStatus" : {
        "type" : "object",
        "properties" : {
          "done" : {
            "type" : "boolean",
            "description" : "Indicates whether the Async function has completed."
          },
          "cancelled" : {
            "type" : "boolean",
            "description" : "Indicates whether the Async function has been canceled."
          },
          "result" : {
            "type" : "object",
            "description" : "Result of the function."
          },
          "token" : {
            "type" : "string",
            "description" : "Authentication token used to initiate the function."
          },
          "functionKey" : {
            "type" : "string",
            "description" : "Async function key"
          },
          "progress" : {
            "type" : "number",
            "description" : "Progress of the Async function"
          },
          "total" : {
            "type" : "number",
            "description" : "total"
          },
          "percentComplete" : {
            "type" : "number",
            "description" : "Percent completed, if available"
          },
          "updatedOn" : {
            "type" : "string",
            "description" : "Date at which the Async function was last updated.",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the Async function."
          },
          "statusId" : {
            "type" : "string"
          },
          "requestTime" : {
            "type" : "string",
            "description" : "Date at which the Async function request was made.",
            "format" : "date-time"
          },
          "startTime" : {
            "type" : "string",
            "description" : "Date at which the Async function request was started.",
            "format" : "date-time"
          },
          "finishTime" : {
            "type" : "string",
            "description" : "Date at which the Async function request was finished.",
            "format" : "date-time"
          },
          "caseId" : {
            "type" : "string",
            "description" : "Case identification token for the case on which the Async function was performed."
          },
          "caseName" : {
            "type" : "string",
            "description" : "Name of the case on which the Async function was performed."
          },
          "hasSuccessfullyCompleted" : {
            "type" : "boolean",
            "description" : "Indicated whether the Async function has successfully completed."
          },
          "friendlyName" : {
            "type" : "string",
            "description" : "Friendly name for the Async function."
          },
          "caseLocation" : {
            "type" : "string",
            "description" : "Location of the case on which the Async function was performed."
          },
          "requestor" : {
            "type" : "string",
            "description" : "Username for user who requested the Async function."
          },
          "action" : {
            "type" : "string",
            "description" : "action"
          },
          "options" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Options used during the execution of the Async function."
          },
          "participatingInCaseFunctionQueue" : {
            "type" : "boolean",
            "description" : "participatingInCaseFunctionQueue"
          }
        }
      },
      "AsyncFunctionStatusObject" : {
        "type" : "object",
        "properties" : {
          "done" : {
            "type" : "boolean"
          },
          "cancelled" : {
            "type" : "boolean"
          },
          "result" : {
            "type" : "object"
          },
          "token" : {
            "type" : "string"
          },
          "functionKey" : {
            "type" : "string"
          },
          "progress" : {
            "type" : "number"
          },
          "total" : {
            "type" : "number"
          },
          "percentComplete" : {
            "type" : "number"
          },
          "updatedOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string"
          },
          "statusId" : {
            "type" : "string"
          },
          "requestTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "finishTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "caseId" : {
            "type" : "string"
          },
          "caseName" : {
            "type" : "string"
          },
          "hasSuccessfullyCompleted" : {
            "type" : "boolean"
          },
          "friendlyName" : {
            "type" : "string"
          },
          "caseLocation" : {
            "type" : "string"
          },
          "requestor" : {
            "type" : "string"
          },
          "action" : {
            "type" : "string"
          },
          "options" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "participatingInCaseFunctionQueue" : {
            "type" : "boolean"
          }
        }
      },
      "AsyncFunctionStatusesResponse" : {
        "type" : "object",
        "properties" : {
          "executeImmediate" : {
            "type" : "array",
            "description" : "List of AsyncFunctionStatus objects for Async functions which are queued to execute.",
            "items" : {
              "$ref" : "#/components/schemas/AsyncFunctionStatusObject"
            }
          },
          "singleItemQueue" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AsyncFunctionStatusObject"
            }
          },
          "paused" : {
            "type" : "boolean"
          },
          "pausedBy" : {
            "type" : "string"
          },
          "pausedUntil" : {
            "type" : "integer",
            "format" : "int64"
          },
          "caseQueues" : {
            "type" : "array",
            "description" : "caseFunctionQueues",
            "items" : {
              "$ref" : "#/components/schemas/CaseFunctionQueue"
            }
          },
          "totalRunningFunctions" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "CaseFunctionQueue" : {
        "type" : "object",
        "properties" : {
          "caseId" : {
            "type" : "string",
            "description" : "Case identification token"
          },
          "queue" : {
            "type" : "array",
            "description" : "List of AsyncFunctionStatus objects for Async functions which are queued to execute.",
            "items" : {
              "$ref" : "#/components/schemas/AsyncFunctionStatus"
            }
          }
        }
      },
      "AsyncFunctionSingleItemQueueStatus" : {
        "type" : "object",
        "properties" : {
          "pause" : {
            "type" : "boolean"
          }
        }
      },
      "AsyncFunctionSingleItemQueueReorderRequest" : {
        "type" : "object",
        "properties" : {
          "queuedFunctionKeys" : {
            "type" : "array",
            "description" : "Sets the order of the single item async function queue.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "AuthenticationRequest" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The user requesting access to the service."
          },
          "password" : {
            "type" : "string",
            "description" : "The password credentials for the requesting user."
          },
          "workers" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of workers being used. This field is optional and if not provided then the user will get a single worker.\n"
          },
          "licenceShortName" : {
            "type" : "string",
            "description" : "The short name of the requested license. If the user fails to provide the licence short name, then the licence that is first in the list provided by the licence server will be used.\n"
          }
        },
        "required" : [ "username", "password" ]
      },
      "AuthenticationResponse" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The successfully authenticated username."
          },
          "authToken" : {
            "type" : "string",
            "description" : "The authentication token to be submitted in the header of all subsequent requests to the REST service.  The token should be included in the nuix-auth-token header field.\n"
          },
          "licenseShortName" : {
            "type" : "string",
            "description" : "The short name of the requested license."
          },
          "workersGranted" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of workers granted by the engine."
          }
        }
      },
      "InvalidPasswordException" : {
        "type" : "object",
        "properties" : {
          "userMessage" : {
            "type" : "string",
            "description" : "User friendly description of the error."
          },
          "developerMessage" : {
            "type" : "string",
            "description" : "Technical description of the error primarily used by developers."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "REST error code."
          }
        }
      },
      "AvailableWorkersException" : {
        "type" : "object",
        "properties" : {
          "userMessage" : {
            "type" : "string",
            "description" : "User friendly description of the error."
          },
          "developerMessage" : {
            "type" : "string",
            "description" : "Technical description of the error primarily used by developers."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "REST error code."
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "Additional information including why the server was unable to acquire a license.",
            "properties" : {
              "availableWorkers" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The number of workers available."
              },
              "requestedWorkers" : {
                "type" : "integer",
                "format" : "int32",
                "description" : "The number of workers requested."
              },
              "rootExceptionClass" : {
                "type" : "string",
                "description" : "The classname of the exception thrown."
              },
              "rootExceptionMessage" : {
                "type" : "string",
                "description" : "The message for the exception."
              }
            }
          }
        }
      },
      "AcquireLicenseException" : {
        "type" : "object",
        "properties" : {
          "userMessage" : {
            "type" : "string",
            "description" : "User friendly description of the error."
          },
          "developerMessage" : {
            "type" : "string",
            "description" : "Technical description of the error primarily used by developers."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "REST error code."
          },
          "additionalInfo" : {
            "type" : "object",
            "description" : "Additional information including why the server was unable to acquire a license.",
            "properties" : {
              "requestedLicense" : {
                "type" : "string",
                "description" : "The license that was requested and was unable to be acquired."
              }
            }
          }
        }
      },
      "GenericResponse" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean",
            "description" : "Returns true or false."
          }
        }
      },
      "ApplyTagListRequest" : {
        "type" : "object",
        "properties" : {
          "tagList" : {
            "type" : "array",
            "description" : "List of tags used during the operation",
            "items" : {
              "type" : "string"
            }
          },
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included.  If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string",
            "description" : "deduplicate.  Defaults to no deduplication.",
            "enum" : [ "md5", "per custodian" ]
          },
          "relationType" : {
            "type" : "string",
            "enum" : [ "family", "topTypes", "descendants" ]
          },
          "includeFamily" : {
            "type" : "boolean",
            "description" : "Includes families of items for results of provided query. Defaults to false.",
            "default" : false
          },
          "familyQuery" : {
            "type" : "string",
            "description" : "An optional query used to select family items.  Will not be used if includeFamily is true.  To exclude family items entirely, set includeFamily to false and either omit this entry or set its value to null."
          },
          "includeDuplicates" : {
            "type" : "boolean",
            "description" : "Includes duplicates of items for results of provided query. Defaults to false.",
            "default" : false
          },
          "duplicatesQuery" : {
            "type" : "string",
            "description" : "An optional query used to select duplicate items.  Will not be used if includeDuplicates is true.  To exclude duplicate items entirely, set includeDuplicates to false and either omit this entry or set its value to null."
          },
          "includeNearDuplicates" : {
            "type" : "boolean",
            "description" : "Includes near duplicates of items for results of provided query. Defaults to false.",
            "default" : false
          },
          "nearDuplicatesQuery" : {
            "type" : "string",
            "description" : "An optional query used to select near duplicate items.  Will not be used if includeNearDuplicates is true.  To exclude near duplicate items entirely, set includeNearDuplicates to false and either omit this entry or set its value to null."
          },
          "nearDuplicatesThreshold" : {
            "type" : "number",
            "description" : "The threshold used to calculate near duplicates.  Defaults to 0.5.",
            "format" : "float",
            "default" : 0.5
          },
          "threadsQuery" : {
            "type" : "string",
            "description" : "An optional query used to select thread items.  To exclude thread items entirely, either omit this entry or set its value to null."
          }
        }
      },
      "ApplyTagListResponse" : {
        "type" : "object",
        "properties" : {
          "tagList" : {
            "type" : "array",
            "description" : "List of tags used during the operation",
            "items" : {
              "type" : "string"
            }
          },
          "successfulTags" : {
            "type" : "array",
            "description" : "List of tags that successfully completed the operation",
            "items" : {
              "type" : "string"
            }
          },
          "failedTags" : {
            "type" : "array",
            "description" : "List of tags that failed the operation",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TagList" : {
        "type" : "object",
        "properties" : {
          "tagList" : {
            "type" : "array",
            "description" : "List of tags used during the operation",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "CreateTagListResponse" : {
        "type" : "object",
        "properties" : {
          "tagList" : {
            "type" : "array",
            "description" : "List of tags used during the operation",
            "items" : {
              "type" : "string"
            }
          },
          "createdTags" : {
            "type" : "array",
            "description" : "List of tags that were succuessfully created",
            "items" : {
              "type" : "string"
            }
          },
          "failedTags" : {
            "type" : "array",
            "description" : "List of tags that failed to be created",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "DeleteTagListResponse" : {
        "type" : "object",
        "properties" : {
          "tagList" : {
            "type" : "array",
            "description" : "List of tags used during the operation",
            "items" : {
              "type" : "string"
            }
          },
          "deletedTags" : {
            "type" : "array",
            "description" : "List of tags that were successfully deleted",
            "items" : {
              "type" : "string"
            }
          },
          "failedTags" : {
            "type" : "array",
            "description" : "List of tags that failed deletion",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BulkExclusionRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string"
          },
          "relationType" : {
            "type" : "string"
          },
          "includeFamily" : {
            "type" : "boolean"
          },
          "familyQuery" : {
            "type" : "string"
          },
          "includeDuplicates" : {
            "type" : "boolean"
          },
          "duplicatesQuery" : {
            "type" : "string"
          },
          "includeNearDuplicates" : {
            "type" : "boolean"
          },
          "nearDuplicatesQuery" : {
            "type" : "string"
          },
          "nearDuplicatesThreshold" : {
            "type" : "number",
            "format" : "float"
          },
          "threadsQuery" : {
            "type" : "string"
          },
          "reason" : {
            "type" : "string"
          },
          "excludeDescendants" : {
            "type" : "boolean"
          }
        }
      },
      "AsyncFunctionResponseDeprecated" : {
        "type" : "object",
        "deprecated" : true,
        "properties" : {
          "functionKey" : {
            "type" : "string",
            "description" : "The function key to use when querying status."
          },
          "location" : {
            "type" : "string",
            "description" : "The location URL for querying status.  (http://nuix-restful-service:8080/svc/v1/asyncFunctions/{functionKey})"
          }
        }
      },
      "AsyncFunctionResponse" : {
        "type" : "object",
        "properties" : {
          "functionKey" : {
            "type" : "string",
            "description" : "The function key to use when querying status."
          },
          "location" : {
            "type" : "string",
            "description" : "The location URL for querying status.  (http://nuix-restful-service:8080/svc/v1/asyncFunctions/{functionKey})"
          }
        }
      },
      "BulkInclusionRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string"
          },
          "relationType" : {
            "type" : "string"
          },
          "includeFamily" : {
            "type" : "boolean"
          },
          "familyQuery" : {
            "type" : "string"
          },
          "includeDuplicates" : {
            "type" : "boolean"
          },
          "duplicatesQuery" : {
            "type" : "string"
          },
          "includeNearDuplicates" : {
            "type" : "boolean"
          },
          "nearDuplicatesQuery" : {
            "type" : "string"
          },
          "nearDuplicatesThreshold" : {
            "type" : "number",
            "format" : "float"
          },
          "threadsQuery" : {
            "type" : "string"
          }
        }
      },
      "ClusterRunRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name to give the cluster run."
          },
          "query" : {
            "type" : "string",
            "description" : "A query that selects the items to perform cluster analysis on."
          },
          "resemblanceThreshold" : {
            "type" : "number",
            "format" : "float",
            "description" : "The resemblance threshold used for computing chained near-duplicates."
          },
          "useChainedNearDuplicates" : {
            "type" : "boolean",
            "description" : "Whether or not the clustering algorithm should use chained near-deduplication."
          },
          "useEmailThreads" : {
            "type" : "boolean",
            "description" : "Whether or not the clustering algorithm should use email threads."
          },
          "saveIfEmpty" : {
            "type" : "boolean",
            "description" : "Only create the cluster run if near-duplicates are found."
          }
        }
      },
      "MetadataItemDetails" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The metadata name."
          },
          "localisedName" : {
            "type" : "string",
            "description" : "The localized name of the metadata."
          },
          "type" : {
            "type" : "string",
            "description" : "The metadata type."
          }
        }
      },
      "SearchNativeRequest" : {
        "type" : "object",
        "properties" : {
          "caseId" : {
            "type" : "string",
            "description" : "The case identification token."
          },
          "query" : {
            "type" : "string",
            "description" : "Identifies what items should be returned.  If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "sortField" : {
            "type" : "string",
            "description" : "Any field in the metadata profile which you want to sort by."
          },
          "sortOrder" : {
            "type" : "string",
            "default" : "ASC",
            "description" : "Sets the sort order for the results. Defaults to \"ASC\"."
          },
          "startIndex" : {
            "type" : "integer",
            "default" : 0,
            "description" : "The index of the first record that should be returned. Defaults to 0.",
            "format" : "int32"
          },
          "numberOfRecordsRequested" : {
            "type" : "integer",
            "description" : "The number of records that should be returned. Defaults to all records.",
            "format" : "int32"
          },
          "deduplicate" : {
            "type" : "string",
            "description" : "Deduplicate content based on the Value field selection.  Defaults to no deduplication."
          },
          "metadataProfile" : {
            "type" : "string",
            "description" : "Defines the metadata profile to be appied to the results. Needed to get custom metadata. Defaults to no metadata profile."
          },
          "fieldList" : {
            "type" : "array",
            "description" : "List of fields to be returned for each item in the results.",
            "items" : {
              "type" : "string"
            }
          },
          "customMetadataList" : {
            "type" : "array",
            "description" : "List of custom metadata to be returned for each item in the results.",
            "items" : {
              "type" : "string"
            }
          },
          "propertyList" : {
            "type" : "array",
            "description" : "List of properties to be returned for each item in the results.",
            "items" : {
              "type" : "string"
            }
          },
          "itemParameterizedFields" : {
            "description" : "List of item parameterized fields to be returned for each item in the results.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "showAvailableThumbnails" : {
            "type" : "boolean",
            "description" : "Specifies whether to show available thumbnails.",
            "default" : false
          },
          "useCache" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Specifies whether the results should be loaded from and stored in cache. Defaults to false."
          },
          "forceCacheDelete" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Specifies whether the cached results should be deleted before performing the search. Defaults to false."
          },
          "searchRetry" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Specifies the search retry count."
          },
          "relationType" : {
            "type" : "string",
            "description" : "The relation to apply to the found items. For performance reasons, the family option is run against the top-level items."
          },
          "entities" : {
            "type" : "array",
            "description" : "List of entity names to include in response (e.g. company,email).  Maintained for backward compatibility.",
            "items" : {
              "type" : "string"
            }
          },
          "property" : {
            "type" : "array",
            "description" : "List of properties to be returned for each item in the results.  Maintained for backward compatibility.",
            "items" : {
              "type" : "string"
            }
          },
          "field" : {
            "type" : "array",
            "description" : "List of fields to be returned for each item in the results.  Mainted for backward compatibility.",
            "items" : {
              "type" : "string"
            }
          },
          "s" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the first record that should be returned.  Maintained for backward compatibility."
          },
          "p" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of records that should be returned.  Maintained for backward compatibility."
          },
          "customMetadataField" : {
            "type" : "array",
            "description" : "List of custom metadata to be returned for each item in the results.  Maintained for backward compatibility.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchNativeResult" : {
        "type" : "object",
        "properties" : {
          "request" : {
            "$ref" : "#/components/schemas/SearchNativeRequest"
          },
          "startedOn" : {
            "type" : "string",
            "description" : "Date the search started.",
            "format" : "date-time"
          },
          "completedOn" : {
            "type" : "string",
            "description" : "Date the search completed.",
            "format" : "date-time"
          },
          "elapsedTimeForSearch" : {
            "type" : "integer",
            "description" : "Elapsed time to perform search.",
            "format" : "int64"
          },
          "elapsedTimeForSort" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Elapsed time to perform the sort."
          },
          "elapsedTimeForMarshal" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Elapsed time to perform the JSON marshalling."
          },
          "elapsedTimeForDeduplicate" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Elapsed time to deduplicate items."
          },
          "elapsedTotal" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Total elapsed time."
          },
          "metadataItems" : {
            "type" : "array",
            "description" : "The list of metadata item fields.",
            "items" : {
              "type" : "string"
            },
            "deprecated" : true
          },
          "localizedMetadataItems" : {
            "description" : "The list of localized metadata item fields.",
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "deprecated" : true
          },
          "metadataItemDetails" : {
            "type" : "array",
            "description" : "The list of metadata item details.",
            "items" : {
              "$ref" : "#/components/schemas/MetadataItemDetails"
            }
          },
          "resultList" : {
            "type" : "array",
            "description" : "Results of the search",
            "items" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "count" : {
            "type" : "integer",
            "description" : "Count of items in results",
            "format" : "int32"
          },
          "deduplicatedCount" : {
            "type" : "integer",
            "description" : "Count of deduplicated items",
            "format" : "int32"
          }
        }
      },
      "BulkSearcherRequest" : {
        "type" : "object",
        "properties" : {
          "includeFamilies" : {
            "type" : "boolean",
            "description" : "Whether item families should also be matched. Defaults to false."
          },
          "deduplicateFamilies" : {
            "type" : "boolean",
            "description" : "Whether deduplicated item families should also be matched. Defaults to false."
          },
          "omitExcludedItems" : {
            "type" : "boolean",
            "description" : "Whether excluded items should be excluded from matches. Defaults to true."
          },
          "omitImmaterialFamilyItems" : {
            "type" : "boolean",
            "description" : "Whether immaterial family items should be excluded from family item and deduplicated family item matches. Defaults to true."
          },
          "tagUniqueItems" : {
            "type" : "boolean",
            "description" : "Whether to record items that only matched a single query. Defaults to false."
          },
          "matchingItemsAction" : {
            "type" : "string",
            "description" : "Action to take when a matching item is found. Tagging is performed when this option is \"ADD_TAGS\". Defaults to \"ADD_TAGS\".",
            "enum" : [ "addTags", "removeTags", "none" ]
          },
          "createUnusedTags" : {
            "type" : "boolean",
            "description" : "Whether to create tags even if no items match them. Only has effect if matchingItemsAction == \"addTags\". Defaults to false."
          },
          "removeEmptyTags" : {
            "type" : "boolean",
            "description" : "Whether to remove tags from the case if there are no longer any items that match them. Only has effect if matchingItemsAction == \"removeTags\". Defaults to false."
          },
          "showTagColumns" : {
            "type" : "boolean",
            "description" : "Whether to show the tag name columns in the results table. Defaults to true."
          },
          "allowDuplicateTags" : {
            "type" : "boolean",
            "description" : "Whether the same tag can be applied on more than one row with different queries. Defaults to true."
          },
          "allowDuplicateQueries" : {
            "type" : "boolean",
            "description" : "Whether the same query can be applied on more than one row with different tags. Defaults to true."
          },
          "missingTagsAction" : {
            "type" : "string",
            "description" : "What to do when a tag is missing in a table row. Does not affect blank rows. Defaults to FILL_WITH_QUERY.",
            "enum" : [ "fillWithQuery", "fillWithRowNumber", "showValidationError" ]
          },
          "expandTags" : {
            "type" : "boolean",
            "description" : "Whether tags for top-level item matches and family item matches should be expanded according to the tagExpansion map. Defaults to true."
          },
          "tagExpansion" : {
            "$ref" : "#/components/schemas/TagExpansion"
          },
          "scopingQuery" : {
            "type" : "string",
            "description" : "A query that restricts the scope of all queries in the file. i.e. a common query that is joined with every individual query to limit the items that it can match. Defaults to an empty string."
          },
          "searchFields" : {
            "type" : "array",
            "description" : "A list of fields to search. If null is passed in or this field is not set or empty then a list of default search fields is used (which consists of \"CONTENT\", \"PROPERTIES\", \"NAME\" and \"PATH_NAME\").",
            "items" : {
              "type" : "string",
              "enum" : [ "content", "properties", "name", "path-name", "evidence-metadata" ]
            }
          },
          "tagRequests" : {
            "type" : "array",
            "description" : "A list of tag requests to perform.",
            "items" : {
              "$ref" : "#/components/schemas/TagRequest"
            }
          }
        }
      },
      "TagExpansion" : {
        "type" : "object",
        "properties" : {
          "directMatchPrefix" : {
            "type" : "string",
            "description" : "A prefix to apply to direct matches, i.e. items that match the given query, or null not to apply a prefix. Defaults to null."
          },
          "directMatchSuffix" : {
            "type" : "string",
            "description" : "A suffix to apply to direct matches, i.e. items that match the given query, or null not to apply a suffix. Defaults to null."
          },
          "topLevelMatchPrefix" : {
            "type" : "string",
            "description" : "A prefix to apply to top-level item matches, or null not to apply a prefix. Only has an effect if includeFamilies == true. Defaults to null."
          },
          "topLevelMatchSuffix" : {
            "type" : "string",
            "description" : "A suffix to apply to top-level item matches, or null not to apply a suffix. Only has an effect if includeFamilies == true. Defaults to null."
          },
          "familyMatchPrefix" : {
            "type" : "string",
            "description" : "A prefix to apply to family item matches, or null not to apply a prefix. Only has an effect if includeFamilies == true. Defaults to null."
          },
          "familyMatchSuffix" : {
            "type" : "string",
            "description" : "A suffix to apply to family item matches, or null not to apply a suffix. Only has an effect if includeFamilies == true. Defaults to null."
          },
          "deduplicatedTopLevelMatchPrefix" : {
            "type" : "string",
            "description" : "A prefix to apply to deduplicated top-level item matches, or null not to apply a prefix. Only has an effect if deduplicateFamilies == true. Defaults to null."
          },
          "deduplicatedTopLevelMatchSuffix" : {
            "type" : "string",
            "description" : "A suffix to apply to deduplicated top-level item matches, or null not to apply a suffix. Only has an effect if deduplicateFamilies == true. Defaults to null."
          },
          "deduplicatedFamilyMatchPrefix" : {
            "type" : "string",
            "description" : "A prefix to apply to deduplicated family item matches, or null not to apply a prefix. Only has an effect if deduplicateFamilies == true. Defaults to null."
          },
          "deduplicatedFamilyMatchSuffix" : {
            "type" : "string",
            "description" : "A suffix to apply to deduplicated family item matches, or null not to apply a suffix. Only has an effect if deduplicateFamilies == true. Defaults to null."
          },
          "uniqueMatchPrefix" : {
            "type" : "string",
            "description" : "A prefix to apply to unique item matches, or null not to apply a prefix. Only has an effect if tagUniqueItems == true. Defaults to null."
          },
          "uniqueMatchSuffix" : {
            "type" : "string",
            "description" : "A suffix to apply to unique item matches, or null not to apply a prefix. Only has an effect if tagUniqueItems == true. Defaults to null."
          }
        }
      },
      "TagRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "The query to use to find matching items to tag."
          },
          "tag" : {
            "type" : "string",
            "description" : "The name of the tag to apply or create."
          }
        }
      },
      "CaseResponse" : {
        "type" : "object",
        "properties" : {
          "caseId" : {
            "type" : "string",
            "description" : "The case's unique identifier"
          },
          "name" : {
            "type" : "string",
            "description" : "The case name"
          },
          "path" : {
            "type" : "string",
            "description" : "The path to the case"
          },
          "description" : {
            "type" : "string",
            "description" : "The case description"
          },
          "investigator" : {
            "type" : "string",
            "description" : "The investigator for this case"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "The date/time this case was created, in milliseconds since epoch",
            "format" : "int64"
          },
          "compound" : {
            "type" : "boolean",
            "description" : "Whether this case is Simple or Compound"
          },
          "elastic" : {
            "type" : "boolean",
            "description" : "Whether this is an Elastic case"
          },
          "binaryStoreLocation" : {
            "type" : "string",
            "description" : "The binary store location for this case, if applicable"
          },
          "indexId" : {
            "type" : "string"
          },
          "caseSize" : {
            "type" : "integer",
            "description" : "The size of the case on disk, in bytes",
            "format" : "int64"
          },
          "casePathParent" : {
            "type" : "string",
            "description" : "Path to the parent directory of the case"
          },
          "caseInvestigationTimeZone" : {
            "type" : "string",
            "description" : "The investigation time zone, e.g. America/New_York"
          },
          "hasExclusions" : {
            "type" : "boolean"
          },
          "hasNuixSystemTags" : {
            "type" : "boolean"
          },
          "hasProductionSets" : {
            "type" : "boolean"
          },
          "hasCalculatedAuditSize" : {
            "type" : "boolean"
          },
          "caseName" : {
            "type" : "string",
            "description" : "Deprecated; use 'name' instead"
          },
          "casePath" : {
            "type" : "string",
            "description" : "Deprecated; use 'path' instead"
          },
          "caseDescription" : {
            "type" : "string",
            "description" : "Deprecated; use 'description' instead"
          },
          "caseCreationDate" : {
            "type" : "string",
            "description" : "Deprecated; use 'creationDate' instead",
            "format" : "date-time"
          },
          "caseInvestigator" : {
            "type" : "string",
            "description" : "Deprecated; use 'investigator' instead"
          }
        }
      },
      "MarkupSet" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Gets the name of the markup set."
          },
          "description" : {
            "type" : "string",
            "description" : "Gets the description of the markup set."
          },
          "redactionReason" : {
            "type" : "string",
            "description" : "Gets the redaction reason for this markup set."
          }
        }
      },
      "ClusterRunResponse" : {
        "type" : "object",
        "properties" : {
          "clusterName" : {
            "type" : "string",
            "description" : "The name of the cluster run."
          },
          "clusters" : {
            "type" : "array",
            "description" : "A list of all clusters associated with this cluster run.",
            "items" : {
              "type" : "string"
            }
          },
          "resemblanceThreshold" : {
            "type" : "number",
            "description" : "Gets the resemblance threshold associated with the cluster run, irrespective of what clustering options are set.",
            "format" : "float"
          },
          "useChainedNearDuplicatesEnabled" : {
            "type" : "boolean",
            "description" : "Gets whether or not chained near-duplicates were used during clustering."
          },
          "useEmailThreadsEnabled" : {
            "type" : "boolean",
            "description" : "Gets whether or not email threads were used during clustering."
          }
        }
      },
      "KindTypeResponse" : {
        "type" : "object",
        "properties" : {
          "itemKind" : {
            "type" : "string",
            "description" : "Gets the kind."
          },
          "localisedItemKind" : {
            "type" : "string",
            "description" : "Gets the name of this type, localised appropriately for display to users."
          },
          "itemTypes" : {
            "type" : "array",
            "description" : "Gets the collection of all types which are of this kind.",
            "items" : {
              "$ref" : "#/components/schemas/NuixItemType"
            }
          }
        }
      },
      "NuixItemType" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Gets the name of this type."
          },
          "localisedName" : {
            "type" : "string",
            "description" : "Gets the name of this type, localised appropriately for display to users."
          },
          "preferredExtension" : {
            "type" : "string",
            "description" : "Gets the preferred file extension."
          },
          "kind" : {
            "type" : "string",
            "description" : "Gets the kind."
          },
          "count" : {
            "type" : "integer",
            "description" : "Gets the count of items of this kind.",
            "format" : "int64"
          }
        }
      },
      "ReviewJobResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Gets the name of the review job."
          },
          "guid" : {
            "type" : "string",
            "description" : "Gets the GUID for this review job."
          }
        }
      },
      "CreateReviewJobOptions" : {
        "type" : "object",
        "properties" : {
          "tags" : {
            "type" : "array",
            "description" : "Tags to be used for the review job.",
            "items" : {
              "type" : "string"
            }
          },
          "highlights" : {
            "type" : "array",
            "description" : "Any words to highlight.",
            "items" : {
              "type" : "string"
            }
          },
          "order" : {
            "type" : "string",
            "description" : "Default sort order for items in a review job.  Default is orderAdded."
          },
          "useNearDuplicates" : {
            "type" : "boolean",
            "description" : "Use chained near-duplicates when batching out items to a reviewer.  Default is true."
          },
          "useEmailThreads" : {
            "type" : "boolean",
            "description" : "Use email threads when batching out items to a reviewer.  Default is false."
          }
        }
      },
      "CreateReviewJobRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the review job."
          },
          "options" : {
            "$ref" : "#/components/schemas/CreateReviewJobOptions"
          }
        }
      },
      "ReviewJobAddItemsOptions" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "type" : "string",
            "description" : "The user to assign the items to."
          }
        }
      },
      "ReviewJobAddItemsRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be added to the review job."
          },
          "options" : {
            "$ref" : "#/components/schemas/ReviewJobAddItemsOptions"
          }
        }
      },
      "NuixReviewJobItem" : {
        "type" : "object",
        "properties" : {
          "completionDateTime" : {
            "type" : "integer",
            "description" : "Returns the date the review item was completed.",
            "format" : "int64"
          },
          "item" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Returns the item"
          }
        }
      },
      "Success" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          }
        }
      },
      "ItemPropertiesRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included.  If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "distinct" : {
            "type" : "boolean",
            "description" : "If true, excludes duplicate property values from the results. Default is true."
          }
        }
      },
      "CreateCaseRequest" : {
        "type" : "object",
        "properties" : {
          "compound" : {
            "type" : "boolean",
            "description" : "Determines whether the case is simple or compound.  Default is false"
          },
          "location" : {
            "type" : "string",
            "description" : "Where the case should be created.  e.g. inventory0, or an absolute directory"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the case.  e.g. mycase"
          },
          "description" : {
            "type" : "string",
            "description" : "The case description"
          },
          "investigator" : {
            "type" : "string",
            "description" : "The case investigator"
          },
          "elasticSearchSettings" : {
            "$ref" : "#/components/schemas/ElasticSearchSettings"
          },
          "binaryStoreLocation" : {
            "type" : "string",
            "description" : "Path to file system binary store for this case. It can be shared by cases and should be accessible from all workers. Defaults to null, which means binary store will be within the on-disk portion of the case."
          }
        }
      },
      "ElasticSearchSettings" : {
        "type" : "object",
        "properties" : {
          "additionalSettings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additional ElasticSearch settings to include. This is a flattened map (e.g. 'index.refresh_interval'). This is an advanced feature and should only be used by those familiar with ElasticSearch. Values that can be directly specified elsewhere in this request will be ignored if they are provided in this map. See ElasticSearch documentation for more info."
          },
          "cluster.name" : {
            "type" : "string",
            "description" : "Name of the cluster to join. See ElasticSearch documentation for more info."
          },
          "index.number_of_shards" : {
            "type" : "integer",
            "description" : "Number of shards to allocate for the index. Must be greater than zero. Cannot be changed after creating the index. See ElasticSearch documentation for more info.",
            "format" : "int32"
          },
          "index.number_of_replicas" : {
            "type" : "integer",
            "description" : "Number of replicas to use. Must be a positive number. This can be modified after creation, but only through ElasticSearch APIs. See ElasticSearch documentation for more info.",
            "format" : "int32"
          },
          "index.refresh_interval" : {
            "type" : "string",
            "description" : "Refresh interval to use. Defaults to '60s'. See ElasticSearch documentation for more info."
          },
          "nuix.index.auto_close" : {
            "type" : "boolean",
            "description" : "Should closing the case via Nuix close the index in ElasticSearch? Defaults to 'false'."
          },
          "nuix.transport.hosts" : {
            "type" : "array",
            "description" : "List of hosts (host:port) to communicate with the cluster. This is a round-robin, load-balanced list. Other nodes may be discovered in the cluster. If this and 'discovery.zen.ping.unicast.hosts' are not provided it defaults to localhost.",
            "items" : {
              "type" : "string"
            }
          },
          "xpack.security.user" : {
            "type" : "string",
            "description" : "The X-pack user name for transport level credentials. Note the password is not included here as Elastic documentation recommends. Instead it is securely stored in a separate field xpack.security.password."
          },
          "xpack.security.password" : {
            "type" : "string",
            "description" : "The X-Pack password for the user."
          },
          "xpack.security.transport.ssl.enabled" : {
            "type" : "boolean",
            "description" : "Set this to true to enable SSL connections to nodes running X-pack."
          },
          "xpack.ssl.key" : {
            "type" : "string",
            "description" : "The path to the SSL key file for this client's identity in PEM format. It must be signed by the cluster's trusted CA to allow the cluster to trust Nuix."
          },
          "xpack.ssl.certificate" : {
            "type" : "string",
            "description" : "The path to the SSL certificate file for this client's identity in PEM format. It must be signed by the cluster's trusted CA to allow the cluster to trust Nuix."
          },
          "xpack.ssl.certificate_authorities" : {
            "type" : "string",
            "description" : "The path to the SSL CA file for this client's trusted CAs in PEM format. This CA will have signed the cluster's certificates and allows Nuix to trust the cluster."
          },
          "nuix.auth.username" : {
            "type" : "string",
            "description" : "The authenticated user's username. Used with X-Pack and SearchGuard, this can be different to the transport level credentials."
          },
          "nuix.auth.password" : {
            "type" : "string",
            "description" : "The authenticated user's password."
          },
          "searchguard.ssl.transport.keystore_filepath" : {
            "type" : "string",
            "description" : "The path to the SSL keystore for this client's identity in JKS format. It contains client's key and certificate signed by the cluster's trusted CA allowing the cluster to trust Nuix."
          },
          "searchguard.ssl.transport.keystore_password" : {
            "type" : "string",
            "description" : "The password to the keystore."
          },
          "searchguard.ssl.transport.truststore_filepath" : {
            "type" : "string",
            "description" : "The path to the SSL truststore for the client's trusted CAs in JKS format. It contains the CA certificate that signed the cluster's certificates allowing Nuix to trust the cluster."
          },
          "searchguard.ssl.transport.truststore_password" : {
            "type" : "string",
            "description" : "The password to the truststore."
          }
        }
      },
      "CaseSubsetMetadata" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the case.  If not supplied the current time in milliseconds will be used."
          },
          "description" : {
            "type" : "string",
            "description" : "The case description"
          },
          "investigator" : {
            "type" : "string",
            "description" : "The case investigator"
          }
        }
      },
      "CaseSubsetProcessingSettings" : {
        "type" : "object",
        "properties" : {
          "analysisLanguage" : {
            "type" : "string",
            "description" : "A supported language code.  en - English, ja - Japanese. Default is \"en\"."
          },
          "stopWords" : {
            "type" : "boolean",
            "description" : "stopWords.  Default is false."
          },
          "stemming" : {
            "type" : "boolean",
            "description" : "If true, stems words using English rules before indexing (e.g. \"fishing\" -> \"fish\".) If false, no stemming is performed. Default is false."
          },
          "enableExactQueries" : {
            "type" : "boolean",
            "description" : "enableExactQueries.  Default is false."
          }
        }
      },
      "CreateCaseSubsetRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included in the subset. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "location" : {
            "type" : "string",
            "description" : "Where the subset case should be created.  e.g. inventory0, or an absolute directory"
          },
          "evidenceStoreCount" : {
            "type" : "integer",
            "description" : "Specifies the maximum number of evidence stores to create.  Default is 1",
            "format" : "int32"
          },
          "includeFamilies" : {
            "type" : "boolean",
            "description" : "Include item families in export.  Default is false"
          },
          "copyTags" : {
            "type" : "boolean",
            "description" : "Copy tags from the source case to the destination case.  Default is false"
          },
          "copyComments" : {
            "type" : "boolean",
            "description" : "Copy comments from the source case to the destination case.  Default is false"
          },
          "copyCustodians" : {
            "type" : "boolean",
            "description" : "Copy custodians from the source case to the destination case.  Default is false"
          },
          "copyItemSets" : {
            "type" : "boolean",
            "description" : "Copy item sets from the source case to the destination case.  Default is false"
          },
          "copyClassifiers" : {
            "type" : "boolean",
            "description" : "Copy classifiers from the source case to the destination case.  Default is false"
          },
          "copyMarkupSets" : {
            "type" : "boolean",
            "description" : "Copy markup sets from the source case to the destination case.  Default is false"
          },
          "copyProductionSets" : {
            "type" : "boolean",
            "description" : "Copy production sets from the source case to the destination case.  Default is false"
          },
          "copyClusters" : {
            "type" : "boolean",
            "description" : "Copy clusters from the source case to the destination case.  Default is false"
          },
          "copyCustomMetadata" : {
            "type" : "boolean",
            "description" : "Copy custom metadata from the source case to the destination case.  Default is false"
          },
          "caseMetadata" : {
            "$ref" : "#/components/schemas/CaseSubsetMetadata"
          },
          "processingSettings" : {
            "$ref" : "#/components/schemas/CaseSubsetProcessingSettings"
          }
        }
      },
      "CaseMetadataField" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The metadata field name"
          },
          "type" : {
            "type" : "string",
            "description" : "The metadata field type. Will be one of:<br/>SPECIAL: Metadata defined by the application such as GUID, Name, etc.<br/>PROPERTY: Regular metadata which was stored within an item.<br/>DERIVED: Metadata identifier using an arbitrary expression.<br/>EVIDENCE: Metadata assigned at the evidence level at load time.<br/>SCRIPTED: Metadata using an arbitrary scripted expression.<br/>CUSTOM: User-defined custom metadata."
          }
        }
      },
      "BatchLoadDetailsResponse" : {
        "type" : "object",
        "properties" : {
          "batchId" : {
            "type" : "string",
            "description" : "The batch identifier."
          },
          "loadedOn" : {
            "type" : "string",
            "description" : "The date and time in milliseconds the batch was loaded.",
            "format" : "date-time"
          },
          "operatingSystem" : {
            "type" : "string",
            "description" : "The name of the operating system the batch was loaded under."
          },
          "operatingSystemArchitecture" : {
            "type" : "string",
            "description" : "The operating system architecture the batch was loaded under"
          },
          "processArchitecture" : {
            "type" : "string",
            "description" : "process architecture the batch was loaded under"
          },
          "dataSettings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "The data settings for the batch load as a map."
          },
          "dataProcessingSettings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "The data processing settings for the batch load as a map."
          },
          "parallelProcessingSettings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "The parallel processing settings for the batch load as a map"
          },
          "caseEvidenceSettings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "The case evidence settings for the batch load as a map."
          },
          "additionalSettings" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "The additional settings for the batch load as a map."
          }
        }
      },
      "CaseHistoryEventResponse" : {
        "type" : "object",
        "properties" : {
          "cancelled" : {
            "type" : "boolean",
            "description" : "Tests if the action was cancelled."
          },
          "details" : {
            "type" : "object",
            "description" : "Gets the details of the event.",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "startDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Gets the start date (and time.)"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Gets the end date (and time.)"
          },
          "failed" : {
            "type" : "boolean",
            "description" : "Tests if the action failed."
          },
          "succeeded" : {
            "type" : "boolean",
            "description" : "Tests if the action succeeded."
          },
          "type" : {
            "type" : "string",
            "description" : "Gets the type string for this event."
          },
          "username" : {
            "type" : "string",
            "description" : "Gets the user who performed the action."
          }
        }
      },
      "NmsUser" : {
        "type" : "object",
        "properties" : {
          "longName" : {
            "type" : "string",
            "description" : "The long name of the user."
          },
          "shortName" : {
            "type" : "string",
            "description" : "The short name of the user."
          }
        }
      },
      "LanguageResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The language code."
          },
          "languageName" : {
            "type" : "string",
            "description" : "The display name for the language."
          },
          "itemCount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The number of items in that language."
          }
        }
      },
      "TimezoneRequest" : {
        "type" : "object",
        "properties" : {
          "timezone" : {
            "type" : "string",
            "description" : "A valid Joda timezone ID."
          }
        }
      },
      "InvestigatorTimeZoneResponse" : {
        "type" : "object",
        "properties" : {
          "timeZone" : {
            "type" : "string",
            "description" : "Gets the time zone ID for the case's investigation time zone. You can find a list of valid timezones at: http://www.joda.org/joda-time/timezones.html"
          }
        }
      },
      "CaseDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "caseId" : {
            "type" : "string",
            "description" : "caseId"
          },
          "success" : {
            "type" : "boolean",
            "description" : "success"
          },
          "childCases" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CaseDeleteResponse"
            }
          }
        }
      },
      "MarkupSetRequest" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "A description of the markup set."
          },
          "redactionReason" : {
            "type" : "string",
            "description" : "An explaination of why the redaction was added."
          }
        }
      },
      "MarkupSetDeleteResponse" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean",
            "description" : "Gets whether the markup set was successfully deleted."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the deleted markup set."
          }
        }
      },
      "AuditStatus" : {
        "type" : "object",
        "properties" : {
          "unverifiedAuditReport" : {
            "type" : "boolean",
            "description" : "Flag indicates whether an unverified audit report exists for the case."
          },
          "verifiedAuditReports" : {
            "type" : "array",
            "description" : "The list of verified audit reports if it exists.",
            "items" : {
              "type" : "string"
            }
          },
          "auditReportFilename" : {
            "type" : "string",
            "description" : "The filename of the unverified audit report if it exists."
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "The creation date of the unverified audit report if it exists.",
            "format" : "int64"
          }
        }
      },
      "ThumbnailUtilityRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "A Nuix query to filter items."
          },
          "dimensions" : {
            "type" : "array",
            "description" : "A list of dimensions for the thumbnails to be generated. No thumnails are generated if this is not set.",
            "items" : {
              "$ref" : "#/components/schemas/ThumbnailUtilityRequestDimension"
            }
          }
        }
      },
      "ThumbnailUtilityRequestDimension" : {
        "type" : "object",
        "properties" : {
          "height" : {
            "type" : "integer",
            "description" : "Height of the thumbnail as an integer representing number of pixels.",
            "format" : "int32"
          },
          "width" : {
            "type" : "integer",
            "description" : "Width of the thumbnail as an integer representing number of pixels.",
            "format" : "int32"
          }
        }
      },
      "CaseModification" : {
        "type" : "object",
        "properties" : {
          "method" : {
            "type" : "string",
            "enum" : [ "MIGRATE" ]
          }
        }
      },
      "WordCountsRequest" : {
        "type" : "object",
        "properties" : {
          "queryList" : {
            "type" : "array",
            "description" : "The set of queries which will be executed.",
            "items" : {
              "type" : "string"
            }
          },
          "deduplication" : {
            "type" : "string",
            "description" : "The deduplication to apply over each query. Defaults to 'none'",
            "default" : "none",
            "enum" : [ "none", "md5" ]
          },
          "field" : {
            "type" : "string",
            "description" : "Specifies the field to search over each query. Defaults to all.",
            "default" : "all",
            "enum" : [ "content", "properties", "all" ]
          },
          "sort" : {
            "type" : "string",
            "description" : "Sorts the results from most frequent to least frequent. Defaults to off.",
            "default" : false,
            "enum" : [ true, false ]
          },
          "minOccurs" : {
            "type" : "integer",
            "description" : "Returns only results occurring at least this number of times.",
            "format" : "int32"
          },
          "maxOccurs" : {
            "type" : "integer",
            "description" : "Returns only results occurring at most this number of times.",
            "format" : "int32"
          },
          "minWordLength" : {
            "type" : "integer",
            "description" : "Limits results to words whose length is greater than or equal to this value.",
            "format" : "int32"
          },
          "maxWordLength" : {
            "type" : "integer",
            "description" : "Limits results to words whose length is less than or equal to this value.",
            "format" : "int32"
          },
          "filter" : {
            "type" : "string",
            "description" : "Limits results to words that match the filter.  Default is 'all'"
          },
          "maxResults" : {
            "type" : "integer",
            "description" : "Limits the size of the returned list of word counts.  Defaults to 200; use -1 for no limit.",
            "format" : "int32"
          }
        }
      },
      "WordCountsResponse" : {
        "type" : "object",
        "properties" : {
          "word" : {
            "type" : "string",
            "description" : "The word / term"
          },
          "count" : {
            "type" : "integer",
            "description" : "The frequency of the word / term",
            "format" : "int64"
          }
        }
      },
      "DeduplicationQueryListRequest" : {
        "type" : "object",
        "properties" : {
          "queryList" : {
            "type" : "array",
            "description" : "The set of queries which will be executed.",
            "items" : {
              "type" : "string"
            }
          },
          "deduplication" : {
            "type" : "string",
            "description" : "The deduplication to apply over each query. Defaults to 'none'",
            "default" : "none",
            "enum" : [ "none", "md5" ]
          }
        }
      },
      "ItemSizeResponse" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "The specified query."
          },
          "size" : {
            "type" : "integer",
            "description" : "The relevant size.",
            "format" : "int64"
          }
        }
      },
      "ItemSizesRequest" : {
        "type" : "object",
        "properties" : {
          "queryList" : {
            "type" : "array",
            "description" : "The set of queries which will be executed.",
            "items" : {
              "type" : "string"
            }
          },
          "deduplication" : {
            "type" : "string",
            "description" : "The deduplication to apply over each query. Defaults to 'none'",
            "default" : "none",
            "enum" : [ "none", "md5" ]
          },
          "sizeType" : {
            "type" : "string",
            "description" : "The size type to calculate.",
            "enum" : [ "FILE_SIZE", "AUDIT_SIZE" ]
          }
        }
      },
      "WordcountRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "field" : {
            "type" : "string",
            "description" : "Specifies the filed to search over the query. Defaults to all.",
            "default" : "all",
            "enum" : [ "content", "properties", "all" ]
          },
          "sort" : {
            "type" : "string",
            "description" : "Sorts the result from most frequent to least frequent. Defaults to off.",
            "default" : false,
            "enum" : [ false, true ]
          },
          "minOccurs" : {
            "type" : "integer",
            "description" : "Returns only results occurring at least this number of times.",
            "format" : "int32"
          },
          "maxOccurs" : {
            "type" : "integer",
            "description" : "Returns only results occurring at most this number of times. Specifying minOccurs > maxOccurs causes an exception.",
            "format" : "int32"
          },
          "minWordLength" : {
            "type" : "integer",
            "description" : "Limits results to words whose length is greater than or equal to this value.",
            "format" : "int32"
          },
          "maxWordLength" : {
            "type" : "integer",
            "description" : "Limits results to words whose length is less than or equal to this value.",
            "format" : "int32"
          },
          "deduplication" : {
            "type" : "string",
            "description" : "Specifies the deduplication to apply over the query. Defaults to none.",
            "default" : "none",
            "enum" : [ "none", "md5" ]
          },
          "filter" : {
            "type" : "string",
            "description" : "Limits returned word counts to the types specified."
          },
          "maxResults" : {
            "type" : "integer",
            "description" : "Limits the size of the returned list of word counts.",
            "format" : "int32"
          }
        }
      },
      "FamilyStatisticsResponse" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "The specified query"
          },
          "auditSize" : {
            "type" : "integer",
            "description" : "The total audit size of all family items",
            "format" : "int64"
          },
          "itemCount" : {
            "type" : "integer",
            "description" : "The total number of family items",
            "format" : "int64"
          },
          "auditItemCount" : {
            "type" : "integer",
            "description" : "The total number of family items which are audited (excludes immaterial items)",
            "format" : "int64"
          }
        }
      },
      "CountResponse" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "The count of the items in the query.",
            "format" : "int64"
          },
          "query" : {
            "type" : "string",
            "description" : "The query submitted."
          },
          "casePath" : {
            "type" : "string",
            "description" : "The absolute path of the case."
          },
          "caseGuid" : {
            "type" : "string",
            "description" : "The case identifier."
          }
        }
      },
      "CountRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Identifies what items should be returned. If a query is not supplied it defaults to an empty string, which returns all items."
          }
        }
      },
      "CustomMetadataRequest" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "The name of the custom metadata field"
          },
          "value" : {
            "type" : "object",
            "description" : "The value of the custom metadata field"
          },
          "type" : {
            "type" : "string",
            "description" : "The data type of the field"
          },
          "mode" : {
            "type" : "string",
            "description" : "The custom metadata mode"
          },
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Any parameters required to parse the value field"
          }
        }
      },
      "CustomMetadataFieldResponse" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "fieldName"
          },
          "options" : {
            "type" : "array",
            "description" : "The allowable option values",
            "items" : {
              "type" : "object"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "type"
          },
          "mode" : {
            "type" : "string",
            "description" : "mode"
          },
          "defaultValue" : {
            "type" : "object",
            "description" : "The default value"
          },
          "isNullAllowed" : {
            "type" : "boolean",
            "description" : "true if a null value is allowed, false otherwise"
          }
        }
      },
      "CustomMetadataResponse" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "The name of the custom metadata field"
          },
          "value" : {
            "type" : "object",
            "description" : "The value of the custom metadata field"
          },
          "type" : {
            "type" : "string",
            "description" : "The data type of the field"
          },
          "mode" : {
            "type" : "string",
            "description" : "The custom metadata mode"
          },
          "template" : {
            "type" : "string",
            "description" : "The name of the custom metadata template that applies to the given custom metadata field"
          },
          "fieldTemplate" : {
            "$ref" : "#/components/schemas/CustomMetadataFieldResponse"
          }
        }
      },
      "BulkItemCustomMetadataRequest" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "The name of the custom metadata field"
          },
          "value" : {
            "type" : "object",
            "description" : "The value of the custom metadata field"
          },
          "type" : {
            "type" : "string",
            "description" : "The data type of the field"
          },
          "mode" : {
            "type" : "string",
            "description" : "The custom metadata mode"
          },
          "params" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Any parameters required to parse the value field"
          },
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          }
        }
      },
      "ApplyCustomMetadataResponse" : {
        "type" : "object",
        "properties" : {
          "failedItems" : {
            "type" : "array",
            "description" : "List of item GUIDs that failed the operation",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BulkItemCustomMetadataDeleteRequest" : {
        "type" : "object",
        "properties" : {
          "fieldName" : {
            "type" : "string",
            "description" : "The name of the custom metadata field"
          },
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string",
            "description" : "Result of the query can optionally be deduplicated. Options are 'md5' and 'per custodian'."
          },
          "relationType" : {
            "type" : "string",
            "description" : "Result of the deduplicated query can be applied to related items of the items.  Options are 'topTypes', 'family', and 'descendants'"
          }
        }
      },
      "ExportOptions" : {
        "type" : "object",
        "properties" : {
          "productOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "= { <span class=\"propName propOpt\">naming</span>(<span class=\"propType\">array[string]</span>, optional)=['document_id' or 'document_id_with_page' or 'page_only' or 'full' or 'full_with_periods' or 'item_name' or 'item_name_with_path' or 'guid' or 'md5']: Selects the type of naming to apply to the produced files: Defaults to item_name_with_path,<br/><span class=\"propName propOpt\">path</span>(<span class=\"propType\">string</span>, optional): Specifies the path to place the produced files,<br/><span class=\"propName propOpt\">suffix</span>(<span class=\"propType\">string</span>, optional): Specifies the file name suffixDefaults to none,<br/><span class=\"propName propOpt\">mailFormat</span>(<span class=\"propType\">array[string]</span>)=['native' or 'eml' or 'html' or 'mime_html' or 'msg''dxl' or 'mbox' or 'pst' or 'nsf']: Selects the format for native exports of emails.  Defaults to native,<br/><span class=\"propName propOpt\">includeAttachments</span>(<span class=\"propType\">boolean</span>, optional): Defaults to true,<br/><span class=\"propName propOpt\">regenerateStored</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">wrapLines</span>(<span class=\"propType\">integer</span>, optional): Specifies the column to wrap text files at,<br/><span class=\"propName propOpt\">perPage</span>(<span class=\"propType\">boolean</span>, optional): If false, the entire text for an item will be put in a single fileDefaults to false,<br/><span class=\"propName propOpt\">lineSeparator</span>(<span class=\"propType\">string</span>): Defaults to System.lineSeparator(),<br/><span class=\"propName propOpt\">encoding</span>(<span class=\"propType\">string</span>): Defaults to UTF-8,<br/><span class=\"propName propOpt\">multiPageTiff</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">tiffDpi</span>(<span class=\"propType\">integer</span>, optional): tiffDpi,<br/><span class=\"propName propOpt\">tiffFormat</span>(<span class=\"propType\">array[string], optional</span>)=['MONOCHROME_CCITT_T6_G4' or 'GREYSCALE_UNCOMPRESSED' or 'GREYSCALE_DEFLATE' or 'GREYSCALE_LZW' or 'COLOUR_UNCOMPRESSED' or 'COLOUR_DEFLATE' or 'COLOUR_LZW']: Defaults to MONOCHROME_CCITT_T6_G4<br/> }"
          },
          "loadFileOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "= { <span class=\"propName propOpt\">metadataProfile</span>(<span class=\"propType\">string</span>, optional): Any metadata profile name,<br/><span class=\"propName propOpt\">encoding</span>(<span class=\"propType\">string</span>, optional): Defaults to UTF-8,<br/><span class=\"propName propOpt\">lineSeparator</span>(<span class=\"propType\">string</span>, optional): Defaults to System.lineSeparator(),<br/><span class=\"propName propOpt\">pathSeparator</span>(<span class=\"propType\">string</span>, optional): Defaults to File.separator,<br/><span class=\"propName propOpt\">loadFileEntryLimit</span>(<span class=\"propType\">integer</span>, optional): The maximum number of items in a load file before items are rolled over into a new one,<br/><span class=\"propName propOpt\">loadFileByteLimit</span>(<span class=\"propType\">integer</span>, optional): The maximum size of the load file as a long, in bytes before items are rolled over into a new one,<br/><span class=\"propName propOpt\">version</span>(<span class=\"propType\">string</span>, optional): version,<br/><span class=\"propName propOpt\">inheritDates</span>(<span class=\"propType\">boolean</span>, optional): Ringtail.  Defaults to false,<br/><span class=\"propName propOpt\">removeCommas</span>(<span class=\"propType\">boolean</span>, optional): Ringtail.  Defaults to false,<br/><span class=\"propName propOpt\">directParent</span>(<span class=\"propType\">boolean</span>, optional): Ringtail.  Defaults to false,<br/><span class=\"propName propOpt\">useDocumentId</span>(<span class=\"propType\">boolean</span>, optional): Ringtail.  Defaults to false,<br/><span class=\"propName propOpt\">useNativePageCount</span>(<span class=\"propType\">boolean</span>, optional): Ringtail.  Defaults to false,<br/><span class=\"propName propOpt\">mappingLocation</span>(<span class=\"propType\">string</span>, optional): Ringtail,<br/><span class=\"propName propOpt\">userName</span>(<span class=\"propType\">string</span>, optional): Relativity username,<br/><span class=\"propName propOpt\">password</span>(<span class=\"propType\">string</span>, optional): Relativity password,<br/><span class=\"propName propOpt\">workspaceId</span>(<span class=\"propType\">string</span>, optional): Relativity workspaceId,<br/><span class=\"propName propOpt\">folderId</span>(<span class=\"propType\">string</span>, optional): Relativity folder ID,<br/><span class=\"propName propOpt\">accessibleDirectory</span>(<span class=\"propType\">string</span>, optional): The absolute path to a directory that is accessible by Relativity,<br/><span class=\"propName propOpt\">kweLocation</span>(<span class=\"propType\">string</span>, optional): The location of the KWE file,<br/><span class=\"propName propOpt\">nrmMappingLocation</span>(<span class=\"propType\">string</span>, optional): The location of the Nuix Relativity Mapping (NRM) file,<br/><span class=\"propName propOpt\">nrmSettingsLocation</span>(<span class=\"propType\">string</span>, optional): The location of the Nuix settings file,<br/><span class=\"propName propOpt\">url</span>(<span class=\"propType\">string</span>, optional): The Relativity URL,<br/><span class=\"propName propOpt\">certValue</span>(<span class=\"propType\">string</span>, optional): The Relativity certValue,<br/><span class=\"propName propOpt\">endpointType</span>(<span class=\"propType\">string</span>, optional): The Relativity Endpoint Type,<br/> }"
          },
          "imagingOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "= { <span class=\"propName propOpt\">imageExcelSpreadsheets</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">slipSheetContainers</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">excelExportEngine</span>(<span class=\"propType\">array[string]</span>, optional)=['MS_OFFICE' or 'INTERNAL']: Defaults to INTERNAL,<br/><span class=\"propName propOpt\">excelPrintHiddenRows</span>(<span class=\"propType\">boolean</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">excelPrintHiddenColumns</span>(<span class=\"propType\">boolean</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">excelPrintHiddenWorksheets</span>(<span class=\"propType\">array[string]</span>, optional)=['SHEET_HIDDEN' or 'SHEET_VERY_HIDDEN']:Defaults to SHEET_VERY_HIDDEN,<br/><span class=\"propName propOpt\">excelPrintHiddenWorksheets</span>(<span class=\"propType\">boolean</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">excelPrintComments</span>(<span class=\"propType\">array[string]</span>, optional)=['PRINT_IN_PLACE' or 'PRINT_NO_COMMENTS' or 'PRINT_SHEETEND']:Defaults to null,<br/><span class=\"propName propOpt\">excelPaperSize</span>(<span class=\"propType\">array[string]</span>, optional)=['PAPER_10x14' or 'PAPER_11x17' or 'PAPER_A3' or 'PAPER_A4' or 'PAPER_A4Small' or 'PAPER_A5' or 'PAPER_B4' or 'PAPER_B5' or 'PAPER_Csheet' or 'PAPER_Dsheet' or 'PAPER_Envelope10' or 'PAPER_Envelope11' or 'PAPER_Envelope12' or 'PAPER_Envelope14' or 'PAPER_Envelope9' or 'PAPER_EnvelopeB4' or 'PAPER_EnvelopeB5' or 'PAPER_EnvelopeB6' or 'PAPER_EnvelopeC3' or 'PAPER_EnvelopeC4' or 'PAPER_EnvelopeC5' or 'PAPER_EnvelopeC6' or 'PAPER_EnvelopeC65' or 'PAPER_EnvelopeDL' or 'PAPER_EnvelopeItaly' or 'PAPER_EnvelopeMonarch' or 'PAPER_EnvelopePersonal' or 'PAPER_Esheet' or 'PAPER_Executive' or 'PAPER_FanfoldLegalGerman' or 'PAPER_FanfoldStdGerman' or 'PAPER_FanfoldUS' or 'PAPER_Folio' or 'PAPER_Ledger' or 'PAPER_Legal' or 'PAPER_Letter' or 'PAPER_LetterSmall' or 'PAPER_Note' or 'PAPER_Quarto' or 'PAPER_Statement' or 'PAPER_Tabloid']:Defaults to null,<br/><span class=\"propName propOpt\">excelPageOrientation</span>(<span class=\"propType\">array[string]</span>, optional)=['PORTRAIT' or 'LANDSCAPE']: Defaults to null,<br/><span class=\"propName propOpt\">excelPageZoom</span>(<span class=\"propType\">array[string]</span>, optional)=['PERCENT_10' or 'PERCENT_25' or 'PERCENT_50' or 'PERCENT_75' or 'PERCENT_100' or 'PERCENT_125' or 'PERCENT_150' or 'PERCENT_200' or 'PERCENT_400']:Defaults to null ,<br/><span class=\"propName propOpt\">excelFitToPagesTall</span>(<span class=\"propType\">integer</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">excelFitToPagesWide</span>(<span class=\"propType\">integer</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">excelWorksheetPrintArea</span>(<span class=\"propType\">array[string]</span>, optional): Empty string for entire worksheet or standard excel range string,<br/><span class=\"propName propOpt\">excelPageNumberLimit</span>(<span class=\"propType\">integer</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">excelPrintGridlines</span>(<span class=\"propType\">boolean</span>, optional): Defaults to true,<br/><span class=\"propName propOpt\">excelPrintHeadings</span>(<span class=\"propType\">boolean</span>, optional): Defaults to true,<br/><span class=\"propName propOpt\">wordExportEngine</span>(<span class=\"propType\">array[string]</span>, optional)=['MS_OFFICE' or 'INTERNAL']: Defaults to INTERNAL,<br/><span class=\"propName propOpt\">wordShowMarkup</span>(<span class=\"propType\">boolean</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">wordShowHiddenText</span>(<span class=\"propType\">boolean</span>, optional): Defaults to null,<br/><span class=\"propName propOpt\">powerpointExportEngine</span>(<span class=\"propType\">array[string]</span>, optional)=['MS_OFFICE' or 'INTERNAL']: Defaults to INTERNAL,<br/><span class=\"propName propOpt\">powerpointPrintOutputType</span>(<span class=\"propType\">array[string]</span>, optional)=['PRINT_OUTPUT_BUILD_SLIDES' or 'PRINT_OUTPUT_FOUR_SLIDE_HANDOUTS' or 'PRINT_OUTPUT_NINE_SLIDE_HANDOUTS' or 'PRINT_OUTPUT_NOTES_PAGES' or 'PRINT_OUTPUT_ONE_SLIDE_HANDOUTS' or 'PRINT_OUTPUT_OUTLINE' or 'PRINT_OUTPUT_SIX_SLIDE_HANDOUTS' or 'PRINT_OUTPUT_SLIDES' or 'PRINT_OUTPUT_THREE_SLIDE_HANDOUTS' or 'PRINT_OUTPUT_TWO_SLIDE_HANDOUTS']:Defaults to PRINT_OUTPUT_SLIDES,<br/><span class=\"propName propOpt\">slipSheetMetadataProfile</span>(<span class=\"propType\">string</span>, optional): Defaults to null<br/> }"
          },
          "numberingOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "= { <span class=\"propName propOpt\">createProductionSet</span>(<span class=\"propType\">boolean</span>, optional): Defaults to true,<br/><span class=\"propName propOpt\">delimiter</span>(<span class=\"propType\">array[string]</span>, optional): Defaults to \".\"<br/><span class=\"propName propOpt\">groupDocumentPages</span>(<span class=\"propType\">boolean</span>, optional): Defaults to true,<br/><span class=\"propName propOpt\">groupFamilyItems</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">prefix</span>(<span class=\"propType\">string</span>, optional): Any string.  Defaults to null }"
          },
          "stampingOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "= { <span class=\"propName propOpt\">headerLine</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">footerLine</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">increasePageSize</span>(<span class=\"propType\">boolean</span>, optional): Defaults to false,<br/><span class=\"propName propOpt\">type</span>(<span class=\"propType\">array[string]</span>)=['name' or 'guid' or 'document_number' or 'first_document_number' or 'page_number' or 'page_count' or 'item_id' or 'produced_by' or 'md5' or 'sha1' or 'sha256' or 'document_id' or 'production_set_name' or 'custom']<br/><span class=\"propName propOpt\">customText</span>(<span class=\"propType\">string</span>, optional): Specifies the custom text to put in the header when type is custom<br/><span class=\"propName propOpt\">metadataItem</span>(<span class=\"propType\">string</span>, optional): Specifies the metadata column to put in the header when type is metadata<br/> }"
          },
          "traversalOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "= { <span class=\"propName propOpt\">strategy</span>(<span class=\"propType\">array[string]</span>, optional)=['items' or 'items_and_descendants' or 'top_level_items' or 'top_level_items_and_descendants' or 'deduplicated_top_level_items' or 'deduplicated_top_level_items_and_descendants']: Defaults to items<br/><span class=\"propName propOpt\">deduplication</span>(<span class=\"propType\">array[string]</span>, optional)=['none' or 'md5' or 'md5_per_custodian']: Defaults to none<br/><span class=\"propName propOpt\">sortOrder</span>(<span class=\"propType\">array[string]</span>, optional)=['none' or 'position' or 'top_level_item_date' or 'top_level_item_date_descending' or 'document_id']: Defaults to none if strategy is items otherwise positionDefaults to none<br/> }"
          }
        }
      },
      "ExportRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The folder ID.  A folder with this ID will be created under the export path"
          },
          "productionSets" : {
            "type" : "array",
            "description" : "The production set GUIDs to export",
            "items" : {
              "type" : "string"
            }
          },
          "productTypes" : {
            "type" : "array",
            "description" : "Defaults to NATIVE",
            "items" : {
              "type" : "string",
              "enum" : [ "native", "text", "pdf", "tiff", "xhtml_report", "thumbnail" ]
            }
          },
          "loadFileTypes" : {
            "type" : "array",
            "description" : "The load file types to add to the export.  By default, no load file types are selected",
            "items" : {
              "type" : "string",
              "enum" : [ "concordance", "summation", "discovery_radar", "documatrix", "edrm_xml", "ipro", "ringtail", "xhtml_summary_report", "csv_summary_report" ]
            }
          },
          "queries" : {
            "type" : "array",
            "description" : "The list of queries to export.  Only applicable for ITEM exports",
            "items" : {
              "type" : "string"
            }
          },
          "exportType" : {
            "type" : "string",
            "description" : "Defaults to ITEM",
            "enum" : [ "item", "legal" ]
          },
          "path" : {
            "type" : "string",
            "description" : "Root export path folder"
          },
          "exportOptions" : {
            "$ref" : "#/components/schemas/ExportOptions"
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          }
        }
      },
      "ParallelProcessingSettings" : {
        "type" : "object",
        "properties" : {
          "workerCount" : {
            "type" : "integer",
            "description" : "Number of worker processes to use. This defaults to number of CPU cores on the machine. This value is also limited by settings in the current licence / session.",
            "format" : "int32"
          },
          "workerMemory" : {
            "type" : "integer",
            "description" : "Maximum amount of memory to allocate to each worker process in megabytes. The provided value must be &gt;= 768. Default is calculated based on the number of workers and available machine memory.",
            "format" : "int32"
          },
          "workerTemp" : {
            "type" : "string",
            "description" : "Base directory that workers will use to store temporary files generated during process. Can be a string file path, File, Path or URI. The default is a directory under the case directory."
          },
          "embedBroker" : {
            "type" : "boolean",
            "description" : "If true, the JMS broker will be run within the current process,otherwise it will be run in a new process. Default is true."
          },
          "brokerMemory" : {
            "type" : "integer",
            "description" : "Amount of memory to allocate to the JMS broker when it is run in a separate process. The provided value must be &gt;= 768. Default is 4096.",
            "format" : "int32"
          },
          "workerBrokerAddress" : {
            "type" : "string",
            "description" : "Worker broker address in the format host:port. "
          },
          "useRemoteWorkers" : {
            "type" : "boolean"
          }
        }
      },
      "SlipsheetsRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "metadataProfile" : {
            "type" : "string",
            "description" : "Defines the metadata profile to be used when generating slipsheets.  Defaults to no metadata profile."
          }
        }
      },
      "JsonPrimitiveWrapperString" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      },
      "BulkIngestionRequest" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "description" : "Sets the processing settings for individual mime types.",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "description" : "Sets the settings used to apply a keystore file to the ingestion.",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean",
            "description" : "If true, the case's Evidence Repositories will be rescanned to discover new Evidence Containers within them and new files within existing Evidence Containers which are themselves within the cases's Evidence Repositories. Default is false."
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile.",
            "deprecated" : true
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "repositories" : {
            "type" : "array",
            "description" : "The list of evidence repositories to create",
            "items" : {
              "$ref" : "#/components/schemas/EvidenceRepository"
            }
          },
          "containers" : {
            "type" : "array",
            "description" : "The list of evidence containers to create",
            "items" : {
              "$ref" : "#/components/schemas/EvidenceContainerWithTargets"
            }
          }
        }
      },
      "EvidenceContainerWithTargets" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Sets the name for the evidence container that is created during ingestion."
          },
          "customMetadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Sets a map of custom metadata for the evidence container."
          },
          "encoding" : {
            "type" : "string",
            "description" : "Sets the encoding for the evidence container. If the encoding is not set the default system encoding will be used."
          },
          "custodian" : {
            "type" : "string",
            "description" : "Sets the name of the initial custodian for the data."
          },
          "timeZone" : {
            "type" : "string",
            "description" : "Sets the time zone for the evidence container. If the time zone is not set the system's default time zone will be used."
          },
          "description" : {
            "type" : "string",
            "description" : "Sets the description for the evidence container."
          },
          "locale" : {
            "type" : "string",
            "description" : "Sets the locale for the evidence container. Some file types and named entities require a locale for them to be ingested accurately. If not set then the system's default locale will be used. Format is that required by IETF BCP 47 (e.g. 'en-US')."
          },
          "files" : {
            "type" : "array",
            "description" : "A list of ingestible files to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleFile"
            }
          },
          "exchangeMailboxes" : {
            "type" : "array",
            "description" : "A list of ingestible exchange mailboxes to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleExchangeMailbox"
            }
          },
          "s3Buckets" : {
            "type" : "array",
            "description" : "A list of ingestible S3 buckets to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleS3Bucket"
            }
          },
          "sqlServers" : {
            "type" : "array",
            "description" : "A list of ingestible SQL servers to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleSQLServer"
            }
          },
          "enterpriseVaults" : {
            "type" : "array",
            "description" : "A list of ingestible enterprise vaults to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleEnterpriseVault"
            }
          },
          "sharepointSites" : {
            "type" : "array",
            "description" : "A list of ingestible sharepoint sites to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleSharepoint"
            }
          },
          "mailStores" : {
            "type" : "array",
            "description" : "A list of ingestible mail stores to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleMailStore"
            }
          },
          "loadFiles" : {
            "type" : "array",
            "description" : "A list of ingestible load files to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleLoadFile"
            }
          },
          "centeraClusters" : {
            "type" : "array",
            "description" : "A list of ingestible centera clusters to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleCenteraCluster"
            }
          },
          "splitFiles" : {
            "type" : "array",
            "description" : "A list of ingestible split files to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleSplitFileList"
            }
          },
          "dropboxes" : {
            "type" : "array",
            "description" : "A list of ingestible Dropbox accounts to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleDropbox"
            }
          },
          "sshServers" : {
            "type" : "array",
            "description" : "A list of SSH-based servers to ingest.",
            "items" : {
              "$ref" : "#/components/schemas/IngestibleSSH"
            }
          }
        }
      },
      "EvidenceRepository" : {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "description" : "The path of the evidence repository folder. Each folder or file immediately inside this path will become a new evidence container."
          },
          "custodianLevel" : {
            "type" : "integer",
            "description" : "If custodian names are present in the repository, this is a positive integer of the number of folder levels nesting inside the repository where custodians are defined. For example custodianLevel = 1 indicates that each folder immediately inside the repository folder is a custodian name, while custodianLevel = 2 indicates that each folder nested two levels inside the repository folder is a custodian name. If the repository does not contain custodian names then this parameter can be either omitted or set to -1.",
            "default" : -1,
            "format" : "int32"
          },
          "evidenceContainerNaming" : {
            "type" : "string",
            "enum" : [ "content", "numbered" ],
            "default" : "content",
            "description" : "If \"content\" then evidence containers created from folders or files in the evidence repository will take their name from those folders and files (this was the only behaviour prior to Nuix 6.2), if \"numbered\" then evidence containers will be given sequentially numbered names instead."
          },
          "evidenceContainerNamingPrefix" : {
            "type" : "string",
            "description" : "If not null then all evidence containers created will have the given prefix appended to the beginning of their name. For example to obtain Nuix's default evidence naming scheme of \"Evidence 1\", \"Evidence 2\", \"Evidence 3\", etc you would use evidenceContainerNamingPrefix=\"Evidence \",evidenceContainerNaming=\"numbered\" (note the trailing space in the prefix string)."
          },
          "timeZone" : {
            "type" : "string",
            "description" : "Sets the repository time zone."
          },
          "charset" : {
            "type" : "string",
            "description" : "Sets the repository character set."
          },
          "language" : {
            "type" : "string",
            "description" : "Sets the repository language."
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Sets the repository country code."
          }
        }
      },
      "IngestibleCenteraCluster" : {
        "type" : "object",
        "properties" : {
          "ipsFile" : {
            "type" : "string",
            "description" : "Location of a file containing IP addresses separated by new-line characters. Both File and String instances are supported."
          },
          "clipsFile" : {
            "type" : "string",
            "description" : "Location of a file containing Centera Clip IDs separated by new-line characters. Both File and String instances are supported."
          }
        }
      },
      "IngestibleDropbox" : {
        "type" : "object",
        "properties" : {
          "authCode" : {
            "type" : "string",
            "description" : "A string retrieved via a webpage on Dropbox that enables access to an account. The account credentials are provided only to Dropbox. To get the URL pass dropbox without this parameter, then get the authCode by following the instructions at the URL provided in the MissingAccessTokenException and invoke this method again using the retrieved authCode parameter. These codes have an expiry time of the order of minutes."
          },
          "team" : {
            "type" : "boolean",
            "description" : "Whether or not a Dropbox team is being ingested.  This optional parameter should be present and set to true for all invocations when adding a Dropbox team to evidence. It can be omitted to add an individual Dropbox account."
          },
          "accessToken" : {
            "type" : "string",
            "description" : "A string retrieved using the authCode that enables access to an account. For dropbox, if the access token to an account is already known, provide it directly using this parameter instead of authCode. This code doesn't expire unless the account owner revokes access for Nuix."
          }
        }
      },
      "IngestibleEnterpriseVault" : {
        "type" : "object",
        "properties" : {
          "computer" : {
            "type" : "string",
            "description" : "The hostname or IP address of the target server."
          },
          "from" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to a date range beginning from the specified date/time. It must be accompanied by the 'to' parameter.",
            "format" : "date-time"
          },
          "to" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to a date range ending at the specified date/time. It must be accompanied by the 'from' parameter.",
            "format" : "date-time"
          },
          "vault" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to the specified Enterprise Vault vault."
          },
          "archive" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to the specified Enterprise Vault archive."
          },
          "custodian" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to the specified custodian or author."
          },
          "keywords" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to results matching Enterprise Vault's query using the words in this string. Subject and message/document content are searched by Enterprise Vault and it will match any word in the string unless specified differently in the flag parameter."
          },
          "flag" : {
            "type" : "string",
            "description" : "This optional parameter specifies how keywords are combined and treated for keyword-based queries. It must be accompanied by the 'keywords' parameter but will default to any if it is omitted. A value from any, all, allnear, phrase, begins, beginany, exact, exactany, ends, endsany."
          }
        }
      },
      "IngestibleExchangeMailbox" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The username needed to access the server account."
          },
          "password" : {
            "type" : "string",
            "description" : "The password needed to access the server account."
          },
          "uri" : {
            "type" : "string",
            "description" : "Protocol, host, port and path can all be specified. For SharePoint the address is the site address. For Exchange the address is the path to the Exchange Web Service (e.g., https://ex2010/ews/exchange.asmx) and it can be omitted to use auto-discovery based on the mailbox or username address."
          },
          "domain" : {
            "type" : "string",
            "description" : "This optional parameter defines the Windows networking domain of the server account."
          },
          "to" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to a date range ending at the specified date/time. It must be accompanied by the 'from' parameter.",
            "format" : "date-time"
          },
          "from" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to a date range beginning from the specified date/time. It must be accompanied by the 'to' parameter.",
            "format" : "date-time"
          },
          "mailbox" : {
            "type" : "string",
            "description" : "The mailbox (specified by email address) to ingest if it differs from the username."
          },
          "impersonating" : {
            "type" : "boolean",
            "description" : "Instructs Exchange to impersonate the mailbox user instead of delegating when the mailbox and username are different. Defaults to false."
          },
          "mailboxRetrieval" : {
            "type" : "array",
            "description" : "A list containing one or more of the following string values: mailbox, archive, purges, deletions, recoverable_items, archive_purges, archive_deletions, archive_recoverable_items, public_folders. Determines whether to extract from the user's mailbox, archive, recoverable items.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "IngestibleFile" : {
        "type" : "object",
        "properties" : {
          "path" : {
            "type" : "string",
            "description" : "Absolute path to the directory or file to be ingested."
          }
        },
        "required" : [ "path" ]
      },
      "IngestibleLoadFile" : {
        "type" : "object",
        "properties" : {
          "csvFile" : {
            "type" : "string",
            "description" : "Location of a UTF-8 encoded CSV file containing an ITEMPATH column with values containing relative paths to the native items. Currently all other columns become metadata for that item. Not used if missing, but one load file type is required."
          },
          "idxFile" : {
            "type" : "string",
            "description" : "Location of a UTF-8 encoded IDX file. Not used if missing, but one load file type is required."
          }
        }
      },
      "IngestibleMailStore" : {
        "type" : "object",
        "properties" : {
          "protocol" : {
            "type" : "string",
            "description" : "Mailstore protocol, supported values: pop, pops, imap, imaps, gwta."
          },
          "host" : {
            "type" : "string",
            "description" : "The host server IP or hostname."
          },
          "port" : {
            "type" : "integer",
            "description" : "The port number.",
            "format" : "int32"
          },
          "username" : {
            "type" : "string",
            "description" : "The username for the mail store."
          },
          "password" : {
            "type" : "string",
            "description" : "The password."
          }
        }
      },
      "IngestibleS3Bucket" : {
        "type" : "object",
        "properties" : {
          "access" : {
            "type" : "string",
            "description" : "This parameter specifies the access key ID for an Amazon Web Service account."
          },
          "secret" : {
            "type" : "string",
            "description" : "This parameter specifies the secret access key for an Amazon Web Service account."
          },
          "bucket" : {
            "type" : "string",
            "description" : "This optional parameter specifies a bucket and optionally a path to a folder within the bucket that contains the evidence to ingest. For example, 'com.nuix.mybucket/top folder/sub folder'. Omitting this parameter will cause all buckets to be added to evidence."
          },
          "endpoint" : {
            "type" : "string",
            "description" : "This optional parameter specifies a particular Amazon Web Service server endpoint. This can be used to connect to a particular regional server e.g., https://s3.amazonaws.com."
          }
        }
      },
      "IngestibleSQLServer" : {
        "type" : "object",
        "properties" : {
          "domain" : {
            "type" : "string",
            "description" : "This optional parameter defines the Windows networking domain of the server account."
          },
          "username" : {
            "type" : "string",
            "description" : "The username needed to access the server account."
          },
          "password" : {
            "type" : "string",
            "description" : "The password needed to access the server account."
          },
          "computer" : {
            "type" : "string",
            "description" : "The hostname or IP address of the target server."
          },
          "instance" : {
            "type" : "string",
            "description" : "This parameter specifies the database instance."
          },
          "query" : {
            "type" : "string",
            "description" : "This optional parameter specifies the SQL query used to filter the content."
          }
        }
      },
      "IngestibleSSH" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The username needed to access the server account."
          },
          "password" : {
            "type" : "string",
            "description" : "The password needed to access the server account."
          },
          "computer" : {
            "type" : "string",
            "description" : "The hostname or IP address of the target server."
          },
          "sudoPassword" : {
            "type" : "string",
            "description" : "The password needed to access protected files when using SSH key based authentication."
          },
          "keyFolder" : {
            "type" : "string",
            "description" : "Points to a folder on the local system which holds the SSH authentication key pairs."
          },
          "portNumber" : {
            "type" : "integer",
            "description" : "The port number to connect on.",
            "format" : "int32"
          },
          "hostFingerprint" : {
            "type" : "string",
            "description" : "The expected host fingerprint for the host being connected to. If this value is not set then any host fingerpint will be allowed, leaving the possibility of a man in the middle attack on the connection."
          },
          "remoteFolder" : {
            "type" : "string",
            "description" : "This optional parameter limits the evidence to items underneath this starting folder."
          },
          "accessingRemoteDisks" : {
            "type" : "boolean",
            "description" : "When set to true remote disks (e.g. '/dev/sda1') will be exposed as evidence instead of the remote system's file system structure."
          }
        }
      },
      "IngestibleSharepoint" : {
        "type" : "object",
        "properties" : {
          "domain" : {
            "type" : "string",
            "description" : "This optional parameter defines the Windows networking domain of the server account."
          },
          "username" : {
            "type" : "string",
            "description" : "The username needed to access the server account."
          },
          "password" : {
            "type" : "string",
            "description" : "The password needed to access the server account."
          },
          "uri" : {
            "type" : "string",
            "description" : "Protocol, host, port and path can all be specified. For SharePoint the address is the site address.  It can be omitted to use auto-discovery based on site address."
          }
        }
      },
      "IngestibleSplitFileList" : {
        "type" : "object",
        "properties" : {
          "files" : {
            "type" : "array",
            "description" : "The list of files to add. Absolute paths are recommended.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "KeyStoreKeyParameters" : {
        "type" : "object",
        "properties" : {
          "filePassword" : {
            "type" : "string",
            "description" : "Specifies the password protecting the file (e.g. for PKCS#12)"
          },
          "keyPasswords" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specifies the passwords protecting individual keys when extracting multiple password-protected keys from a single file."
          },
          "target" : {
            "type" : "string",
            "description" : "For Lotus Notes ID files, this value should contain the file name of the NSF file protected by this key."
          },
          "keystoreName" : {
            "type" : "string",
            "description" : "The name of the keystore file being used."
          }
        }
      },
      "MimeTypeProcessingSetting" : {
        "type" : "object",
        "properties" : {
          "mimeType" : {
            "type" : "string",
            "description" : "Sets the MIME type"
          },
          "settings" : {
            "$ref" : "#/components/schemas/MimeTypeSpecificProcessingSettings"
          }
        }
      },
      "MimeTypeSpecificProcessingSettings" : {
        "type" : "object",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "description" : "Controls whether items matching this MIME type, and their embedded descendants, will be processed.  Default is true"
          },
          "processEmbedded" : {
            "type" : "boolean",
            "description" : "Controls whether embedded descendants matching this MIME type will be processed.  Default is true"
          },
          "processText" : {
            "type" : "boolean",
            "description" : "Controls whether items matching this MIME type will have their text processed.  This setting takes precedence over 'textStrip' if both are set to true.  Set this and 'textStrip' to false in order to skip text processing.  Default is true"
          },
          "textStrip" : {
            "type" : "boolean",
            "description" : "Controls whether items matching this MIME type will have their binary data text stripped.  Set this and 'processText' to false in order to skip text processing.  Default is false"
          },
          "processNamedEntities" : {
            "type" : "boolean",
            "description" : "Controls whether items matching this MIME type will have their named entities processed. This setting only takes effect if either 'extractNamedEntitiesFromText' or 'extractNamedEntitiesFromProperties' is enabled in 'ProcessorSettings'. Default is true"
          },
          "processImages" : {
            "type" : "boolean",
            "description" : "Controls whether items matching this MIME type will have their image data processed. This setting only takes effect if 'createThumbnails' is enabled in 'ProcessorSettings'.  Default is true"
          },
          "storeBinary" : {
            "type" : "boolean",
            "description" : "Controls whether items matching this MIME type will have their binary data stored.  This setting only takes effect if 'storeBinary' is enabled in 'ProcessorSettings'.  Default is true"
          }
        }
      },
      "ProcessorSettings" : {
        "type" : "object",
        "properties" : {
          "processText" : {
            "type" : "boolean",
            "description" : "If true, stores and indexes the text of data items.  Default is true.",
            "default" : true
          },
          "processLooseFileContents" : {
            "type" : "boolean",
            "description" : "If true, the contents of loose files will be extracted and processed. If false metadata about loose files will be extracted but their contents will not be processed. Default is true. Deprecated in Nuix 7.0, eplaced with traversalScope.",
            "deprecated" : true,
            "default" : true
          },
          "processForensicImages" : {
            "type" : "boolean",
            "description" : "If true, the contents of forensic images will be exposed. If false metadata about forensic images will be extracted but their contents will not be processed. This settings can be used in combination with processLooseFileContents to explode forensic images but not process their contents. Default is true. Deprecated in Nuix 7.0, replaced with traversalScope.",
            "deprecated" : true,
            "default" : true
          },
          "analysisLanguage" : {
            "type" : "string",
            "description" : "Specifies the language to use for text analysis when indexing. A supported language code.  Example codes are: \"en\" - English, \"ja\" - Japanese. Default is \"en\".",
            "default" : "en"
          },
          "stopWords" : {
            "type" : "boolean",
            "description" : "If true, removes English stop words (\"a\", \"and\", \"the\", etc.) from the text index. If false, no stop words are removed. Default is false.",
            "default" : false
          },
          "stemming" : {
            "type" : "boolean",
            "description" : "If true, stems words using English rules before indexing (e.g. \"fishing\" -> \"fish\".). If false, no stemming is performed. Default is false.",
            "default" : false
          },
          "enableExactQueries" : {
            "type" : "boolean",
            "description" : "If true, enables search using \"exact\" queries.  Default is false.",
            "default" : false
          },
          "extractNamedEntities" : {
            "type" : "boolean",
            "description" : "If true, extract named entities from the text of a document.  Default is false. NOTE: This is deprecated and will be removed in future release.  Deprecated in Nuix 6.0.",
            "deprecated" : true,
            "default" : false
          },
          "extractNamedEntitiesFromText" : {
            "type" : "boolean",
            "description" : "If true, extracts named entities from the text of a document.  Default is false",
            "default" : false
          },
          "extractNamedEntitiesFromProperties" : {
            "type" : "boolean",
            "description" : "If true, extracts named entities from the properties of a document.  Default is false",
            "default" : false
          },
          "extractNamedEntitiesFromTextStripped" : {
            "type" : "boolean",
            "description" : "If true, extracts named entities from the text of text-stripped items, if and only if 'extractNamedEntitesFromText' is true. The 'extractNamedEntitiesFromProperties' setting is independent of this property.  Default is false",
            "default" : false
          },
          "extractShingles" : {
            "type" : "boolean",
            "description" : "If true, extract shingles from item text. Enabling this setting enables near deduplication.  Default is true.",
            "default" : true
          },
          "processTextSummaries" : {
            "type" : "boolean",
            "description" : "If true, process item text and summarise.  Default is true.",
            "default" : true
          },
          "calculateSSDeepFuzzyHash" : {
            "type" : "boolean",
            "description" : "If true, calculate SSDeep fuzzy hash values for item. Default is false.",
            "default" : false
          },
          "detectFaces" : {
            "type" : "boolean",
            "description" : "If true, detect faces in photographic items. Default is false.",
            "default" : false
          },
          "extractFromSlackSpace" : {
            "type" : "boolean",
            "description" : "If true, extract deleted data from mailbox file formats and slack space from the end of file records in file system disk images.  Default is false.",
            "default" : false
          },
          "carveFileSystemUnallocatedSpace" : {
            "type" : "boolean",
            "description" : "If true, carve data out of file system unallocated space for disk images.  Default is false.",
            "default" : false
          },
          "carveUnidentifiedData" : {
            "type" : "boolean",
            "description" : "If true, carve data out of unidentified data items.  Default is false.",
            "default" : false
          },
          "carvingBlockSize" : {
            "type" : "integer",
            "description" : "If null, the block size of the file system is used. Otherwise the given block size is used. File identification is attempted at start of each block, so the smaller the value the longer processing will take. Avoid values smaller than 512 bytes except in specific cases. Default is null.",
            "format" : "int32"
          },
          "recoverDeletedFiles" : {
            "type" : "boolean",
            "description" : "If true, recover deleted file records from disk images.  Default is true.",
            "default" : true
          },
          "extractEndOfFileSlackSpace" : {
            "type" : "boolean",
            "description" : "If true, extract the slack space from the end of file records in disk images.  Default is false.",
            "default" : false
          },
          "smartProcessRegistry" : {
            "type" : "boolean",
            "description" : "If true, only process sections of the Registry that have decoders of have been explicitly selected. Default is false",
            "default" : false
          },
          "identifyPhysicalFiles" : {
            "type" : "boolean",
            "description" : "If false, only file system metadata is extracted for physical files on disk.  Default is true.",
            "default" : true
          },
          "createThumbnails" : {
            "type" : "boolean",
            "description" : "If true, create and store thumbnails of image data items.  Default is true.",
            "default" : true
          },
          "skinToneAnalysis" : {
            "type" : "boolean",
            "description" : "If true, perform analysis on images to detect skintones.  Default is false.",
            "default" : false
          },
          "calculateAuditedSize" : {
            "type" : "boolean",
            "description" : "If true, calculates audited size.  Default is false.",
            "default" : false
          },
          "storeBinary" : {
            "type" : "boolean",
            "description" : "If true, store the binary of data items.  Default is false.",
            "default" : false
          },
          "maxStoredBinarySize" : {
            "type" : "integer",
            "description" : "Specifies the maximum size of binary which will be stored into the binary store, in bytes. Default is 250000000 (250 MB).",
            "default" : 250000000,
            "format" : "int32"
          },
          "maxDigestSize" : {
            "type" : "integer",
            "description" : "Specifies the maximum size of binary which will be digested, in bytes. Default is 250000000 (250 MB).",
            "default" : 250000000,
            "format" : "int64"
          },
          "digests" : {
            "type" : "array",
            "description" : "A list of digests to calculate.  Valid values \"MD5\", \"SHA-1\" or \"SHA-256\".  Default is \"MD5\".",
            "default" : "MD5",
            "items" : {
              "type" : "string"
            }
          },
          "addBccToEmailDigests" : {
            "type" : "boolean",
            "description" : "If true, adds the Bcc field when computing email digests. Using the Bcc field in email digests may prevent the sender and recipients digests from matching. This is because only the sender will have the Bcc field if it is present. Default is false.",
            "default" : false
          },
          "addCommunicationDateToEmailDigests" : {
            "type" : "boolean",
            "description" : "If true, adds the communication date when computing email digests. Using the communication date in the email digests may prevent the sender and recipients digests from matching. This is because the sender and recipients communication date / times can be slightly different for the same email. Default is false.",
            "default" : false
          },
          "reuseEvidenceStores" : {
            "type" : "boolean",
            "description" : "If true, existing evidence stores are used to add any additional data into.  Default is false.",
            "default" : false
          },
          "processFamilyFields" : {
            "type" : "boolean",
            "description" : "If true, top-level items will contain search fields containing text from their family.  Default is false.",
            "default" : false
          },
          "hideEmbeddedImmaterialData" : {
            "type" : "boolean",
            "description" : "If true, hides embedded immaterial data items such as embedded images in documents.  Default is false.",
            "default" : false
          },
          "reportProcessingStatus" : {
            "type" : "string",
            "description" : "If \"physical_files\", then the total evidence physical file size is calculated before processing starts. If \"none\", then no up-front calculation is performed. Non-file data will always be treated as \"none\". Default is none.",
            "default" : "none"
          },
          "workerItemCallback" : {
            "type" : "string",
            "description" : "A string prefixed with \"java:\" followed by the name of a class with a no argument constructor which implements Consumer<WorkerItem>, or the name of a scripting engine followed by a colon character follow by the script to execute. Example scripting engine names include \"ruby\", \"python\" and \"ecmascript\".  For scripting languages, this string is the actual script code."
          },
          "workerItemCallbacks" : {
            "type" : "array",
            "description" : "A list of strings specifying worker scripts. See workerItemCallback for script details. Scripts are processed in list order.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "RescanEvidenceRepositoriesSettings" : {
        "type" : "object",
        "description" : "Settings when rescanning the case's evidence repositories.",
        "properties" : {
          "depth" : {
            "type" : "integer",
            "description" : "Maximum depth of directories to be rescanned.",
            "format" : "int32"
          }
        }
      },
      "SingleRepositoryIngestionRequest" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "description" : "Sets the processing settings for individual mime types.",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "description" : "Sets the settings used to apply a keystore file to the ingestion.",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean",
            "description" : "If true, the case's Evidence Repositories will be rescanned to discover new Evidence Containers within them and new files within existing Evidence Containers which are themselves within the cases's Evidence Repositories. Default is false."
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "repository" : {
            "$ref" : "#/components/schemas/EvidenceRepository"
          }
        }
      },
      "EvidenceContainer" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Sets the name for the evidence container that is created during ingestion."
          },
          "customMetadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Sets a map of custom metadata for the evidence container."
          },
          "encoding" : {
            "type" : "string",
            "description" : "Sets the encoding for the evidence container. If the encoding is not set the default system encoding will be used."
          },
          "custodian" : {
            "type" : "string",
            "description" : "Sets the name of the initial custodian for the data."
          },
          "timeZone" : {
            "type" : "string",
            "description" : "Sets the time zone for the evidence container. If the time zone is not set the system's default time zone will be used."
          },
          "description" : {
            "type" : "string",
            "description" : "Sets the description for the evidence container."
          },
          "locale" : {
            "type" : "string",
            "description" : "Sets the locale for the evidence container. Some file types and named entities require a locale for them to be ingested accurately. If not set then the system's default locale will be used. Format is that required by IETF BCP 47 (e.g. 'en-US')."
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleFile" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleFile"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleLoadFile" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleLoadFile"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleMailStore" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleMailStore"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleExchangeMailbox" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleExchangeMailbox"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleSharepoint" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleSharepoint"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleSQLServer" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleSQLServer"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleEnterpriseVault" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleEnterpriseVault"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleS3Bucket" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleS3Bucket"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleCenteraCluster" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleCenteraCluster"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleSplitFileList" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleSplitFileList"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleDropbox" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleDropbox"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "SingleContainerIngestionRequestIngestibleSSH" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean"
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "target" : {
            "$ref" : "#/components/schemas/IngestibleSSH"
          },
          "container" : {
            "$ref" : "#/components/schemas/EvidenceContainer"
          }
        }
      },
      "ReloadItemsIngestionRequest" : {
        "type" : "object",
        "properties" : {
          "processorSettings" : {
            "$ref" : "#/components/schemas/ProcessorSettings"
          },
          "mimeTypeProcessorSettings" : {
            "type" : "array",
            "description" : "Sets the processing settings for individual mime types.",
            "items" : {
              "$ref" : "#/components/schemas/MimeTypeProcessingSetting"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          },
          "keystoreKeyParameters" : {
            "type" : "array",
            "description" : "Sets the settings used to apply a keystore file to the ingestion.",
            "items" : {
              "$ref" : "#/components/schemas/KeyStoreKeyParameters"
            }
          },
          "rescanEvidenceRepositories" : {
            "type" : "boolean",
            "description" : "If true, the case's Evidence Repositories will be rescanned to discover new Evidence Containers within them and new files within existing Evidence Containers which are themselves within the cases's Evidence Repositories. Default is false."
          },
          "rescanEvidenceRepositoriesSettings" : {
            "$ref" : "#/components/schemas/RescanEvidenceRepositoriesSettings"
          },
          "configurationProfile" : {
            "type" : "string",
            "description" : "Deprecated in favor of processingProfile. Configuration profile to use as base set of processor, parallel processing, and mime type settings.  Values present in processorSettings, parallelProcessingSettings, and mimeTypeProcessorSettings will override anything defined by this profile."
          },
          "processingProfile" : {
            "type" : "string",
            "description" : "The name of the Processing Profile to use. If you use this setting then do not use any other settings from processorSettings as everything will be overridden by the loaded Processing profile."
          },
          "query" : {
            "type" : "string",
            "description" : "All items matching the query will be reloaded from source."
          }
        }
      },
      "CaseDigest" : {
        "type" : "object",
        "properties" : {
          "caseId" : {
            "type" : "string",
            "description" : "The case's unique identifier"
          },
          "name" : {
            "type" : "string",
            "description" : "The case name"
          },
          "path" : {
            "type" : "string",
            "description" : "The path to the case"
          },
          "description" : {
            "type" : "string",
            "description" : "The case description"
          },
          "investigator" : {
            "type" : "string",
            "description" : "The investigator for this case"
          },
          "creationDate" : {
            "type" : "integer",
            "description" : "The date/time this case was created, in milliseconds since epoch",
            "format" : "int64"
          },
          "compound" : {
            "type" : "boolean",
            "description" : "Whether this case is Simple or Compound"
          },
          "elastic" : {
            "type" : "boolean",
            "description" : "Whether this is an Elastic case"
          },
          "binaryStoreLocation" : {
            "type" : "string",
            "description" : "The binary store location for this case, if applicable"
          },
          "indexId" : {
            "type" : "string"
          },
          "productName" : {
            "type" : "string",
            "description" : "The name of the product that created / opened this case"
          },
          "version" : {
            "type" : "string",
            "description" : "The version of Nuix that most recently opened this case"
          },
          "isOpen" : {
            "type" : "boolean",
            "description" : "Whether or not this case is currently open, which means something in REST is working with this case"
          },
          "childCases" : {
            "type" : "array",
            "description" : "The child cases of this case, when applicable.  If the child case is known to this REST instance then the value will be the child case's GUID.  Otherwise it will be the absolute path to the child case",
            "items" : {
              "type" : "string"
            }
          },
          "url" : {
            "type" : "string",
            "description" : "The URL of the REST instance that contains this case"
          },
          "serverId" : {
            "type" : "string",
            "description" : "The Server ID of the REST instance that contains this case"
          },
          "physicalPath" : {
            "type" : "string",
            "description" : "Deprecated; use 'path' instead"
          }
        }
      },
      "ItemTextResponse" : {
        "type" : "object",
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "text"
          },
          "binaryAvailable" : {
            "type" : "boolean",
            "description" : "binaryAvailable"
          },
          "htmlEscape" : {
            "type" : "boolean",
            "description" : "htlmEscape"
          },
          "totalTextLength" : {
            "type" : "integer",
            "format" : "int64"
          },
          "blank" : {
            "type" : "boolean",
            "description" : "blank"
          }
        }
      },
      "SearchHitRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Search hits query. If a query is not supplied, it defaults to an empty string which will not return search hits."
          }
        }
      },
      "SearchHit" : {
        "type" : "object",
        "properties" : {
          "term" : {
            "type" : "string",
            "description" : "Search hit term."
          },
          "count" : {
            "type" : "integer",
            "description" : "The number of occurrances for this term",
            "format" : "int32"
          }
        }
      },
      "SearchHitResponse" : {
        "type" : "object",
        "properties" : {
          "terms" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Set of matching terms",
            "items" : {
              "type" : "string"
            }
          },
          "text" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Set of search hits matching the text content",
            "items" : {
              "$ref" : "#/components/schemas/SearchHit"
            }
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Map containing the set of search hits by property name.  Objects are map[string, array[SearchHit]"
          }
        }
      },
      "FileSystemResource" : {
        "type" : "object",
        "properties" : {
          "file" : {
            "type" : "string",
            "format" : "binary"
          },
          "path" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string",
            "format" : "url"
          },
          "inputStream" : {
            "type" : "object"
          },
          "uri" : {
            "type" : "string",
            "format" : "uri"
          },
          "description" : {
            "type" : "string"
          },
          "readable" : {
            "type" : "boolean"
          },
          "writable" : {
            "type" : "boolean"
          },
          "outputStream" : {
            "type" : "object"
          },
          "filename" : {
            "type" : "string"
          },
          "open" : {
            "type" : "boolean"
          }
        }
      },
      "ItemCommentRequest" : {
        "type" : "object",
        "properties" : {
          "itemComment" : {
            "type" : "string",
            "description" : "itemComment"
          }
        }
      },
      "ItemCommentResponse" : {
        "type" : "object",
        "properties" : {
          "itemGuid" : {
            "type" : "string",
            "description" : "The guid of the item."
          },
          "itemComment" : {
            "type" : "string",
            "description" : "Comments for this item"
          }
        }
      },
      "ItemsShinglesRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included.  If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplication" : {
            "type" : "string",
            "description" : "deduplication.  Default is 'none'.",
            "default" : "none",
            "enum" : [ "none", "md5" ]
          },
          "maxItems" : {
            "type" : "integer",
            "description" : "maxItems.  Default is 1000 items.",
            "default" : 1000,
            "format" : "int32"
          },
          "maxShingleResponse" : {
            "type" : "integer",
            "description" : "The maximum number of shingles to return.  Default is 100 shingles.",
            "default" : 100,
            "format" : "int32"
          }
        }
      },
      "ItemSetBatchResponse" : {
        "type" : "object",
        "properties" : {
          "batchName" : {
            "type" : "string"
          },
          "createdOn" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ItemSetResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "name"
          },
          "description" : {
            "type" : "string",
            "description" : "description"
          },
          "batches" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ItemSetBatchResponse"
            }
          }
        }
      },
      "ItemSetDuplicatesResponse" : {
        "type" : "object",
        "properties" : {
          "duplicates" : {
            "type" : "array",
            "description" : "The list of GUIDs representing duplicate items",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ItemSetNameChangeRequest" : {
        "type" : "object",
        "properties" : {
          "newName" : {
            "type" : "string",
            "description" : "New name for the Item Set"
          }
        }
      },
      "ItemSetRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string"
          },
          "relationType" : {
            "type" : "string"
          },
          "batchName" : {
            "type" : "string",
            "description" : "Defaults to date in format yy/MM/dd kk:mm:ss z"
          },
          "name" : {
            "type" : "string",
            "description" : "name"
          },
          "deduplication" : {
            "type" : "string",
            "description" : "How the deduplication is applied.  None returns all items matching the query including duplicates.  Other options return deduplicated items based on the deduplication methods used.  Defaults to None"
          },
          "description" : {
            "type" : "string",
            "description" : "description"
          },
          "deduplicateBy" : {
            "type" : "string",
            "description" : "deduplicateBy.  Defaults to INDIVIDUAL"
          },
          "custodianRanking" : {
            "type" : "array",
            "description" : "List of custodian names ordered from highest ranked to lowest ranked.  If this parameter is present and the deduplication parameter has not been specified, MD5 Randed Custodian is assumed.  If deduplication is any value other than MD5 Randed Custodian this list is ignored.",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ItemSetAddItemsRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string"
          },
          "relationType" : {
            "type" : "string"
          },
          "batchName" : {
            "type" : "string",
            "description" : "Defaults to date in format yy/MM/dd kk:mm:ss z"
          }
        }
      },
      "ItemSetRemoveItemsRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string"
          },
          "relationType" : {
            "type" : "string"
          },
          "removeDuplicates" : {
            "type" : "boolean",
            "description" : "removeDuplicates.  Default is true."
          }
        }
      },
      "ConfigurationChangeResponse" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A message describing the result of the operation."
          },
          "status" : {
            "type" : "string",
            "description" : "The status result of the operation.",
            "enum" : [ "PERSISTENT", "TRANSIENT", "FAILED" ]
          }
        }
      },
      "LicenseDescription" : {
        "type" : "object",
        "properties" : {
          "source" : {
            "type" : "string",
            "description" : "Gets a string value identifying information about the source of the license."
          },
          "type" : {
            "type" : "string",
            "description" : "Gets a string value identifying the type of license source."
          },
          "location" : {
            "type" : "string",
            "description" : "Gets the location of the license."
          },
          "shortname" : {
            "type" : "string",
            "description" : "Gets the short name of this license type."
          },
          "count" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Gets the number of licenses of this type which are currently available."
          },
          "configuredCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Gets the total number of licenses of this type regardless of the state."
          },
          "description" : {
            "type" : "string",
            "description" : "Gets a longer description of this license type."
          },
          "workers" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Gets the number of workers available for use with licenses of this type."
          },
          "configuredWorkers" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Gets the total number of workers for the licenses of this type regardless of state."
          },
          "canChooseWorkers" : {
            "type" : "boolean",
            "description" : "Tests if the client gets a choice over the number of workers."
          },
          "audited" : {
            "type" : "boolean",
            "description" : "Tests if the licence is audited in any fashion."
          },
          "auditThreshold" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Gets the threshold for auditing in bytes."
          },
          "expiry" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Gets the expiry date of the license in milliseconds."
          },
          "legalHoldHoldCountLimit" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Gets the Legal Hold \"hold count limit\" from a license."
          },
          "concurrentUserLimit" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Retrieves the concurrent user limit from a license."
          }
        }
      },
      "NuixItemKindResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the item kind."
          },
          "localisedName" : {
            "type" : "string",
            "description" : "The localized name of the item kind."
          }
        }
      },
      "SearchMacroResponse" : {
        "description" : "The search macro response object which is a file name/expansion pair.",
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The search macro file name without the extension."
          },
          "expansion" : {
            "type" : "string",
            "description" : "The expanded search macro text."
          }
        }
      },
      "SearchMacroStructuredResponse" : {
        "type" : "object",
        "description" : "A list of search macro file names without the extension and a folder map of the structured response.",
        "properties" : {
          "files" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SearchMacroResponse"
            }
          },
          "folders" : {
            "type" : "object",
            "description" : "A map of folder name to a structured search macro.",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/SearchMacroStructuredResponse"
            }
          }
        }
      },
      "NuixItemTypeResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The content type."
          },
          "localisedName" : {
            "type" : "string",
            "description" : "The localized type name."
          },
          "preferredExtension" : {
            "type" : "string",
            "description" : "The file extension of the type."
          },
          "kind" : {
            "type" : "string",
            "description" : "The item kind."
          },
          "count" : {
            "type" : "integer",
            "description" : "The count.",
            "format" : "int64"
          }
        }
      },
      "FileUpload" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean",
            "description" : "Boolean true/false depending on whether the upload was successful."
          },
          "filePath" : {
            "type" : "string",
            "description" : "The physical path of the uploaded file on disk."
          },
          "size" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The size of the uploaded file in bytes."
          }
        }
      },
      "FileUploadResponse" : {
        "type" : "object",
        "properties" : {
          "fileUploads" : {
            "type" : "array",
            "description" : "The array of file upload results",
            "items" : {
              "$ref" : "#/components/schemas/FileUpload"
            }
          }
        }
      },
      "HttpEntityString" : {
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              },
              "location" : {
                "type" : "string",
                "format" : "uri"
              },
              "lastModified" : {
                "type" : "integer",
                "format" : "int64"
              },
              "all" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "writeOnly" : true
              },
              "range" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/HttpRange"
                }
              },
              "acceptCharset" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "registered" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "connection" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "date" : {
                "type" : "integer",
                "format" : "int64"
              },
              "contentLength" : {
                "type" : "integer",
                "format" : "int64"
              },
              "contentType" : {
                "$ref" : "#/components/schemas/MediaType"
              },
              "ifModifiedSince" : {
                "type" : "integer",
                "format" : "int64"
              },
              "cacheControl" : {
                "type" : "string"
              },
              "allow" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
                }
              },
              "etag" : {
                "type" : "string"
              },
              "origin" : {
                "type" : "string"
              },
              "accept" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/MediaType"
                }
              },
              "accessControlAllowCredentials" : {
                "type" : "boolean"
              },
              "accessControlAllowHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "accessControlAllowMethods" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
                }
              },
              "accessControlAllowOrigin" : {
                "type" : "string"
              },
              "accessControlExposeHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "accessControlMaxAge" : {
                "type" : "integer",
                "format" : "int64"
              },
              "accessControlRequestHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "accessControlRequestMethod" : {
                "type" : "string",
                "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
              },
              "expires" : {
                "type" : "integer",
                "format" : "int64"
              },
              "ifMatch" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "ifNoneMatch" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "ifUnmodifiedSince" : {
                "type" : "integer",
                "format" : "int64"
              },
              "pragma" : {
                "type" : "string"
              },
              "upgrade" : {
                "type" : "string"
              },
              "vary" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "body" : {
            "type" : "string"
          }
        }
      },
      "HttpHeaders" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "location" : {
            "type" : "string",
            "format" : "uri"
          },
          "lastModified" : {
            "type" : "integer",
            "format" : "int64"
          },
          "all" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "writeOnly" : true
          },
          "range" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HttpRange"
            }
          },
          "acceptCharset" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "registered" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "connection" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "date" : {
            "type" : "integer",
            "format" : "int64"
          },
          "contentLength" : {
            "type" : "integer",
            "format" : "int64"
          },
          "contentType" : {
            "$ref" : "#/components/schemas/MediaType"
          },
          "ifModifiedSince" : {
            "type" : "integer",
            "format" : "int64"
          },
          "cacheControl" : {
            "type" : "string"
          },
          "allow" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
            }
          },
          "etag" : {
            "type" : "string"
          },
          "origin" : {
            "type" : "string"
          },
          "accept" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/MediaType"
            }
          },
          "accessControlAllowCredentials" : {
            "type" : "boolean"
          },
          "accessControlAllowHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "accessControlAllowMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
            }
          },
          "accessControlAllowOrigin" : {
            "type" : "string"
          },
          "accessControlExposeHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "accessControlMaxAge" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accessControlRequestHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "accessControlRequestMethod" : {
            "type" : "string",
            "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
          },
          "expires" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ifMatch" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ifNoneMatch" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "ifUnmodifiedSince" : {
            "type" : "integer",
            "format" : "int64"
          },
          "pragma" : {
            "type" : "string"
          },
          "upgrade" : {
            "type" : "string"
          },
          "vary" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "HttpRange" : {
        "type" : "object"
      },
      "MediaType" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string"
          },
          "subtype" : {
            "type" : "string"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "qualityValue" : {
            "type" : "number",
            "format" : "double"
          },
          "charset" : {
            "type" : "object",
            "properties" : {
              "registered" : {
                "type" : "boolean"
              }
            }
          },
          "wildcardType" : {
            "type" : "boolean"
          },
          "wildcardSubtype" : {
            "type" : "boolean"
          },
          "concrete" : {
            "type" : "boolean"
          },
          "charSet" : {
            "type" : "object",
            "properties" : {
              "registered" : {
                "type" : "boolean"
              }
            }
          }
        }
      },
      "ResponseEntityObject" : {
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "properties" : {
              "empty" : {
                "type" : "boolean"
              },
              "location" : {
                "type" : "string",
                "format" : "uri"
              },
              "lastModified" : {
                "type" : "integer",
                "format" : "int64"
              },
              "all" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "writeOnly" : true
              },
              "range" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/HttpRange"
                }
              },
              "acceptCharset" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "registered" : {
                      "type" : "boolean"
                    }
                  }
                }
              },
              "connection" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "date" : {
                "type" : "integer",
                "format" : "int64"
              },
              "contentLength" : {
                "type" : "integer",
                "format" : "int64"
              },
              "contentType" : {
                "$ref" : "#/components/schemas/MediaType"
              },
              "ifModifiedSince" : {
                "type" : "integer",
                "format" : "int64"
              },
              "cacheControl" : {
                "type" : "string"
              },
              "allow" : {
                "uniqueItems" : true,
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
                }
              },
              "etag" : {
                "type" : "string"
              },
              "origin" : {
                "type" : "string"
              },
              "accept" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/MediaType"
                }
              },
              "accessControlAllowCredentials" : {
                "type" : "boolean"
              },
              "accessControlAllowHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "accessControlAllowMethods" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
                }
              },
              "accessControlAllowOrigin" : {
                "type" : "string"
              },
              "accessControlExposeHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "accessControlMaxAge" : {
                "type" : "integer",
                "format" : "int64"
              },
              "accessControlRequestHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "accessControlRequestMethod" : {
                "type" : "string",
                "enum" : [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
              },
              "expires" : {
                "type" : "integer",
                "format" : "int64"
              },
              "ifMatch" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "ifNoneMatch" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "ifUnmodifiedSince" : {
                "type" : "integer",
                "format" : "int64"
              },
              "pragma" : {
                "type" : "string"
              },
              "upgrade" : {
                "type" : "string"
              },
              "vary" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            },
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "body" : {
            "type" : "object"
          },
          "statusCode" : {
            "type" : "string",
            "enum" : [ "100", "101", "102", "103", "200", "201", "202", "203", "204", "205", "206", "207", "208", "226", "300", "301", "302", "302", "303", "304", "305", "307", "308", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "413", "414", "414", "415", "416", "417", "418", "419", "420", "421", "422", "423", "424", "426", "428", "429", "431", "451", "500", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "511" ]
          },
          "statusCodeValue" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "ImagingOptions" : {
        "type" : "object",
        "properties" : {
          "imageExcelSpreadsheets" : {
            "type" : "boolean",
            "default" : false,
            "deprecated" : true,
            "description" : "Specifies whether to image Excel spreadsheets, instead of generating a slip sheet. Defaults to false. This is replaced with Imaging Profiles since Nuix 7.2."
          },
          "slipSheetContainers" : {
            "type" : "boolean",
            "default" : false,
            "deprecated" : true,
            "description" : "Deprecated - same as exportDescendantContainers in BatchExporter.setTraversalOptions(Map) since Nuix 7.2. Defaults to false"
          },
          "excelExportingEngine" : {
            "type" : "string",
            "enum" : [ "INTERNAL", "MS_OFFICE" ],
            "description" : "Excel Exporting Engine:\n  * `MS_OFFICE` - Exports Excel documents using Microsoft.\n  * `INTERNAL` - Exports Excel documents using the built in exporter.\n"
          },
          "excelPrintHiddenRows" : {
            "type" : "boolean",
            "description" : "Optionally unhide all Excel rows.  Defaults to null which uses the settings present in the document"
          },
          "excelPrintHiddenColumns" : {
            "type" : "boolean",
            "description" : "Optionally unhide all Excel columns. Defaults to null which uses the settings present in the document"
          },
          "excelPrintHiddenWorksheets" : {
            "type" : "string",
            "default" : "SHEET_VERY_HIDDEN",
            "enum" : [ "SHEET_HIDDEN", "SHEET_VERY_HIDDEN", "PRINT_IN_PLACE", "PRINT_NO_COMMENTS", "PRINT_SHEETEND" ],
            "description" : "Excel Print Hidden Worksheets:\n  * `SHEET_HIDDEN` - Show hidden worksheets.\n  * `SHEET_VERY_HIDDEN` - Show hidden and very hidden worksheets.\n"
          },
          "excelPrintComments" : {
            "type" : "string",
            "enum" : [ "PRINT_IN_PLACE", "PRINT_NO_COMMENTS", "PRINT_SHEETEND" ],
            "description" : "Print Comments:\n  * `PRINT_IN_PLACE` - Print in original location.\n  * `PRINT_NO_COMMENTS` - Do not print.\n  * `PRINT_SHEETEND` - Print as end notes.\n"
          },
          "excelPrintNotes" : {
            "type" : "boolean",
            "description" : "Optionally set for Excel cell notes to be printed as end notes with the sheet. Defaults to null which uses the settings present in the document."
          },
          "excelPaperSize" : {
            "type" : "string",
            "description" : "Excel Paper Size:\n  * `PAPER_10x14` - 10 in. x 14 in.\n  * `PAPER_11x17` - 11 in. x 17 in.\n  * `PAPER_A3` - A3 (297 mm x 420 mm)\n  * `PAPER_A4` - A4 (210 mm x 297 mm)\n  * `PAPER_A4Small` - A4 Small (210 mm x 297 mm)\n  * `PAPER_A5` - A5 (148 mm x 210 mm)\n  * `PAPER_B4` - B4 (250 mm x 354 mm)\n  * `PAPER_B5` - A5 (148 mm x 210 mm)\n  * `PAPER_Csheet` - C size sheet\n  * `PAPER_Dsheet` - D size sheet\n  * `PAPER_Envelope10` - Envelope 10 (4-1/8 in. x 9-1/2 in.)\n  * `PAPER_Envelope11` - Envelope 11 (4-1/2 in. x 10-3/8 in.)\n  * `PAPER_Envelope12` - Envelope 12 (4-1/2 in. x 11 in.)\n  * `PAPER_Envelope14` - Envelope 14 (5 in. x 11-1/2 in.)\n  * `PAPER_Envelope9` - Envelope 9 (3-7/8 in. x 8-7/8 in.)\n  * `PAPER_EnvelopeB4` - Envelope B4 (250 mm x 353 mm)\n  * `PAPER_EnvelopeB5` - Envelope B5 (176 mm x 250 mm)\n  * `PAPER_EnvelopeB6` - Envelope B6 (176 mm x 125 mm)\n  * `PAPER_EnvelopeC3` - Envelope C3 (324 mm x 458 mm)\n  * `PAPER_EnvelopeC4` - Envelope C4 (229 mm x 324 mm)\n  * `PAPER_EnvelopeC5` - Envelope C5 (162 mm x 229 mm)\n  * `PAPER_EnvelopeC6` - Envelope C6 (114 mm x 162 mm)\n  * `PAPER_EnvelopeC65` - Envelope C65 (114 mm x 229 mm)\n  * `PAPER_EnvelopeDL` - Envelope DL (110 mm x 220 mm)\n  * `PAPER_EnvelopeItaly` - Envelope (110 mm x 230 mm)\n  * `PAPER_EnvelopeMonarch` - Envelope Monarch (3-7/8 in. x 7-1/2 in.)\n  * `PAPER_EnvelopePersonal` - Envelope (3-5/8 in. x 6-1/2 in.)\n  * `PAPER_Esheet` - E size sheet\n  * `PAPER_Executive` - Executive (7-1/2 in. x 10-1/2 in.)\n  * `PAPER_FanfoldLegalGerman` - German Legal Fanfold (8-1/2 in. x 13 in.)\n  * `PAPER_FanfoldStdGerman` - German Legal Fanfold (8-1/2 in. x 13 in.)\n  * `PAPER_FanfoldUS` - U.S. Standard Fanfold (14-7/8 in. x 11 in.)\n  * `PAPER_Folio` - Folio (8-1/2 in. x 13 in.)\n  * `PAPER_Ledger` - Ledger (17 in. x 11 in.)\n  * `PAPER_Legal` - Legal (8-1/2 in. x 14 in.)\n  * `PAPER_Letter` - Letter (8-1/2 in. x 11 in.)\n  * `PAPER_LetterSmall` - Letter Small (8-1/2 in. x 11 in.)\n  * `PAPER_Note` - Note (8-1/2 in. x 11 in.)\n  * `PAPER_Quarto` - Quarto (215 mm x 275 mm)\n  * `PAPER_Statement` - Statement (5-1/2 in. x 8-1/2 in.)\n  * `PAPER_Tabloid` - Tabloid (11 in. x 17 in.)\n",
            "enum" : [ "PAPER_10x14", "PAPER_11x17", "PAPER_A3", "PAPER_A4", "PAPER_A4Small", "PAPER_A5", "PAPER_B4", "PAPER_B5", "PAPER_Csheet", "PAPER_Dsheet", "PAPER_Envelope10", "PAPER_Envelope11", "PAPER_Envelope12", "PAPER_Envelope14", "PAPER_Envelope9", "PAPER_EnvelopeB4", "PAPER_EnvelopeB5", "PAPER_EnvelopeB6", "PAPER_EnvelopeC3", "PAPER_EnvelopeC4", "PAPER_EnvelopeC5", "PAPER_EnvelopeC6", "PAPER_EnvelopeC65", "PAPER_EnvelopeDL", "PAPER_EnvelopeItaly", "PAPER_EnvelopeMonarch", "PAPER_EnvelopePersonal", "PAPER_Esheet", "PAPER_Executive", "PAPER_FanfoldLegalGerman", "PAPER_FanfoldStdGerman", "PAPER_FanfoldUS", "PAPER_Folio", "PAPER_Ledger", "PAPER_Legal", "PAPER_Letter", "PAPER_LetterSmall", "PAPER_Note", "PAPER_Quarto", "PAPER_Statement", "PAPER_Tabloid" ]
          },
          "excelPageOrientation" : {
            "type" : "string",
            "enum" : [ "PORTRAIT", "LANDSCAPE" ],
            "description" : "Excel Page Orientation\n  * `PORTRAIT` - Portrait mode\n  * `LANDSCAPE` - Landscape mode\n"
          },
          "excelPageZoom" : {
            "type" : "string",
            "enum" : [ "PERCENT_10", "PERCENT_25", "PERCENT_50", "PERCENT_75", "PERCENT_100", "PERCENT_125", "PERCENT_150", "PERCENT_200", "PERCENT_400" ],
            "description" : "Excel Page Zoom:\n  * `PERCENT_10` - 10%\n  * `PERCENT_25` - 25%\n  * `PERCENT_50` - 50%\n  * `PERCENT_75` - 75%\n  * `PERCENT_100` - 100%\n  * `PERCENT_125` - 125%\n  * `PERCENT_150` - 150%\n  * `PERCENT_200` - 200%\n  * `PERCENT_400` - 400%\n"
          },
          "excelFitToPagesTall" : {
            "type" : "integer",
            "description" : "Optionally set for Excel the number of pages tall the worksheet will be scaled to when it's printed. Defaults to null which uses the settings present in the document",
            "format" : "int32"
          },
          "excelFitToPagesWide" : {
            "type" : "integer",
            "description" : "Optionally set for Excel the number of pages wide the worksheet will be scaled to when it's printed. Defaults to null which uses the settings present in the document",
            "format" : "int32"
          },
          "excelWorksheetPrintArea" : {
            "type" : "string",
            "description" : "Optionally set Excel print area for every worksheet.  Empty string for entire worksheet or standard excel range string (e.g., $A$1:$J$10). Defaults to empty string"
          },
          "excelPageNumberLimit" : {
            "type" : "integer",
            "description" : "Optionally set the page number limit for Excel. The value must be a positive number. Defaults to null which uses the settings present in the document",
            "format" : "int32"
          },
          "excelPrintGridlines" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Optionally force Excel gridlines to be always shown or hidden. Defaults to true"
          },
          "excelPrintHeadings" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Optionally force Excel headers to be hidden or shown. Defaults to true"
          },
          "wordExportingEngine" : {
            "type" : "string",
            "default" : "INTERNAL",
            "enum" : [ "MS_OFFICE", "INTERNAL" ],
            "description" : "Word Exporting Engine:\n  * `MS_OFFICE` - Export Word documents using Microsoft Office\n  * `INTERNAL` - Export Word documents using built in exporter\n"
          },
          "wordShowMarkup" : {
            "type" : "boolean",
            "description" : "Optionally force Word to show markup (such as track-changes) or hide it. Defaults to null which uses the settings present in the document"
          },
          "wordShowHiddenText" : {
            "type" : "boolean",
            "description" : "Optionally force PowerPoint to show markup (such as track-changes or hidden text) or hide it. Defaults to null which uses the settings present in the document"
          },
          "powerpointExportEngine" : {
            "type" : "string",
            "default" : "INTERNAL",
            "enum" : [ "MS_OFFICE", "INTERNAL" ],
            "description" : "Powerpoint Exporting Engine:\n  * `MS_OFFICE` - Export Powerpoint documents using Microsoft Office\n  * `INTERNAL` - Export Powerpoint documents using built in exporter\n"
          },
          "powerPointPrintOutputType" : {
            "type" : "string",
            "default" : "PRINT_OUTPUT_SLIDES",
            "enum" : [ "PRINT_OUTPUT_BUILD_SLIDES", "PRINT_OUTPUT_FOUR_SLIDE_HANDOUTS", "PRINT_OUTPUT_NINE_SLIDE_HANDOUTS", "PRINT_OUTPUT_NOTES_PAGES", "PRINT_OUTPUT_ONE_SLIDE_HANDOUTS", "PRINT_OUTPUT_OUTLINE", "PRINT_OUTPUT_SIX_SLIDE_HANDOUTS", "PRINT_OUTPUT_SLIDES", "PRINT_OUTPUT_THREE_SLIDE_HANDOUTS", "PRINT_OUTPUT_TWO_SLIDE_HANDOUTS" ],
            "description" : "Powerpoint Print Output Type:\n  * `PRINT_OUTPUT_BUILD_SLIDES` - Build Slides\n  * `PRINT_OUTPUT_FOUR_SLIDE_HANDOUTS` - Four Slide Handouts\n  * `PRINT_OUTPUT_NINE_SLIDE_HANDOUTS` - Nine Slide Handouts\n  * `PRINT_OUTPUT_NOTES_PAGES` - Notes Pages\n  * `PRINT_OUTPUT_ONE_SLIDE_HANDOUTS` - Single Slide Handouts\n  * `PRINT_OUTPUT_OUTLINE` - Outline\n  * `PRINT_OUTPUT_SIX_SLIDE_HANDOUTS` - Six Slide Handouts\n  * `PRINT_OUTPUT_SLIDES` - Slides\n  * `PRINT_OUTPUT_THREE_SLIDE_HANDOUTS` - Three Slide Handouts\n  * `PRINT_OUTPUT_TWO_SLIDE_HANDOUTS` - Two Slide Handouts\n"
          },
          "slipSheetMetadataProfile" : {
            "type" : "string",
            "description" : "Optionally insert values from a metadata profile into generated slip-sheets. Defaults to null which uses the settings present in the document"
          }
        }
      },
      "OcrOptions" : {
        "type" : "object",
        "properties" : {
          "regeneratePdfs" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Specifies whether to regenerate PDFs before they are sent to the OCR processor. Defaults to false"
          },
          "updatePdf" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Specifies whether to update PDFs in the print store with the PDF created by the OCR processor. Defaults to true"
          },
          "updateText" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Specifies whether to update the item's text with the text extrated with the OCR processor. Defaults to true"
          },
          "textModification" : {
            "type" : "string",
            "default" : "append",
            "enum" : [ "append", "overwrite" ],
            "description" : "Specifies whether to append or overwrite new text to the item's existing text. Ignored if 'updateText' is set to false. Defaults to append."
          },
          "quality" : {
            "type" : "string",
            "default" : "document_archiving_accuracy",
            "enum" : [ "default", "document_archiving_accuracy", "document_archiving_speed,", "book_archiving_accuracy", "book_archiving_speed", "document_conversion_accuracy", "document_conversion_speed", "text_extraction_accuracy", "text_extraction_speed", "field_level_recognition", "fast", "mid_range", "high_quality" ],
            "description" : "OCR Quality:\n  * `default` - will use default values which usually produce a good result in a reasonable time.\n  * `document_archiving_accuracy` - Is suitable for creating an electronic archive (e.g. PDF). Enables detection\n    of maximum text on an image, including text embedded into the image. Full synthesis of the logical structure\n    of a document is not performed.\n  * `document_archiving_speed` - Has an emphasis on speed rather than accuracy.  See document_archiving_accuracy.\n  * `book_archiving_accuracy` - Is suitable for creating an electronic library (e.g. PDF). Enables detection\n    of font styles and full synthesis of the logical structure of a document.\n  * `book_archiving_speed` - Has an emphasis on speed rather than accuracy.  See book_archiving_accuracy.\n  * `document_conversion_accuracy` - Is suitable for converting documents into an editable format (e.g. RTF,\n    DOCX). Enables detection of font styles and full synthesis of the logical structure of a document.\n  * `document_conversion_speed` - Has an emphasis on speed rather than accuracy.  See document_conversion_accuracy.\n  * `text_extraction_accuracy` - Is suitable for extracting text from a document. Enables detection of all text on an image,\n    including small text areas of low quality (pictures and tables are not detected). Full synthesis of the logical\n    structure of a document is not performed.\n  * `text_extraction_speed` - Has an emphasis on speed rather than accuracy.  See text_extraction_accuracy.\n  * `field_level_recognition` - Is suitable for recognizing short text fragments\n  * `fast` - Deprecated.  See default.\n  * `mid_range` - Deprecated.  See document_archiving_speed\n  * `high_quality` - Deprecated.  See document_archiving_accuracy\n"
          },
          "rotation" : {
            "type" : "string",
            "enum" : [ "auto", "no_rotation", "left", "right", "upside_down" ],
            "default" : "auto",
            "description" : "Specifies the page rotation to use on the images. This will\nrotate the images before processing.\n* `left` Indicates the top of the image is on the left side of the document i.e. it is rotated 90 degrees counter-clockwise.\n* `right` - Indicates the top of the image is on the right side of the document i.e. it is rotate 90 degrees clockwise.\n* `upside_down` - Indicates the document should be rotate 180 degrees before processing.\n"
          },
          "deskew" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Whether to deskew text. This will attempt to correct images where text is not level with the page. Defaults to true"
          },
          "clearOcrCache" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Specifies whether to clear OCR cache. By default the OCR cache will be deleted upon completion. The default location for this cache is under the case directory. See also 'outputDirectory' for customising the location of this cache. Defaults to true"
          },
          "outputDirectory" : {
            "type" : "string",
            "description" : "Specifies the output directory. Defaults to the temporary directory"
          },
          "languages" : {
            "type" : "string",
            "default" : "English",
            "description" : "Specifies the language to use during recognition. Defaults to English"
          },
          "timeout" : {
            "type" : "integer",
            "default" : 90,
            "description" : "The timeout duration in minutes for processing an item. Must be greater than 1 minute. Defaults to 90",
            "format" : "int32"
          },
          "updateDuplicates" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Update all duplicate items in the case. Defaults to false"
          }
        }
      },
      "OcrRequest" : {
        "type" : "object",
        "deprecated" : true,
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns everything."
          },
          "ocrOptions" : {
            "$ref" : "#/components/schemas/OcrOptions"
          },
          "ocrImagingOptions" : {
            "$ref" : "#/components/schemas/ImagingOptions"
          },
          "tags" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          }
        }
      },
      "OcrOptionsV2" : {
        "type" : "object",
        "properties" : {
          "regeneratePdfs" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Specifies whether to regenerate PDFs before they are sent to the OCR processor. Defaults to false"
          },
          "updatePdf" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Specifies whether to update PDFs in the print store with the PDF created by the OCR processor. Defaults to true"
          },
          "updateText" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Specifies whether to update the item's text with the text extrated with the OCR processor. Defaults to true"
          },
          "textModification" : {
            "type" : "string",
            "default" : "append",
            "enum" : [ "append", "overwrite" ],
            "description" : "Specifies whether to append or overwrite new text to the item's existing text. Ignored if 'updateText' is set to false. Defaults to append."
          },
          "quality" : {
            "type" : "string",
            "enum" : [ "default", "document_archiving_accuracy", "document_archiving_speed,", "book_archiving_accuracy", "book_archiving_speed", "document_conversion_accuracy", "document_conversion_speed", "text_extraction_accuracy", "text_extraction_speed", "field_level_recognition", "fast", "mid_range", "high_quality" ],
            "description" : "OCR Quality:\n  * `default` - will use default values which usually produce a good result in a reasonable time.\n  * `document_archiving_accuracy` - Is suitable for creating an electronic archive (e.g. PDF). Enables detection\n    of maximum text on an image, including text embedded into the image. Full synthesis of the logical structure\n    of a document is not performed.\n  * `document_archiving_speed` - Has an emphasis on speed rather than accuracy.  See document_archiving_accuracy.\n  * `book_archiving_accuracy` - Is suitable for creating an electronic library (e.g. PDF). Enables detection\n    of font styles and full synthesis of the logical structure of a document.\n  * `book_archiving_speed` - Has an emphasis on speed rather than accuracy.  See book_archiving_accuracy.\n  * `document_conversion_accuracy` - Is suitable for converting documents into an editable format (e.g. RTF,\n    DOCX). Enables detection of font styles and full synthesis of the logical structure of a document.\n  * `document_conversion_speed` - Has an emphasis on speed rather than accuracy.  See document_conversion_accuracy.\n  * `text_extraction_accuracy` - Is suitable for extracting text from a document. Enables detection of all text on an image,\n    including small text areas of low quality (pictures and tables are not detected). Full synthesis of the logical\n    structure of a document is not performed.\n  * `text_extraction_speed` - Has an emphasis on speed rather than accuracy.  See text_extraction_accuracy.\n  * `field_level_recognition` - Is suitable for recognizing short text fragments\n  * `fast` - Deprecated.  See default.\n  * `mid_range` - Deprecated.  See document_archiving_speed\n  * `high_quality` - Deprecated.  See document_archiving_accuracy\n"
          },
          "rotation" : {
            "type" : "string",
            "enum" : [ "auto", "no_rotation", "left", "right", "upside_down" ],
            "default" : "auto",
            "description" : "Specifies the page rotation to use on the images. This will\nrotate the images before processing.\n* `left` Indicates the top of the image is on the left side of the document i.e. it is rotated 90 degrees counter-clockwise.\n* `right` - Indicates the top of the image is on the right side of the document i.e. it is rotate 90 degrees clockwise.\n* `upside_down` - Indicates the document should be rotate 180 degrees before processing.\n"
          },
          "deskew" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Whether to deskew text. This will attempt to correct images where text is not level with the page. Defaults to true"
          },
          "clearOcrCache" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Specifies whether to clear OCR cache. By default the OCR cache will be deleted upon completion. The default location for this cache is under the case directory. See also 'outputDirectory' for customising the location of this cache. Defaults to true"
          },
          "outputDirectory" : {
            "type" : "string",
            "description" : "Specifies the output directory. Defaults to the temporary directory"
          },
          "languages" : {
            "type" : "array",
            "description" : "Specifies the languages to use during recognition. Defaults to English",
            "items" : {
              "$ref" : "#/components/schemas/Languages"
            }
          },
          "timeout" : {
            "type" : "integer",
            "default" : 90,
            "description" : "The timeout duration in minutes for processing an item. Must be greater than 1 minute. Defaults to 90",
            "format" : "int32"
          },
          "updateDuplicates" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Update all duplicate items in the case. Defaults to false"
          }
        }
      },
      "OcrRequestV2" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns everything."
          },
          "ocrOptions" : {
            "$ref" : "#/components/schemas/OcrOptionsV2"
          },
          "ocrImagingOptions" : {
            "$ref" : "#/components/schemas/ImagingOptions"
          },
          "ocrProfile" : {
            "type" : "string",
            "description" : "The name of the OCR Profile to use. If you use this setting then do not use any other settings to perform OCR from ocrOptions as everything will be overridden by the loaded OCR profile."
          },
          "imagingProfile" : {
            "type" : "string",
            "description" : "The name of the Imaging Profile to use. If you use this setting then do not use any settings from ocrImagingOptions as those settings will be overridden by the ones from the profile."
          },
          "tags" : {
            "type" : "object",
            "description" : "a map of tags to apply to the items.  The map must contain keys 'add' or 'remove' and the value is the tag to apply or delete.",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          }
        }
      },
      "ProductionSetRequest" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the production set."
          },
          "description" : {
            "type" : "string",
            "description" : "A description for the production set."
          },
          "prefix" : {
            "type" : "string",
            "description" : "Prefix used for document numbering."
          },
          "startingNumber" : {
            "type" : "string",
            "description" : "The first number used for document numbering."
          },
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "includeFamilies" : {
            "type" : "boolean",
            "description" : "If true, includes family items for the collection of items returned by the query. Default is false.",
            "default" : false
          },
          "markupSets" : {
            "type" : "array",
            "description" : "Sets the given markup sets to be used during the export.",
            "items" : {
              "type" : "string"
            }
          },
          "applyRedactions" : {
            "type" : "boolean",
            "description" : "If true, applies redactions in the markup sets. Default is true.",
            "default" : true
          },
          "applyHighlights" : {
            "type" : "boolean",
            "description" : "If true, applies highlights in the markup sets. Default is true.",
            "default" : true
          },
          "generatePdfStores" : {
            "type" : "boolean",
            "description" : "Generates print previews for the selected items in this production set. Default is false.",
            "default" : false
          },
          "pdfStoresQuery" : {
            "type" : "string",
            "description" : "Query that identifies which production set items should have print previews generated. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "parallelProcessingSettings" : {
            "$ref" : "#/components/schemas/ParallelProcessingSettings"
          }
        }
      },
      "ProductionSetResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the production set."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the production set."
          },
          "guid" : {
            "type" : "string",
            "description" : "Production set GUID."
          },
          "frozen" : {
            "type" : "boolean",
            "description" : "Indicates whether or not the production set is frozen."
          },
          "nextDocumentNumber" : {
            "type" : "string",
            "description" : "Document number that will be used for the next item added to this production set."
          },
          "prefix" : {
            "type" : "string",
            "description" : "Prefix used for document numbering."
          },
          "nextDocumentId" : {
            "type" : "string",
            "description" : "Document ID that will be used for the next item added to this production set."
          },
          "firstDocumentNumber" : {
            "type" : "string",
            "description" : "Document number for the first item in this production set."
          },
          "itemCount" : {
            "type" : "integer",
            "description" : "Number of items in the production set.",
            "format" : "int64"
          }
        }
      },
      "BulkProductionSetWithProfilesRequest" : {
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "description" : "Query items that should be included. If a query is not supplied it defaults to an empty string, which returns all items."
          },
          "deduplicate" : {
            "type" : "string"
          },
          "relationType" : {
            "type" : "string"
          },
          "includeFamily" : {
            "type" : "boolean"
          },
          "familyQuery" : {
            "type" : "string"
          },
          "includeDuplicates" : {
            "type" : "boolean"
          },
          "duplicatesQuery" : {
            "type" : "string"
          },
          "includeNearDuplicates" : {
            "type" : "boolean"
          },
          "nearDuplicatesQuery" : {
            "type" : "string"
          },
          "nearDuplicatesThreshold" : {
            "type" : "number",
            "format" : "float"
          },
          "threadsQuery" : {
            "type" : "string"
          },
          "productionProfileName" : {
            "type" : "string",
            "description" : "The name of the production profile to use."
          },
          "imagingProfileName" : {
            "type" : "string",
            "description" : "The name of the imaging profile to use."
          },
          "skipNativesSlipsheetedItems" : {
            "type" : "boolean",
            "description" : "Sets whether this production set skips export of natives for slip-sheeted items."
          },
          "description" : {
            "type" : "string",
            "description" : "Set the long description of the production set."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the production set to operate on."
          }
        }
      },
      "RestCluster" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the cluster"
          },
          "localMember" : {
            "$ref" : "#/components/schemas/RestMember"
          },
          "members" : {
            "type" : "array",
            "description" : "List of members of the cluster, including the local member. There should be at least one member in the list.",
            "items" : {
              "$ref" : "#/components/schemas/RestMember"
            }
          }
        }
      },
      "RestMember" : {
        "type" : "object",
        "properties" : {
          "serverId" : {
            "type" : "string",
            "description" : "The serverId of the member. The serverId is the instance serverId."
          },
          "address" : {
            "type" : "string",
            "description" : "The IP address of the member."
          },
          "port" : {
            "type" : "integer",
            "description" : "The port number of the member for communication between other cluster members.",
            "format" : "int32"
          },
          "workerRoles" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "BROKER", "AGENT" ]
            }
          }
        }
      },
      "SystemPropertyResponse" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the system property."
          },
          "value" : {
            "type" : "string",
            "description" : "The current value of the system property, or null if there was no property with that key."
          },
          "previousValue" : {
            "type" : "string",
            "description" : "The previous value of the system property, or null if there was no property with that key."
          }
        }
      },
      "SystemPropertyRequest" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The value of the system property."
          }
        }
      },
      "UserScriptRequest" : {
        "type" : "object",
        "properties" : {
          "script" : {
            "type" : "string",
            "description" : "A script to execute as a literal string.  If the filename property has a value, this field will be ignored and the script will be run from the provided file location instead."
          },
          "language" : {
            "type" : "string",
            "description" : "Language that the script is written in.",
            "enum" : [ "RUBY", "JAVASCRIPT", "PYTHON" ]
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string",
            "description" : "A brief description of what the script does."
          },
          "relativeOutputDirectory" : {
            "type" : "string"
          },
          "fileName" : {
            "type" : "string",
            "description" : "The path location of a script file, relative to the 'userScriptsLocation' property. If this field has a value, it will be used and has priority over the \"script\" field."
          },
          "async" : {
            "type" : "boolean",
            "description" : "Specifies whether this script should run asynchronously.  Defaults to true."
          },
          "customArguments" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Used to map any arguments the user wants to add and reference later in the script."
          },
          "writeOutputToFileSystem" : {
            "type" : "boolean"
          },
          "scriptId" : {
            "type" : "string"
          }
        }
      },
      "AboutResponseV2" : {
        "type" : "object",
        "properties" : {
          "server" : {
            "type" : "string",
            "description" : "The URL of the server as configured by the publicURL property."
          },
          "nuixRestfulVersion" : {
            "type" : "string",
            "description" : "The version of the service."
          },
          "engineVersion" : {
            "type" : "string",
            "description" : "The version of the Nuix engine the service is running."
          },
          "startupTime" : {
            "type" : "string",
            "description" : "The startup time of the server in milliseconds.",
            "format" : "date-time"
          },
          "serverId" : {
            "type" : "string",
            "description" : "The server ID as configured by the serverId property."
          }
        }
      },
      "AboutResponseV1" : {
        "type" : "object",
        "properties" : {
          "server" : {
            "type" : "string",
            "description" : "The URL of the server as configured by the publicURL property.",
            "deprecated" : true
          },
          "nuixRestfulVersion" : {
            "type" : "string",
            "description" : "The version of the service.",
            "deprecated" : true
          },
          "engineVersion" : {
            "type" : "string",
            "description" : "The version of the Nuix engine the service is running.",
            "deprecated" : true
          },
          "startupTime" : {
            "type" : "string",
            "description" : "The startup time of the server in milliseconds.",
            "format" : "date-time",
            "deprecated" : true
          },
          "serverId" : {
            "type" : "string",
            "description" : "The server ID as configured by the serverId property.",
            "deprecated" : true
          },
          "licenceSource" : {
            "description" : "The license source.  Note this is always server.",
            "deprecated" : true
          },
          "casePrivilegeSecurityEnabled" : {
            "type" : "boolean",
            "description" : "Unused and deprecated.  Always false.",
            "deprecated" : true
          },
          "itemSecurityEnabled" : {
            "type" : "boolean",
            "description" : "Unused and deprecated. Always false.",
            "deprecated" : true
          },
          "specificLicenseRequiredAtLogin" : {
            "type" : "boolean",
            "description" : "Unused and deprecated. Always false.",
            "deprecated" : true
          },
          "userManagementUrl" : {
            "type" : "string",
            "description" : "Unused and deprecated.  Always empty string.",
            "deprecated" : true
          },
          "textHighlightingEnabled" : {
            "type" : "boolean",
            "description" : "Unused and deprecated.  Return value as configured based on the textHighlightingEnabled property.",
            "deprecated" : true
          },
          "phraseHighlightingEnabled" : {
            "type" : "boolean",
            "description" : "Unused and deprecated.  Return value as configured based on the phraseHighlightingEnabled property.",
            "deprecated" : true
          }
        }
      },
      "QueryValidationResponse" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "boolean",
            "description" : "valid"
          },
          "query" : {
            "type" : "string",
            "description" : "query"
          },
          "exception" : {
            "type" : "string",
            "description" : "exception"
          }
        }
      },
      "CharsetResponse" : {
        "type" : "object",
        "description" : "An object describing a system charset.",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the charset."
          },
          "displayName" : {
            "type" : "string",
            "description" : "A description of the charset."
          }
        }
      },
      "EntityTypeResponse" : {
        "type" : "object",
        "description" : "The types of named entities associated with a case.",
        "properties" : {
          "entityTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EntityType"
            }
          }
        }
      },
      "EntityType" : {
        "type" : "object",
        "description" : "A named entity.",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Gets the name of the entity type."
          },
          "localisedName" : {
            "type" : "string",
            "description" : "Gets the name of the entity type, localised appropriately for display to users."
          }
        }
      },
      "Languages" : {
        "type" : "string",
        "enum" : [ "Abkhaz", "Adyghe", "Afrikaans", "Agul", "Albanian", "Altaic", "Arabic", "ArmenianEastern", "ArmenianGrabar", "ArmenianWestern", "Awar", "Aymara", "AzeriCyrillic", "AzeriLatin", "Bashkir", "Basque", "Belarusian", "Bemba", "Blackfoot", "Breton", "Bugotu", "Bulgarian", "Buryat", "Catalan", "Chamorro", "Chechen", "ChinesePRC", "ChineseTaiwan", "Chukcha", "Chuvash", "Corsican", "CrimeanTatar", "Croatian", "Crow", "Czech", "Danish", "Dargwa", "Dungan", "Dutch", "DutchBelgian", "English", "EskimoCyrillic", "EskimoLatin", "Esperanto", "Estonian", "Even", "Evenki", "Faeroese", "Fijian", "Finnish", "French", "Frisian", "Friulian", "GaelicScottish", "Gagauz", "Galician", "Ganda", "German", "GermanLuxembourg", "GermanNewSpelling", "Greek", "Guarani", "Hani", "Hausa", "Hawaiian", "Hebrew", "Hungarian", "Icelandic", "Ido", "Indonesian", "Ingush", "Interlingua", "Irish", "Italian", "Japanese", "Kabardian", "Kalmyk", "KarachayBalkar", "Karakalpak", "Kasub", "Kawa", "Kazakh", "Khakas", "Khanty", "Kikuyu", "Kirgiz", "Kongo", "Korean", "Koryak", "Kpelle", "Kumyk", "Kurdish", "Lak", "Lappish", "Latin", "Latvian", "LatvianGothic", "Lezgin", "Lithuanian", "Luba", "Macedonian", "Malagasy", "Malay", "Malinke", "Maltese", "Mansi", "Maori", "Mari", "Maya", "Miao", "Minankabaw", "Mohawk", "Mongol", "Mordvin", "Nahuatl", "Nenets", "Nivkh", "Nogay", "Norwegian", "NorwegianBokmal", "NorwegianNynorsk", "Nyanja", "Occidental", "Ojibway", "Ossetic", "Papiamento", "PidginEnglish", "Polish", "PortugueseBrazilian", "PortugueseStandard", "Provencal", "Quechua", "RhaetoRomanic", "Romanian", "RomanianMoldavia", "Romany", "Ruanda", "Rundi", "Russian", "RussianOldSpelling", "RussianWithAccent", "Samoan", "Selkup", "SerbianCyrillic", "SerbianLatin", "Shona", "Sioux", "Slovak", "Slovenian", "Somali", "Sorbian", "Sotho", "Spanish", "Sunda", "Swahili", "Swazi", "Swedish", "Tabassaran", "Tagalog", "Tahitian", "Tajik", "Tatar", "Thai", "Tinpo", "Tongan", "Tswana", "Tun", "Turkish", "Turkmen", "TurkmenLatin", "Tuvin", "Udmurt", "UighurCyrillic", "UighurLatin", "Ukrainian", "UzbekCyrillic", "UzbekLatin", "Vietnamese", "Visayan", "Welsh", "Wolof", "Xhosa", "Yakut", "Yiddish", "Zapotec", "Zulu" ]
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "name" : "nuix-auth-token",
        "in" : "header"
      }
    }
  }
}